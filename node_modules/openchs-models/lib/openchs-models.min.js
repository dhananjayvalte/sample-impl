!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("openchs-models",[],t):"object"==typeof exports?exports["openchs-models"]=t():e["openchs-models"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=132)}([function(e,t,n){(function(e,r){var a;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,s=200,o="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",d="__lodash_hash_undefined__",l=500,c="__lodash_placeholder__",_=1,m=2,h=4,f=1,p=2,y=1,M=2,g=4,L=8,v=16,Y=32,D=64,T=128,k=256,b=512,w=30,S="...",E=800,O=16,j=1,H=2,x=1/0,A=9007199254740991,I=1.7976931348623157e308,F=NaN,N=4294967295,U=N-1,P=N>>>1,W=[["ary",T],["bind",y],["bindKey",M],["curry",L],["curryRight",v],["flip",b],["partial",Y],["partialRight",D],["rearg",k]],R="[object Arguments]",V="[object Array]",C="[object AsyncFunction]",z="[object Boolean]",B="[object Date]",J="[object DOMException]",K="[object Error]",G="[object Function]",$="[object GeneratorFunction]",q="[object Map]",Z="[object Number]",Q="[object Null]",X="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",ae="[object Symbol]",ie="[object Undefined]",se="[object WeakMap]",oe="[object WeakSet]",ue="[object ArrayBuffer]",de="[object DataView]",le="[object Float32Array]",ce="[object Float64Array]",_e="[object Int8Array]",me="[object Int16Array]",he="[object Int32Array]",fe="[object Uint8Array]",pe="[object Uint8ClampedArray]",ye="[object Uint16Array]",Me="[object Uint32Array]",ge=/\b__p \+= '';/g,Le=/\b(__p \+=) '' \+/g,ve=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Ye=/&(?:amp|lt|gt|quot|#39);/g,De=/[&<>"']/g,Te=RegExp(Ye.source),ke=RegExp(De.source),be=/<%-([\s\S]+?)%>/g,we=/<%([\s\S]+?)%>/g,Se=/<%=([\s\S]+?)%>/g,Ee=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Oe=/^\w*$/,je=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,He=/[\\^$.*+?()[\]{}|]/g,xe=RegExp(He.source),Ae=/^\s+|\s+$/g,Ie=/^\s+/,Fe=/\s+$/,Ne=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ue=/\{\n\/\* \[wrapped with (.+)\] \*/,Pe=/,? & /,We=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Re=/\\(\\)?/g,Ve=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ce=/\w*$/,ze=/^[-+]0x[0-9a-f]+$/i,Be=/^0b[01]+$/i,Je=/^\[object .+?Constructor\]$/,Ke=/^0o[0-7]+$/i,Ge=/^(?:0|[1-9]\d*)$/,$e=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,qe=/($^)/,Ze=/['\n\r\u2028\u2029\\]/g,Qe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Xe="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Xe+"]",nt="["+Qe+"]",rt="\\d+",at="[\\u2700-\\u27bf]",it="[a-z\\xdf-\\xf6\\xf8-\\xff]",st="[^\\ud800-\\udfff"+Xe+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ot="\\ud83c[\\udffb-\\udfff]",ut="[^\\ud800-\\udfff]",dt="(?:\\ud83c[\\udde6-\\uddff]){2}",lt="[\\ud800-\\udbff][\\udc00-\\udfff]",ct="[A-Z\\xc0-\\xd6\\xd8-\\xde]",_t="(?:"+it+"|"+st+")",mt="(?:"+ct+"|"+st+")",ht="(?:"+nt+"|"+ot+")"+"?",ft="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[ut,dt,lt].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),pt="(?:"+[at,dt,lt].join("|")+")"+ft,yt="(?:"+[ut+nt+"?",nt,dt,lt,et].join("|")+")",Mt=RegExp("['’]","g"),gt=RegExp(nt,"g"),Lt=RegExp(ot+"(?="+ot+")|"+yt+ft,"g"),vt=RegExp([ct+"?"+it+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ct,"$"].join("|")+")",mt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ct+_t,"$"].join("|")+")",ct+"?"+_t+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ct+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,pt].join("|"),"g"),Yt=RegExp("[\\u200d\\ud800-\\udfff"+Qe+"\\ufe0e\\ufe0f]"),Dt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Tt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],kt=-1,bt={};bt[le]=bt[ce]=bt[_e]=bt[me]=bt[he]=bt[fe]=bt[pe]=bt[ye]=bt[Me]=!0,bt[R]=bt[V]=bt[ue]=bt[z]=bt[de]=bt[B]=bt[K]=bt[G]=bt[q]=bt[Z]=bt[X]=bt[te]=bt[ne]=bt[re]=bt[se]=!1;var wt={};wt[R]=wt[V]=wt[ue]=wt[de]=wt[z]=wt[B]=wt[le]=wt[ce]=wt[_e]=wt[me]=wt[he]=wt[q]=wt[Z]=wt[X]=wt[te]=wt[ne]=wt[re]=wt[ae]=wt[fe]=wt[pe]=wt[ye]=wt[Me]=!0,wt[K]=wt[G]=wt[se]=!1;var St={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Et=parseFloat,Ot=parseInt,jt="object"==typeof e&&e&&e.Object===Object&&e,Ht="object"==typeof self&&self&&self.Object===Object&&self,xt=jt||Ht||Function("return this")(),At=t&&!t.nodeType&&t,It=At&&"object"==typeof r&&r&&!r.nodeType&&r,Ft=It&&It.exports===At,Nt=Ft&&jt.process,Ut=function(){try{var e=It&&It.require&&It.require("util").types;return e||Nt&&Nt.binding&&Nt.binding("util")}catch(e){}}(),Pt=Ut&&Ut.isArrayBuffer,Wt=Ut&&Ut.isDate,Rt=Ut&&Ut.isMap,Vt=Ut&&Ut.isRegExp,Ct=Ut&&Ut.isSet,zt=Ut&&Ut.isTypedArray;function Bt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Jt(e,t,n,r){for(var a=-1,i=null==e?0:e.length;++a<i;){var s=e[a];t(r,s,n(s),e)}return r}function Kt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Gt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function $t(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function qt(e,t){for(var n=-1,r=null==e?0:e.length,a=0,i=[];++n<r;){var s=e[n];t(s,n,e)&&(i[a++]=s)}return i}function Zt(e,t){return!!(null==e?0:e.length)&&un(e,t,0)>-1}function Qt(e,t,n){for(var r=-1,a=null==e?0:e.length;++r<a;)if(n(t,e[r]))return!0;return!1}function Xt(e,t){for(var n=-1,r=null==e?0:e.length,a=Array(r);++n<r;)a[n]=t(e[n],n,e);return a}function en(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}function tn(e,t,n,r){var a=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++a]);++a<i;)n=t(n,e[a],a,e);return n}function nn(e,t,n,r){var a=null==e?0:e.length;for(r&&a&&(n=e[--a]);a--;)n=t(n,e[a],a,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var an=_n("length");function sn(e,t,n){var r;return n(e,function(e,n,a){if(t(e,n,a))return r=n,!1}),r}function on(e,t,n,r){for(var a=e.length,i=n+(r?1:-1);r?i--:++i<a;)if(t(e[i],i,e))return i;return-1}function un(e,t,n){return t==t?function(e,t,n){var r=n-1,a=e.length;for(;++r<a;)if(e[r]===t)return r;return-1}(e,t,n):on(e,ln,n)}function dn(e,t,n,r){for(var a=n-1,i=e.length;++a<i;)if(r(e[a],t))return a;return-1}function ln(e){return e!=e}function cn(e,t){var n=null==e?0:e.length;return n?fn(e,t)/n:F}function _n(e){return function(t){return null==t?i:t[e]}}function mn(e){return function(t){return null==e?i:e[t]}}function hn(e,t,n,r,a){return a(e,function(e,a,i){n=r?(r=!1,e):t(n,e,a,i)}),n}function fn(e,t){for(var n,r=-1,a=e.length;++r<a;){var s=t(e[r]);s!==i&&(n=n===i?s:n+s)}return n}function pn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function yn(e){return function(t){return e(t)}}function Mn(e,t){return Xt(t,function(t){return e[t]})}function gn(e,t){return e.has(t)}function Ln(e,t){for(var n=-1,r=e.length;++n<r&&un(t,e[n],0)>-1;);return n}function vn(e,t){for(var n=e.length;n--&&un(t,e[n],0)>-1;);return n}var Yn=mn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Dn=mn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Tn(e){return"\\"+St[e]}function kn(e){return Yt.test(e)}function bn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function wn(e,t){return function(n){return e(t(n))}}function Sn(e,t){for(var n=-1,r=e.length,a=0,i=[];++n<r;){var s=e[n];s!==t&&s!==c||(e[n]=c,i[a++]=n)}return i}function En(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function On(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function jn(e){return kn(e)?function(e){var t=Lt.lastIndex=0;for(;Lt.test(e);)++t;return t}(e):an(e)}function Hn(e){return kn(e)?function(e){return e.match(Lt)||[]}(e):function(e){return e.split("")}(e)}var xn=mn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var An=function e(t){var n,r=(t=null==t?xt:An.defaults(xt.Object(),t,An.pick(xt,Tt))).Array,a=t.Date,Qe=t.Error,Xe=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,at=t.TypeError,it=r.prototype,st=Xe.prototype,ot=tt.prototype,ut=t["__core-js_shared__"],dt=st.toString,lt=ot.hasOwnProperty,ct=0,_t=(n=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",mt=ot.toString,ht=dt.call(tt),ft=xt._,pt=nt("^"+dt.call(lt).replace(He,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),yt=Ft?t.Buffer:i,Lt=t.Symbol,Yt=t.Uint8Array,St=yt?yt.allocUnsafe:i,jt=wn(tt.getPrototypeOf,tt),Ht=tt.create,At=ot.propertyIsEnumerable,It=it.splice,Nt=Lt?Lt.isConcatSpreadable:i,Ut=Lt?Lt.iterator:i,an=Lt?Lt.toStringTag:i,mn=function(){try{var e=Ui(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),In=t.clearTimeout!==xt.clearTimeout&&t.clearTimeout,Fn=a&&a.now!==xt.Date.now&&a.now,Nn=t.setTimeout!==xt.setTimeout&&t.setTimeout,Un=et.ceil,Pn=et.floor,Wn=tt.getOwnPropertySymbols,Rn=yt?yt.isBuffer:i,Vn=t.isFinite,Cn=it.join,zn=wn(tt.keys,tt),Bn=et.max,Jn=et.min,Kn=a.now,Gn=t.parseInt,$n=et.random,qn=it.reverse,Zn=Ui(t,"DataView"),Qn=Ui(t,"Map"),Xn=Ui(t,"Promise"),er=Ui(t,"Set"),tr=Ui(t,"WeakMap"),nr=Ui(tt,"create"),rr=tr&&new tr,ar={},ir=ls(Zn),sr=ls(Qn),or=ls(Xn),ur=ls(er),dr=ls(tr),lr=Lt?Lt.prototype:i,cr=lr?lr.valueOf:i,_r=lr?lr.toString:i;function mr(e){if(So(e)&&!yo(e)&&!(e instanceof yr)){if(e instanceof pr)return e;if(lt.call(e,"__wrapped__"))return cs(e)}return new pr(e)}var hr=function(){function e(){}return function(t){if(!wo(t))return{};if(Ht)return Ht(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function fr(){}function pr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function yr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=N,this.__views__=[]}function Mr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function gr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Lr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function vr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Lr;++t<n;)this.add(e[t])}function Yr(e){var t=this.__data__=new gr(e);this.size=t.size}function Dr(e,t){var n=yo(e),r=!n&&po(e),a=!n&&!r&&vo(e),i=!n&&!r&&!a&&Fo(e),s=n||r||a||i,o=s?pn(e.length,rt):[],u=o.length;for(var d in e)!t&&!lt.call(e,d)||s&&("length"==d||a&&("offset"==d||"parent"==d)||i&&("buffer"==d||"byteLength"==d||"byteOffset"==d)||Bi(d,u))||o.push(d);return o}function Tr(e){var t=e.length;return t?e[va(0,t-1)]:i}function kr(e,t){return os(ni(e),Ar(t,0,e.length))}function br(e){return os(ni(e))}function wr(e,t,n){(n===i||mo(e[t],n))&&(n!==i||t in e)||Hr(e,t,n)}function Sr(e,t,n){var r=e[t];lt.call(e,t)&&mo(r,n)&&(n!==i||t in e)||Hr(e,t,n)}function Er(e,t){for(var n=e.length;n--;)if(mo(e[n][0],t))return n;return-1}function Or(e,t,n,r){return Pr(e,function(e,a,i){t(r,e,n(e),i)}),r}function jr(e,t){return e&&ri(t,au(t),e)}function Hr(e,t,n){"__proto__"==t&&mn?mn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function xr(e,t){for(var n=-1,a=t.length,s=r(a),o=null==e;++n<a;)s[n]=o?i:Xo(e,t[n]);return s}function Ar(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function Ir(e,t,n,r,a,s){var o,u=t&_,d=t&m,l=t&h;if(n&&(o=a?n(e,r,a,s):n(e)),o!==i)return o;if(!wo(e))return e;var c=yo(e);if(c){if(o=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&lt.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!u)return ni(e,o)}else{var f=Ri(e),p=f==G||f==$;if(vo(e))return qa(e,u);if(f==X||f==R||p&&!a){if(o=d||p?{}:Ci(e),!u)return d?function(e,t){return ri(e,Wi(e),t)}(e,function(e,t){return e&&ri(t,iu(t),e)}(o,e)):function(e,t){return ri(e,Pi(e),t)}(e,jr(o,e))}else{if(!wt[f])return a?e:{};o=function(e,t,n){var r,a=e.constructor;switch(t){case ue:return Za(e);case z:case B:return new a(+e);case de:return function(e,t){var n=t?Za(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case le:case ce:case _e:case me:case he:case fe:case pe:case ye:case Me:return Qa(e,n);case q:return new a;case Z:case re:return new a(e);case te:return function(e){var t=new e.constructor(e.source,Ce.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new a;case ae:return r=e,cr?tt(cr.call(r)):{}}}(e,f,u)}}s||(s=new Yr);var y=s.get(e);if(y)return y;if(s.set(e,o),xo(e))return e.forEach(function(r){o.add(Ir(r,t,n,r,e,s))}),o;if(Eo(e))return e.forEach(function(r,a){o.set(a,Ir(r,t,n,a,e,s))}),o;var M=c?i:(l?d?ji:Oi:d?iu:au)(e);return Kt(M||e,function(r,a){M&&(r=e[a=r]),Sr(o,a,Ir(r,t,n,a,e,s))}),o}function Fr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var a=n[r],s=t[a],o=e[a];if(o===i&&!(a in e)||!s(o))return!1}return!0}function Nr(e,t,n){if("function"!=typeof e)throw new at(u);return rs(function(){e.apply(i,n)},t)}function Ur(e,t,n,r){var a=-1,i=Zt,o=!0,u=e.length,d=[],l=t.length;if(!u)return d;n&&(t=Xt(t,yn(n))),r?(i=Qt,o=!1):t.length>=s&&(i=gn,o=!1,t=new vr(t));e:for(;++a<u;){var c=e[a],_=null==n?c:n(c);if(c=r||0!==c?c:0,o&&_==_){for(var m=l;m--;)if(t[m]===_)continue e;d.push(c)}else i(t,_,r)||d.push(c)}return d}mr.templateSettings={escape:be,evaluate:we,interpolate:Se,variable:"",imports:{_:mr}},mr.prototype=fr.prototype,mr.prototype.constructor=mr,pr.prototype=hr(fr.prototype),pr.prototype.constructor=pr,yr.prototype=hr(fr.prototype),yr.prototype.constructor=yr,Mr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},Mr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Mr.prototype.get=function(e){var t=this.__data__;if(nr){var n=t[e];return n===d?i:n}return lt.call(t,e)?t[e]:i},Mr.prototype.has=function(e){var t=this.__data__;return nr?t[e]!==i:lt.call(t,e)},Mr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nr&&t===i?d:t,this},gr.prototype.clear=function(){this.__data__=[],this.size=0},gr.prototype.delete=function(e){var t=this.__data__,n=Er(t,e);return!(n<0||(n==t.length-1?t.pop():It.call(t,n,1),--this.size,0))},gr.prototype.get=function(e){var t=this.__data__,n=Er(t,e);return n<0?i:t[n][1]},gr.prototype.has=function(e){return Er(this.__data__,e)>-1},gr.prototype.set=function(e,t){var n=this.__data__,r=Er(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Lr.prototype.clear=function(){this.size=0,this.__data__={hash:new Mr,map:new(Qn||gr),string:new Mr}},Lr.prototype.delete=function(e){var t=Fi(this,e).delete(e);return this.size-=t?1:0,t},Lr.prototype.get=function(e){return Fi(this,e).get(e)},Lr.prototype.has=function(e){return Fi(this,e).has(e)},Lr.prototype.set=function(e,t){var n=Fi(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},vr.prototype.add=vr.prototype.push=function(e){return this.__data__.set(e,d),this},vr.prototype.has=function(e){return this.__data__.has(e)},Yr.prototype.clear=function(){this.__data__=new gr,this.size=0},Yr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Yr.prototype.get=function(e){return this.__data__.get(e)},Yr.prototype.has=function(e){return this.__data__.has(e)},Yr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof gr){var r=n.__data__;if(!Qn||r.length<s-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Lr(r)}return n.set(e,t),this.size=n.size,this};var Pr=si(Kr),Wr=si(Gr,!0);function Rr(e,t){var n=!0;return Pr(e,function(e,r,a){return n=!!t(e,r,a)}),n}function Vr(e,t,n){for(var r=-1,a=e.length;++r<a;){var s=e[r],o=t(s);if(null!=o&&(u===i?o==o&&!Io(o):n(o,u)))var u=o,d=s}return d}function Cr(e,t){var n=[];return Pr(e,function(e,r,a){t(e,r,a)&&n.push(e)}),n}function zr(e,t,n,r,a){var i=-1,s=e.length;for(n||(n=zi),a||(a=[]);++i<s;){var o=e[i];t>0&&n(o)?t>1?zr(o,t-1,n,r,a):en(a,o):r||(a[a.length]=o)}return a}var Br=oi(),Jr=oi(!0);function Kr(e,t){return e&&Br(e,t,au)}function Gr(e,t){return e&&Jr(e,t,au)}function $r(e,t){return qt(t,function(t){return To(e[t])})}function qr(e,t){for(var n=0,r=(t=Ja(t,e)).length;null!=e&&n<r;)e=e[ds(t[n++])];return n&&n==r?e:i}function Zr(e,t,n){var r=t(e);return yo(e)?r:en(r,n(e))}function Qr(e){return null==e?e===i?ie:Q:an&&an in tt(e)?function(e){var t=lt.call(e,an),n=e[an];try{e[an]=i;var r=!0}catch(e){}var a=mt.call(e);return r&&(t?e[an]=n:delete e[an]),a}(e):function(e){return mt.call(e)}(e)}function Xr(e,t){return e>t}function ea(e,t){return null!=e&&lt.call(e,t)}function ta(e,t){return null!=e&&t in tt(e)}function na(e,t,n){for(var a=n?Qt:Zt,s=e[0].length,o=e.length,u=o,d=r(o),l=1/0,c=[];u--;){var _=e[u];u&&t&&(_=Xt(_,yn(t))),l=Jn(_.length,l),d[u]=!n&&(t||s>=120&&_.length>=120)?new vr(u&&_):i}_=e[0];var m=-1,h=d[0];e:for(;++m<s&&c.length<l;){var f=_[m],p=t?t(f):f;if(f=n||0!==f?f:0,!(h?gn(h,p):a(c,p,n))){for(u=o;--u;){var y=d[u];if(!(y?gn(y,p):a(e[u],p,n)))continue e}h&&h.push(p),c.push(f)}}return c}function ra(e,t,n){var r=null==(e=es(e,t=Ja(t,e)))?e:e[ds(Ys(t))];return null==r?i:Bt(r,e,n)}function aa(e){return So(e)&&Qr(e)==R}function ia(e,t,n,r,a){return e===t||(null==e||null==t||!So(e)&&!So(t)?e!=e&&t!=t:function(e,t,n,r,a,s){var o=yo(e),u=yo(t),d=o?V:Ri(e),l=u?V:Ri(t),c=(d=d==R?X:d)==X,_=(l=l==R?X:l)==X,m=d==l;if(m&&vo(e)){if(!vo(t))return!1;o=!0,c=!1}if(m&&!c)return s||(s=new Yr),o||Fo(e)?Si(e,t,n,r,a,s):function(e,t,n,r,a,i,s){switch(n){case de:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ue:return!(e.byteLength!=t.byteLength||!i(new Yt(e),new Yt(t)));case z:case B:case Z:return mo(+e,+t);case K:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case q:var o=bn;case ne:var u=r&f;if(o||(o=En),e.size!=t.size&&!u)return!1;var d=s.get(e);if(d)return d==t;r|=p,s.set(e,t);var l=Si(o(e),o(t),r,a,i,s);return s.delete(e),l;case ae:if(cr)return cr.call(e)==cr.call(t)}return!1}(e,t,d,n,r,a,s);if(!(n&f)){var h=c&&lt.call(e,"__wrapped__"),y=_&&lt.call(t,"__wrapped__");if(h||y){var M=h?e.value():e,g=y?t.value():t;return s||(s=new Yr),a(M,g,n,r,s)}}return!!m&&(s||(s=new Yr),function(e,t,n,r,a,s){var o=n&f,u=Oi(e),d=u.length,l=Oi(t).length;if(d!=l&&!o)return!1;for(var c=d;c--;){var _=u[c];if(!(o?_ in t:lt.call(t,_)))return!1}var m=s.get(e);if(m&&s.get(t))return m==t;var h=!0;s.set(e,t),s.set(t,e);for(var p=o;++c<d;){_=u[c];var y=e[_],M=t[_];if(r)var g=o?r(M,y,_,t,e,s):r(y,M,_,e,t,s);if(!(g===i?y===M||a(y,M,n,r,s):g)){h=!1;break}p||(p="constructor"==_)}if(h&&!p){var L=e.constructor,v=t.constructor;L!=v&&"constructor"in e&&"constructor"in t&&!("function"==typeof L&&L instanceof L&&"function"==typeof v&&v instanceof v)&&(h=!1)}return s.delete(e),s.delete(t),h}(e,t,n,r,a,s))}(e,t,n,r,ia,a))}function sa(e,t,n,r){var a=n.length,s=a,o=!r;if(null==e)return!s;for(e=tt(e);a--;){var u=n[a];if(o&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++a<s;){var d=(u=n[a])[0],l=e[d],c=u[1];if(o&&u[2]){if(l===i&&!(d in e))return!1}else{var _=new Yr;if(r)var m=r(l,c,d,e,t,_);if(!(m===i?ia(c,l,f|p,r,_):m))return!1}}return!0}function oa(e){return!(!wo(e)||(t=e,_t&&_t in t))&&(To(e)?pt:Je).test(ls(e));var t}function ua(e){return"function"==typeof e?e:null==e?Ou:"object"==typeof e?yo(e)?ha(e[0],e[1]):ma(e):Pu(e)}function da(e){if(!qi(e))return zn(e);var t=[];for(var n in tt(e))lt.call(e,n)&&"constructor"!=n&&t.push(n);return t}function la(e){if(!wo(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=qi(e),n=[];for(var r in e)("constructor"!=r||!t&&lt.call(e,r))&&n.push(r);return n}function ca(e,t){return e<t}function _a(e,t){var n=-1,a=go(e)?r(e.length):[];return Pr(e,function(e,r,i){a[++n]=t(e,r,i)}),a}function ma(e){var t=Ni(e);return 1==t.length&&t[0][2]?Qi(t[0][0],t[0][1]):function(n){return n===e||sa(n,e,t)}}function ha(e,t){return Ki(e)&&Zi(t)?Qi(ds(e),t):function(n){var r=Xo(n,e);return r===i&&r===t?eu(n,e):ia(t,r,f|p)}}function fa(e,t,n,r,a){e!==t&&Br(t,function(s,o){if(wo(s))a||(a=new Yr),function(e,t,n,r,a,s,o){var u=ts(e,n),d=ts(t,n),l=o.get(d);if(l)wr(e,n,l);else{var c=s?s(u,d,n+"",e,t,o):i,_=c===i;if(_){var m=yo(d),h=!m&&vo(d),f=!m&&!h&&Fo(d);c=d,m||h||f?yo(u)?c=u:Lo(u)?c=ni(u):h?(_=!1,c=qa(d,!0)):f?(_=!1,c=Qa(d,!0)):c=[]:jo(d)||po(d)?(c=u,po(u)?c=zo(u):wo(u)&&!To(u)||(c=Ci(d))):_=!1}_&&(o.set(d,c),a(c,d,r,s,o),o.delete(d)),wr(e,n,c)}}(e,t,o,n,fa,r,a);else{var u=r?r(ts(e,o),s,o+"",e,t,a):i;u===i&&(u=s),wr(e,o,u)}},iu)}function pa(e,t){var n=e.length;if(n)return Bi(t+=t<0?n:0,n)?e[t]:i}function ya(e,t,n){var r=-1;return t=Xt(t.length?t:[Ou],yn(Ii())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(_a(e,function(e,n,a){return{criteria:Xt(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){for(var r=-1,a=e.criteria,i=t.criteria,s=a.length,o=n.length;++r<s;){var u=Xa(a[r],i[r]);if(u){if(r>=o)return u;var d=n[r];return u*("desc"==d?-1:1)}}return e.index-t.index}(e,t,n)})}function Ma(e,t,n){for(var r=-1,a=t.length,i={};++r<a;){var s=t[r],o=qr(e,s);n(o,s)&&ba(i,Ja(s,e),o)}return i}function ga(e,t,n,r){var a=r?dn:un,i=-1,s=t.length,o=e;for(e===t&&(t=ni(t)),n&&(o=Xt(e,yn(n)));++i<s;)for(var u=0,d=t[i],l=n?n(d):d;(u=a(o,l,u,r))>-1;)o!==e&&It.call(o,u,1),It.call(e,u,1);return e}function La(e,t){for(var n=e?t.length:0,r=n-1;n--;){var a=t[n];if(n==r||a!==i){var i=a;Bi(a)?It.call(e,a,1):Ua(e,a)}}return e}function va(e,t){return e+Pn($n()*(t-e+1))}function Ya(e,t){var n="";if(!e||t<1||t>A)return n;do{t%2&&(n+=e),(t=Pn(t/2))&&(e+=e)}while(t);return n}function Da(e,t){return as(Xi(e,t,Ou),e+"")}function Ta(e){return Tr(mu(e))}function ka(e,t){var n=mu(e);return os(n,Ar(t,0,n.length))}function ba(e,t,n,r){if(!wo(e))return e;for(var a=-1,s=(t=Ja(t,e)).length,o=s-1,u=e;null!=u&&++a<s;){var d=ds(t[a]),l=n;if(a!=o){var c=u[d];(l=r?r(c,d,u):i)===i&&(l=wo(c)?c:Bi(t[a+1])?[]:{})}Sr(u,d,l),u=u[d]}return e}var wa=rr?function(e,t){return rr.set(e,t),e}:Ou,Sa=mn?function(e,t){return mn(e,"toString",{configurable:!0,enumerable:!1,value:wu(t),writable:!0})}:Ou;function Ea(e){return os(mu(e))}function Oa(e,t,n){var a=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var s=r(i);++a<i;)s[a]=e[a+t];return s}function ja(e,t){var n;return Pr(e,function(e,r,a){return!(n=t(e,r,a))}),!!n}function Ha(e,t,n){var r=0,a=null==e?r:e.length;if("number"==typeof t&&t==t&&a<=P){for(;r<a;){var i=r+a>>>1,s=e[i];null!==s&&!Io(s)&&(n?s<=t:s<t)?r=i+1:a=i}return a}return xa(e,t,Ou,n)}function xa(e,t,n,r){t=n(t);for(var a=0,s=null==e?0:e.length,o=t!=t,u=null===t,d=Io(t),l=t===i;a<s;){var c=Pn((a+s)/2),_=n(e[c]),m=_!==i,h=null===_,f=_==_,p=Io(_);if(o)var y=r||f;else y=l?f&&(r||m):u?f&&m&&(r||!h):d?f&&m&&!h&&(r||!p):!h&&!p&&(r?_<=t:_<t);y?a=c+1:s=c}return Jn(s,U)}function Aa(e,t){for(var n=-1,r=e.length,a=0,i=[];++n<r;){var s=e[n],o=t?t(s):s;if(!n||!mo(o,u)){var u=o;i[a++]=0===s?0:s}}return i}function Ia(e){return"number"==typeof e?e:Io(e)?F:+e}function Fa(e){if("string"==typeof e)return e;if(yo(e))return Xt(e,Fa)+"";if(Io(e))return _r?_r.call(e):"";var t=e+"";return"0"==t&&1/e==-x?"-0":t}function Na(e,t,n){var r=-1,a=Zt,i=e.length,o=!0,u=[],d=u;if(n)o=!1,a=Qt;else if(i>=s){var l=t?null:Yi(e);if(l)return En(l);o=!1,a=gn,d=new vr}else d=t?[]:u;e:for(;++r<i;){var c=e[r],_=t?t(c):c;if(c=n||0!==c?c:0,o&&_==_){for(var m=d.length;m--;)if(d[m]===_)continue e;t&&d.push(_),u.push(c)}else a(d,_,n)||(d!==u&&d.push(_),u.push(c))}return u}function Ua(e,t){return null==(e=es(e,t=Ja(t,e)))||delete e[ds(Ys(t))]}function Pa(e,t,n,r){return ba(e,t,n(qr(e,t)),r)}function Wa(e,t,n,r){for(var a=e.length,i=r?a:-1;(r?i--:++i<a)&&t(e[i],i,e););return n?Oa(e,r?0:i,r?i+1:a):Oa(e,r?i+1:0,r?a:i)}function Ra(e,t){var n=e;return n instanceof yr&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function Va(e,t,n){var a=e.length;if(a<2)return a?Na(e[0]):[];for(var i=-1,s=r(a);++i<a;)for(var o=e[i],u=-1;++u<a;)u!=i&&(s[i]=Ur(s[i]||o,e[u],t,n));return Na(zr(s,1),t,n)}function Ca(e,t,n){for(var r=-1,a=e.length,s=t.length,o={};++r<a;){var u=r<s?t[r]:i;n(o,e[r],u)}return o}function za(e){return Lo(e)?e:[]}function Ba(e){return"function"==typeof e?e:Ou}function Ja(e,t){return yo(e)?e:Ki(e,t)?[e]:us(Bo(e))}var Ka=Da;function Ga(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:Oa(e,t,n)}var $a=In||function(e){return xt.clearTimeout(e)};function qa(e,t){if(t)return e.slice();var n=e.length,r=St?St(n):new e.constructor(n);return e.copy(r),r}function Za(e){var t=new e.constructor(e.byteLength);return new Yt(t).set(new Yt(e)),t}function Qa(e,t){var n=t?Za(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Xa(e,t){if(e!==t){var n=e!==i,r=null===e,a=e==e,s=Io(e),o=t!==i,u=null===t,d=t==t,l=Io(t);if(!u&&!l&&!s&&e>t||s&&o&&d&&!u&&!l||r&&o&&d||!n&&d||!a)return 1;if(!r&&!s&&!l&&e<t||l&&n&&a&&!r&&!s||u&&n&&a||!o&&a||!d)return-1}return 0}function ei(e,t,n,a){for(var i=-1,s=e.length,o=n.length,u=-1,d=t.length,l=Bn(s-o,0),c=r(d+l),_=!a;++u<d;)c[u]=t[u];for(;++i<o;)(_||i<s)&&(c[n[i]]=e[i]);for(;l--;)c[u++]=e[i++];return c}function ti(e,t,n,a){for(var i=-1,s=e.length,o=-1,u=n.length,d=-1,l=t.length,c=Bn(s-u,0),_=r(c+l),m=!a;++i<c;)_[i]=e[i];for(var h=i;++d<l;)_[h+d]=t[d];for(;++o<u;)(m||i<s)&&(_[h+n[o]]=e[i++]);return _}function ni(e,t){var n=-1,a=e.length;for(t||(t=r(a));++n<a;)t[n]=e[n];return t}function ri(e,t,n,r){var a=!n;n||(n={});for(var s=-1,o=t.length;++s<o;){var u=t[s],d=r?r(n[u],e[u],u,n,e):i;d===i&&(d=e[u]),a?Hr(n,u,d):Sr(n,u,d)}return n}function ai(e,t){return function(n,r){var a=yo(n)?Jt:Or,i=t?t():{};return a(n,e,Ii(r,2),i)}}function ii(e){return Da(function(t,n){var r=-1,a=n.length,s=a>1?n[a-1]:i,o=a>2?n[2]:i;for(s=e.length>3&&"function"==typeof s?(a--,s):i,o&&Ji(n[0],n[1],o)&&(s=a<3?i:s,a=1),t=tt(t);++r<a;){var u=n[r];u&&e(t,u,r,s)}return t})}function si(e,t){return function(n,r){if(null==n)return n;if(!go(n))return e(n,r);for(var a=n.length,i=t?a:-1,s=tt(n);(t?i--:++i<a)&&!1!==r(s[i],i,s););return n}}function oi(e){return function(t,n,r){for(var a=-1,i=tt(t),s=r(t),o=s.length;o--;){var u=s[e?o:++a];if(!1===n(i[u],u,i))break}return t}}function ui(e){return function(t){var n=kn(t=Bo(t))?Hn(t):i,r=n?n[0]:t.charAt(0),a=n?Ga(n,1).join(""):t.slice(1);return r[e]()+a}}function di(e){return function(t){return tn(Tu(pu(t).replace(Mt,"")),e,"")}}function li(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=hr(e.prototype),r=e.apply(n,t);return wo(r)?r:n}}function ci(e){return function(t,n,r){var a=tt(t);if(!go(t)){var s=Ii(n,3);t=au(t),n=function(e){return s(a[e],e,a)}}var o=e(t,n,r);return o>-1?a[s?t[o]:o]:i}}function _i(e){return Ei(function(t){var n=t.length,r=n,a=pr.prototype.thru;for(e&&t.reverse();r--;){var s=t[r];if("function"!=typeof s)throw new at(u);if(a&&!o&&"wrapper"==xi(s))var o=new pr([],!0)}for(r=o?r:n;++r<n;){var d=xi(s=t[r]),l="wrapper"==d?Hi(s):i;o=l&&Gi(l[0])&&l[1]==(T|L|Y|k)&&!l[4].length&&1==l[9]?o[xi(l[0])].apply(o,l[3]):1==s.length&&Gi(s)?o[d]():o.thru(s)}return function(){var e=arguments,r=e[0];if(o&&1==e.length&&yo(r))return o.plant(r).value();for(var a=0,i=n?t[a].apply(this,e):r;++a<n;)i=t[a].call(this,i);return i}})}function mi(e,t,n,a,s,o,u,d,l,c){var _=t&T,m=t&y,h=t&M,f=t&(L|v),p=t&b,g=h?i:li(e);return function y(){for(var M=arguments.length,L=r(M),v=M;v--;)L[v]=arguments[v];if(f)var Y=Ai(y),D=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(L,Y);if(a&&(L=ei(L,a,s,f)),o&&(L=ti(L,o,u,f)),M-=D,f&&M<c){var T=Sn(L,Y);return Li(e,t,mi,y.placeholder,n,L,T,d,l,c-M)}var k=m?n:this,b=h?k[e]:e;return M=L.length,d?L=function(e,t){for(var n=e.length,r=Jn(t.length,n),a=ni(e);r--;){var s=t[r];e[r]=Bi(s,n)?a[s]:i}return e}(L,d):p&&M>1&&L.reverse(),_&&l<M&&(L.length=l),this&&this!==xt&&this instanceof y&&(b=g||li(b)),b.apply(k,L)}}function hi(e,t){return function(n,r){return function(e,t,n,r){return Kr(e,function(e,a,i){t(r,n(e),a,i)}),r}(n,e,t(r),{})}}function fi(e,t){return function(n,r){var a;if(n===i&&r===i)return t;if(n!==i&&(a=n),r!==i){if(a===i)return r;"string"==typeof n||"string"==typeof r?(n=Fa(n),r=Fa(r)):(n=Ia(n),r=Ia(r)),a=e(n,r)}return a}}function pi(e){return Ei(function(t){return t=Xt(t,yn(Ii())),Da(function(n){var r=this;return e(t,function(e){return Bt(e,r,n)})})})}function yi(e,t){var n=(t=t===i?" ":Fa(t)).length;if(n<2)return n?Ya(t,e):t;var r=Ya(t,Un(e/jn(t)));return kn(t)?Ga(Hn(r),0,e).join(""):r.slice(0,e)}function Mi(e){return function(t,n,a){return a&&"number"!=typeof a&&Ji(t,n,a)&&(n=a=i),t=Wo(t),n===i?(n=t,t=0):n=Wo(n),function(e,t,n,a){for(var i=-1,s=Bn(Un((t-e)/(n||1)),0),o=r(s);s--;)o[a?s:++i]=e,e+=n;return o}(t,n,a=a===i?t<n?1:-1:Wo(a),e)}}function gi(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Co(t),n=Co(n)),e(t,n)}}function Li(e,t,n,r,a,s,o,u,d,l){var c=t&L;t|=c?Y:D,(t&=~(c?D:Y))&g||(t&=~(y|M));var _=[e,t,a,c?s:i,c?o:i,c?i:s,c?i:o,u,d,l],m=n.apply(i,_);return Gi(e)&&ns(m,_),m.placeholder=r,is(m,e,t)}function vi(e){var t=et[e];return function(e,n){if(e=Co(e),n=null==n?0:Jn(Ro(n),292)){var r=(Bo(e)+"e").split("e");return+((r=(Bo(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Yi=er&&1/En(new er([,-0]))[1]==x?function(e){return new er(e)}:Iu;function Di(e){return function(t){var n=Ri(t);return n==q?bn(t):n==ne?On(t):function(e,t){return Xt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Ti(e,t,n,a,s,o,d,l){var _=t&M;if(!_&&"function"!=typeof e)throw new at(u);var m=a?a.length:0;if(m||(t&=~(Y|D),a=s=i),d=d===i?d:Bn(Ro(d),0),l=l===i?l:Ro(l),m-=s?s.length:0,t&D){var h=a,f=s;a=s=i}var p=_?i:Hi(e),b=[e,t,n,a,s,h,f,o,d,l];if(p&&function(e,t){var n=e[1],r=t[1],a=n|r,i=a<(y|M|T),s=r==T&&n==L||r==T&&n==k&&e[7].length<=t[8]||r==(T|k)&&t[7].length<=t[8]&&n==L;if(!i&&!s)return e;r&y&&(e[2]=t[2],a|=n&y?0:g);var o=t[3];if(o){var u=e[3];e[3]=u?ei(u,o,t[4]):o,e[4]=u?Sn(e[3],c):t[4]}(o=t[5])&&(u=e[5],e[5]=u?ti(u,o,t[6]):o,e[6]=u?Sn(e[5],c):t[6]),(o=t[7])&&(e[7]=o),r&T&&(e[8]=null==e[8]?t[8]:Jn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=a}(b,p),e=b[0],t=b[1],n=b[2],a=b[3],s=b[4],!(l=b[9]=b[9]===i?_?0:e.length:Bn(b[9]-m,0))&&t&(L|v)&&(t&=~(L|v)),t&&t!=y)w=t==L||t==v?function(e,t,n){var a=li(e);return function s(){for(var o=arguments.length,u=r(o),d=o,l=Ai(s);d--;)u[d]=arguments[d];var c=o<3&&u[0]!==l&&u[o-1]!==l?[]:Sn(u,l);return(o-=c.length)<n?Li(e,t,mi,s.placeholder,i,u,c,i,i,n-o):Bt(this&&this!==xt&&this instanceof s?a:e,this,u)}}(e,t,l):t!=Y&&t!=(y|Y)||s.length?mi.apply(i,b):function(e,t,n,a){var i=t&y,s=li(e);return function t(){for(var o=-1,u=arguments.length,d=-1,l=a.length,c=r(l+u),_=this&&this!==xt&&this instanceof t?s:e;++d<l;)c[d]=a[d];for(;u--;)c[d++]=arguments[++o];return Bt(_,i?n:this,c)}}(e,t,n,a);else var w=function(e,t,n){var r=t&y,a=li(e);return function t(){return(this&&this!==xt&&this instanceof t?a:e).apply(r?n:this,arguments)}}(e,t,n);return is((p?wa:ns)(w,b),e,t)}function ki(e,t,n,r){return e===i||mo(e,ot[n])&&!lt.call(r,n)?t:e}function bi(e,t,n,r,a,s){return wo(e)&&wo(t)&&(s.set(t,e),fa(e,t,i,bi,s),s.delete(t)),e}function wi(e){return jo(e)?i:e}function Si(e,t,n,r,a,s){var o=n&f,u=e.length,d=t.length;if(u!=d&&!(o&&d>u))return!1;var l=s.get(e);if(l&&s.get(t))return l==t;var c=-1,_=!0,m=n&p?new vr:i;for(s.set(e,t),s.set(t,e);++c<u;){var h=e[c],y=t[c];if(r)var M=o?r(y,h,c,t,e,s):r(h,y,c,e,t,s);if(M!==i){if(M)continue;_=!1;break}if(m){if(!rn(t,function(e,t){if(!gn(m,t)&&(h===e||a(h,e,n,r,s)))return m.push(t)})){_=!1;break}}else if(h!==y&&!a(h,y,n,r,s)){_=!1;break}}return s.delete(e),s.delete(t),_}function Ei(e){return as(Xi(e,i,ys),e+"")}function Oi(e){return Zr(e,au,Pi)}function ji(e){return Zr(e,iu,Wi)}var Hi=rr?function(e){return rr.get(e)}:Iu;function xi(e){for(var t=e.name+"",n=ar[t],r=lt.call(ar,t)?n.length:0;r--;){var a=n[r],i=a.func;if(null==i||i==e)return a.name}return t}function Ai(e){return(lt.call(mr,"placeholder")?mr:e).placeholder}function Ii(){var e=mr.iteratee||ju;return e=e===ju?ua:e,arguments.length?e(arguments[0],arguments[1]):e}function Fi(e,t){var n,r,a=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?a["string"==typeof t?"string":"hash"]:a.map}function Ni(e){for(var t=au(e),n=t.length;n--;){var r=t[n],a=e[r];t[n]=[r,a,Zi(a)]}return t}function Ui(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return oa(n)?n:i}var Pi=Wn?function(e){return null==e?[]:(e=tt(e),qt(Wn(e),function(t){return At.call(e,t)}))}:Vu,Wi=Wn?function(e){for(var t=[];e;)en(t,Pi(e)),e=jt(e);return t}:Vu,Ri=Qr;function Vi(e,t,n){for(var r=-1,a=(t=Ja(t,e)).length,i=!1;++r<a;){var s=ds(t[r]);if(!(i=null!=e&&n(e,s)))break;e=e[s]}return i||++r!=a?i:!!(a=null==e?0:e.length)&&bo(a)&&Bi(s,a)&&(yo(e)||po(e))}function Ci(e){return"function"!=typeof e.constructor||qi(e)?{}:hr(jt(e))}function zi(e){return yo(e)||po(e)||!!(Nt&&e&&e[Nt])}function Bi(e,t){var n=typeof e;return!!(t=null==t?A:t)&&("number"==n||"symbol"!=n&&Ge.test(e))&&e>-1&&e%1==0&&e<t}function Ji(e,t,n){if(!wo(n))return!1;var r=typeof t;return!!("number"==r?go(n)&&Bi(t,n.length):"string"==r&&t in n)&&mo(n[t],e)}function Ki(e,t){if(yo(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Io(e))||Oe.test(e)||!Ee.test(e)||null!=t&&e in tt(t)}function Gi(e){var t=xi(e),n=mr[t];if("function"!=typeof n||!(t in yr.prototype))return!1;if(e===n)return!0;var r=Hi(n);return!!r&&e===r[0]}(Zn&&Ri(new Zn(new ArrayBuffer(1)))!=de||Qn&&Ri(new Qn)!=q||Xn&&"[object Promise]"!=Ri(Xn.resolve())||er&&Ri(new er)!=ne||tr&&Ri(new tr)!=se)&&(Ri=function(e){var t=Qr(e),n=t==X?e.constructor:i,r=n?ls(n):"";if(r)switch(r){case ir:return de;case sr:return q;case or:return"[object Promise]";case ur:return ne;case dr:return se}return t});var $i=ut?To:Cu;function qi(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ot)}function Zi(e){return e==e&&!wo(e)}function Qi(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in tt(n))}}function Xi(e,t,n){return t=Bn(t===i?e.length-1:t,0),function(){for(var a=arguments,i=-1,s=Bn(a.length-t,0),o=r(s);++i<s;)o[i]=a[t+i];i=-1;for(var u=r(t+1);++i<t;)u[i]=a[i];return u[t]=n(o),Bt(e,this,u)}}function es(e,t){return t.length<2?e:qr(e,Oa(t,0,-1))}function ts(e,t){if("__proto__"!=t)return e[t]}var ns=ss(wa),rs=Nn||function(e,t){return xt.setTimeout(e,t)},as=ss(Sa);function is(e,t,n){var r=t+"";return as(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Ne,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Kt(W,function(n){var r="_."+n[0];t&n[1]&&!Zt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(Ue);return t?t[1].split(Pe):[]}(r),n)))}function ss(e){var t=0,n=0;return function(){var r=Kn(),a=O-(r-n);if(n=r,a>0){if(++t>=E)return arguments[0]}else t=0;return e.apply(i,arguments)}}function os(e,t){var n=-1,r=e.length,a=r-1;for(t=t===i?r:t;++n<t;){var s=va(n,a),o=e[s];e[s]=e[n],e[n]=o}return e.length=t,e}var us=function(e){var t=so(e,function(e){return n.size===l&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(je,function(e,n,r,a){t.push(r?a.replace(Re,"$1"):n||e)}),t});function ds(e){if("string"==typeof e||Io(e))return e;var t=e+"";return"0"==t&&1/e==-x?"-0":t}function ls(e){if(null!=e){try{return dt.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function cs(e){if(e instanceof yr)return e.clone();var t=new pr(e.__wrapped__,e.__chain__);return t.__actions__=ni(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var _s=Da(function(e,t){return Lo(e)?Ur(e,zr(t,1,Lo,!0)):[]}),ms=Da(function(e,t){var n=Ys(t);return Lo(n)&&(n=i),Lo(e)?Ur(e,zr(t,1,Lo,!0),Ii(n,2)):[]}),hs=Da(function(e,t){var n=Ys(t);return Lo(n)&&(n=i),Lo(e)?Ur(e,zr(t,1,Lo,!0),i,n):[]});function fs(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:Ro(n);return a<0&&(a=Bn(r+a,0)),on(e,Ii(t,3),a)}function ps(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r-1;return n!==i&&(a=Ro(n),a=n<0?Bn(r+a,0):Jn(a,r-1)),on(e,Ii(t,3),a,!0)}function ys(e){return null!=e&&e.length?zr(e,1):[]}function Ms(e){return e&&e.length?e[0]:i}var gs=Da(function(e){var t=Xt(e,za);return t.length&&t[0]===e[0]?na(t):[]}),Ls=Da(function(e){var t=Ys(e),n=Xt(e,za);return t===Ys(n)?t=i:n.pop(),n.length&&n[0]===e[0]?na(n,Ii(t,2)):[]}),vs=Da(function(e){var t=Ys(e),n=Xt(e,za);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?na(n,i,t):[]});function Ys(e){var t=null==e?0:e.length;return t?e[t-1]:i}var Ds=Da(Ts);function Ts(e,t){return e&&e.length&&t&&t.length?ga(e,t):e}var ks=Ei(function(e,t){var n=null==e?0:e.length,r=xr(e,t);return La(e,Xt(t,function(e){return Bi(e,n)?+e:e}).sort(Xa)),r});function bs(e){return null==e?e:qn.call(e)}var ws=Da(function(e){return Na(zr(e,1,Lo,!0))}),Ss=Da(function(e){var t=Ys(e);return Lo(t)&&(t=i),Na(zr(e,1,Lo,!0),Ii(t,2))}),Es=Da(function(e){var t=Ys(e);return t="function"==typeof t?t:i,Na(zr(e,1,Lo,!0),i,t)});function Os(e){if(!e||!e.length)return[];var t=0;return e=qt(e,function(e){if(Lo(e))return t=Bn(e.length,t),!0}),pn(t,function(t){return Xt(e,_n(t))})}function js(e,t){if(!e||!e.length)return[];var n=Os(e);return null==t?n:Xt(n,function(e){return Bt(t,i,e)})}var Hs=Da(function(e,t){return Lo(e)?Ur(e,t):[]}),xs=Da(function(e){return Va(qt(e,Lo))}),As=Da(function(e){var t=Ys(e);return Lo(t)&&(t=i),Va(qt(e,Lo),Ii(t,2))}),Is=Da(function(e){var t=Ys(e);return t="function"==typeof t?t:i,Va(qt(e,Lo),i,t)}),Fs=Da(Os);var Ns=Da(function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,js(e,n)});function Us(e){var t=mr(e);return t.__chain__=!0,t}function Ps(e,t){return t(e)}var Ws=Ei(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,a=function(t){return xr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof yr&&Bi(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Ps,args:[a],thisArg:i}),new pr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(i),e})):this.thru(a)});var Rs=ai(function(e,t,n){lt.call(e,n)?++e[n]:Hr(e,n,1)});var Vs=ci(fs),Cs=ci(ps);function zs(e,t){return(yo(e)?Kt:Pr)(e,Ii(t,3))}function Bs(e,t){return(yo(e)?Gt:Wr)(e,Ii(t,3))}var Js=ai(function(e,t,n){lt.call(e,n)?e[n].push(t):Hr(e,n,[t])});var Ks=Da(function(e,t,n){var a=-1,i="function"==typeof t,s=go(e)?r(e.length):[];return Pr(e,function(e){s[++a]=i?Bt(t,e,n):ra(e,t,n)}),s}),Gs=ai(function(e,t,n){Hr(e,n,t)});function $s(e,t){return(yo(e)?Xt:_a)(e,Ii(t,3))}var qs=ai(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Zs=Da(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Ji(e,t[0],t[1])?t=[]:n>2&&Ji(t[0],t[1],t[2])&&(t=[t[0]]),ya(e,zr(t,1),[])}),Qs=Fn||function(){return xt.Date.now()};function Xs(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,Ti(e,T,i,i,i,i,t)}function eo(e,t){var n;if("function"!=typeof t)throw new at(u);return e=Ro(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var to=Da(function(e,t,n){var r=y;if(n.length){var a=Sn(n,Ai(to));r|=Y}return Ti(e,r,t,n,a)}),no=Da(function(e,t,n){var r=y|M;if(n.length){var a=Sn(n,Ai(no));r|=Y}return Ti(t,r,e,n,a)});function ro(e,t,n){var r,a,s,o,d,l,c=0,_=!1,m=!1,h=!0;if("function"!=typeof e)throw new at(u);function f(t){var n=r,s=a;return r=a=i,c=t,o=e.apply(s,n)}function p(e){var n=e-l;return l===i||n>=t||n<0||m&&e-c>=s}function y(){var e=Qs();if(p(e))return M(e);d=rs(y,function(e){var n=t-(e-l);return m?Jn(n,s-(e-c)):n}(e))}function M(e){return d=i,h&&r?f(e):(r=a=i,o)}function g(){var e=Qs(),n=p(e);if(r=arguments,a=this,l=e,n){if(d===i)return function(e){return c=e,d=rs(y,t),_?f(e):o}(l);if(m)return d=rs(y,t),f(l)}return d===i&&(d=rs(y,t)),o}return t=Co(t)||0,wo(n)&&(_=!!n.leading,s=(m="maxWait"in n)?Bn(Co(n.maxWait)||0,t):s,h="trailing"in n?!!n.trailing:h),g.cancel=function(){d!==i&&$a(d),c=0,r=l=a=d=i},g.flush=function(){return d===i?o:M(Qs())},g}var ao=Da(function(e,t){return Nr(e,1,t)}),io=Da(function(e,t,n){return Nr(e,Co(t)||0,n)});function so(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new at(u);var n=function(){var r=arguments,a=t?t.apply(this,r):r[0],i=n.cache;if(i.has(a))return i.get(a);var s=e.apply(this,r);return n.cache=i.set(a,s)||i,s};return n.cache=new(so.Cache||Lr),n}function oo(e){if("function"!=typeof e)throw new at(u);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}so.Cache=Lr;var uo=Ka(function(e,t){var n=(t=1==t.length&&yo(t[0])?Xt(t[0],yn(Ii())):Xt(zr(t,1),yn(Ii()))).length;return Da(function(r){for(var a=-1,i=Jn(r.length,n);++a<i;)r[a]=t[a].call(this,r[a]);return Bt(e,this,r)})}),lo=Da(function(e,t){var n=Sn(t,Ai(lo));return Ti(e,Y,i,t,n)}),co=Da(function(e,t){var n=Sn(t,Ai(co));return Ti(e,D,i,t,n)}),_o=Ei(function(e,t){return Ti(e,k,i,i,i,t)});function mo(e,t){return e===t||e!=e&&t!=t}var ho=gi(Xr),fo=gi(function(e,t){return e>=t}),po=aa(function(){return arguments}())?aa:function(e){return So(e)&&lt.call(e,"callee")&&!At.call(e,"callee")},yo=r.isArray,Mo=Pt?yn(Pt):function(e){return So(e)&&Qr(e)==ue};function go(e){return null!=e&&bo(e.length)&&!To(e)}function Lo(e){return So(e)&&go(e)}var vo=Rn||Cu,Yo=Wt?yn(Wt):function(e){return So(e)&&Qr(e)==B};function Do(e){if(!So(e))return!1;var t=Qr(e);return t==K||t==J||"string"==typeof e.message&&"string"==typeof e.name&&!jo(e)}function To(e){if(!wo(e))return!1;var t=Qr(e);return t==G||t==$||t==C||t==ee}function ko(e){return"number"==typeof e&&e==Ro(e)}function bo(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=A}function wo(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function So(e){return null!=e&&"object"==typeof e}var Eo=Rt?yn(Rt):function(e){return So(e)&&Ri(e)==q};function Oo(e){return"number"==typeof e||So(e)&&Qr(e)==Z}function jo(e){if(!So(e)||Qr(e)!=X)return!1;var t=jt(e);if(null===t)return!0;var n=lt.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&dt.call(n)==ht}var Ho=Vt?yn(Vt):function(e){return So(e)&&Qr(e)==te};var xo=Ct?yn(Ct):function(e){return So(e)&&Ri(e)==ne};function Ao(e){return"string"==typeof e||!yo(e)&&So(e)&&Qr(e)==re}function Io(e){return"symbol"==typeof e||So(e)&&Qr(e)==ae}var Fo=zt?yn(zt):function(e){return So(e)&&bo(e.length)&&!!bt[Qr(e)]};var No=gi(ca),Uo=gi(function(e,t){return e<=t});function Po(e){if(!e)return[];if(go(e))return Ao(e)?Hn(e):ni(e);if(Ut&&e[Ut])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ut]());var t=Ri(e);return(t==q?bn:t==ne?En:mu)(e)}function Wo(e){return e?(e=Co(e))===x||e===-x?(e<0?-1:1)*I:e==e?e:0:0===e?e:0}function Ro(e){var t=Wo(e),n=t%1;return t==t?n?t-n:t:0}function Vo(e){return e?Ar(Ro(e),0,N):0}function Co(e){if("number"==typeof e)return e;if(Io(e))return F;if(wo(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=wo(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Ae,"");var n=Be.test(e);return n||Ke.test(e)?Ot(e.slice(2),n?2:8):ze.test(e)?F:+e}function zo(e){return ri(e,iu(e))}function Bo(e){return null==e?"":Fa(e)}var Jo=ii(function(e,t){if(qi(t)||go(t))ri(t,au(t),e);else for(var n in t)lt.call(t,n)&&Sr(e,n,t[n])}),Ko=ii(function(e,t){ri(t,iu(t),e)}),Go=ii(function(e,t,n,r){ri(t,iu(t),e,r)}),$o=ii(function(e,t,n,r){ri(t,au(t),e,r)}),qo=Ei(xr);var Zo=Da(function(e,t){e=tt(e);var n=-1,r=t.length,a=r>2?t[2]:i;for(a&&Ji(t[0],t[1],a)&&(r=1);++n<r;)for(var s=t[n],o=iu(s),u=-1,d=o.length;++u<d;){var l=o[u],c=e[l];(c===i||mo(c,ot[l])&&!lt.call(e,l))&&(e[l]=s[l])}return e}),Qo=Da(function(e){return e.push(i,bi),Bt(ou,i,e)});function Xo(e,t,n){var r=null==e?i:qr(e,t);return r===i?n:r}function eu(e,t){return null!=e&&Vi(e,t,ta)}var tu=hi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=mt.call(t)),e[t]=n},wu(Ou)),nu=hi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=mt.call(t)),lt.call(e,t)?e[t].push(n):e[t]=[n]},Ii),ru=Da(ra);function au(e){return go(e)?Dr(e):da(e)}function iu(e){return go(e)?Dr(e,!0):la(e)}var su=ii(function(e,t,n){fa(e,t,n)}),ou=ii(function(e,t,n,r){fa(e,t,n,r)}),uu=Ei(function(e,t){var n={};if(null==e)return n;var r=!1;t=Xt(t,function(t){return t=Ja(t,e),r||(r=t.length>1),t}),ri(e,ji(e),n),r&&(n=Ir(n,_|m|h,wi));for(var a=t.length;a--;)Ua(n,t[a]);return n});var du=Ei(function(e,t){return null==e?{}:function(e,t){return Ma(e,t,function(t,n){return eu(e,n)})}(e,t)});function lu(e,t){if(null==e)return{};var n=Xt(ji(e),function(e){return[e]});return t=Ii(t),Ma(e,n,function(e,n){return t(e,n[0])})}var cu=Di(au),_u=Di(iu);function mu(e){return null==e?[]:Mn(e,au(e))}var hu=di(function(e,t,n){return t=t.toLowerCase(),e+(n?fu(t):t)});function fu(e){return Du(Bo(e).toLowerCase())}function pu(e){return(e=Bo(e))&&e.replace($e,Yn).replace(gt,"")}var yu=di(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),Mu=di(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),gu=ui("toLowerCase");var Lu=di(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var vu=di(function(e,t,n){return e+(n?" ":"")+Du(t)});var Yu=di(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Du=ui("toUpperCase");function Tu(e,t,n){return e=Bo(e),(t=n?i:t)===i?function(e){return Dt.test(e)}(e)?function(e){return e.match(vt)||[]}(e):function(e){return e.match(We)||[]}(e):e.match(t)||[]}var ku=Da(function(e,t){try{return Bt(e,i,t)}catch(e){return Do(e)?e:new Qe(e)}}),bu=Ei(function(e,t){return Kt(t,function(t){t=ds(t),Hr(e,t,to(e[t],e))}),e});function wu(e){return function(){return e}}var Su=_i(),Eu=_i(!0);function Ou(e){return e}function ju(e){return ua("function"==typeof e?e:Ir(e,_))}var Hu=Da(function(e,t){return function(n){return ra(n,e,t)}}),xu=Da(function(e,t){return function(n){return ra(e,n,t)}});function Au(e,t,n){var r=au(t),a=$r(t,r);null!=n||wo(t)&&(a.length||!r.length)||(n=t,t=e,e=this,a=$r(t,au(t)));var i=!(wo(n)&&"chain"in n&&!n.chain),s=To(e);return Kt(a,function(n){var r=t[n];e[n]=r,s&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__),a=n.__actions__=ni(this.__actions__);return a.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})}),e}function Iu(){}var Fu=pi(Xt),Nu=pi($t),Uu=pi(rn);function Pu(e){return Ki(e)?_n(ds(e)):function(e){return function(t){return qr(t,e)}}(e)}var Wu=Mi(),Ru=Mi(!0);function Vu(){return[]}function Cu(){return!1}var zu=fi(function(e,t){return e+t},0),Bu=vi("ceil"),Ju=fi(function(e,t){return e/t},1),Ku=vi("floor");var Gu,$u=fi(function(e,t){return e*t},1),qu=vi("round"),Zu=fi(function(e,t){return e-t},0);return mr.after=function(e,t){if("function"!=typeof t)throw new at(u);return e=Ro(e),function(){if(--e<1)return t.apply(this,arguments)}},mr.ary=Xs,mr.assign=Jo,mr.assignIn=Ko,mr.assignInWith=Go,mr.assignWith=$o,mr.at=qo,mr.before=eo,mr.bind=to,mr.bindAll=bu,mr.bindKey=no,mr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return yo(e)?e:[e]},mr.chain=Us,mr.chunk=function(e,t,n){t=(n?Ji(e,t,n):t===i)?1:Bn(Ro(t),0);var a=null==e?0:e.length;if(!a||t<1)return[];for(var s=0,o=0,u=r(Un(a/t));s<a;)u[o++]=Oa(e,s,s+=t);return u},mr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,a=[];++t<n;){var i=e[t];i&&(a[r++]=i)}return a},mr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],a=e;a--;)t[a-1]=arguments[a];return en(yo(n)?ni(n):[n],zr(t,1))},mr.cond=function(e){var t=null==e?0:e.length,n=Ii();return e=t?Xt(e,function(e){if("function"!=typeof e[1])throw new at(u);return[n(e[0]),e[1]]}):[],Da(function(n){for(var r=-1;++r<t;){var a=e[r];if(Bt(a[0],this,n))return Bt(a[1],this,n)}})},mr.conforms=function(e){return function(e){var t=au(e);return function(n){return Fr(n,e,t)}}(Ir(e,_))},mr.constant=wu,mr.countBy=Rs,mr.create=function(e,t){var n=hr(e);return null==t?n:jr(n,t)},mr.curry=function e(t,n,r){var a=Ti(t,L,i,i,i,i,i,n=r?i:n);return a.placeholder=e.placeholder,a},mr.curryRight=function e(t,n,r){var a=Ti(t,v,i,i,i,i,i,n=r?i:n);return a.placeholder=e.placeholder,a},mr.debounce=ro,mr.defaults=Zo,mr.defaultsDeep=Qo,mr.defer=ao,mr.delay=io,mr.difference=_s,mr.differenceBy=ms,mr.differenceWith=hs,mr.drop=function(e,t,n){var r=null==e?0:e.length;return r?Oa(e,(t=n||t===i?1:Ro(t))<0?0:t,r):[]},mr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Oa(e,0,(t=r-(t=n||t===i?1:Ro(t)))<0?0:t):[]},mr.dropRightWhile=function(e,t){return e&&e.length?Wa(e,Ii(t,3),!0,!0):[]},mr.dropWhile=function(e,t){return e&&e.length?Wa(e,Ii(t,3),!0):[]},mr.fill=function(e,t,n,r){var a=null==e?0:e.length;return a?(n&&"number"!=typeof n&&Ji(e,t,n)&&(n=0,r=a),function(e,t,n,r){var a=e.length;for((n=Ro(n))<0&&(n=-n>a?0:a+n),(r=r===i||r>a?a:Ro(r))<0&&(r+=a),r=n>r?0:Vo(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},mr.filter=function(e,t){return(yo(e)?qt:Cr)(e,Ii(t,3))},mr.flatMap=function(e,t){return zr($s(e,t),1)},mr.flatMapDeep=function(e,t){return zr($s(e,t),x)},mr.flatMapDepth=function(e,t,n){return n=n===i?1:Ro(n),zr($s(e,t),n)},mr.flatten=ys,mr.flattenDeep=function(e){return null!=e&&e.length?zr(e,x):[]},mr.flattenDepth=function(e,t){return null!=e&&e.length?zr(e,t=t===i?1:Ro(t)):[]},mr.flip=function(e){return Ti(e,b)},mr.flow=Su,mr.flowRight=Eu,mr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var a=e[t];r[a[0]]=a[1]}return r},mr.functions=function(e){return null==e?[]:$r(e,au(e))},mr.functionsIn=function(e){return null==e?[]:$r(e,iu(e))},mr.groupBy=Js,mr.initial=function(e){return null!=e&&e.length?Oa(e,0,-1):[]},mr.intersection=gs,mr.intersectionBy=Ls,mr.intersectionWith=vs,mr.invert=tu,mr.invertBy=nu,mr.invokeMap=Ks,mr.iteratee=ju,mr.keyBy=Gs,mr.keys=au,mr.keysIn=iu,mr.map=$s,mr.mapKeys=function(e,t){var n={};return t=Ii(t,3),Kr(e,function(e,r,a){Hr(n,t(e,r,a),e)}),n},mr.mapValues=function(e,t){var n={};return t=Ii(t,3),Kr(e,function(e,r,a){Hr(n,r,t(e,r,a))}),n},mr.matches=function(e){return ma(Ir(e,_))},mr.matchesProperty=function(e,t){return ha(e,Ir(t,_))},mr.memoize=so,mr.merge=su,mr.mergeWith=ou,mr.method=Hu,mr.methodOf=xu,mr.mixin=Au,mr.negate=oo,mr.nthArg=function(e){return e=Ro(e),Da(function(t){return pa(t,e)})},mr.omit=uu,mr.omitBy=function(e,t){return lu(e,oo(Ii(t)))},mr.once=function(e){return eo(2,e)},mr.orderBy=function(e,t,n,r){return null==e?[]:(yo(t)||(t=null==t?[]:[t]),yo(n=r?i:n)||(n=null==n?[]:[n]),ya(e,t,n))},mr.over=Fu,mr.overArgs=uo,mr.overEvery=Nu,mr.overSome=Uu,mr.partial=lo,mr.partialRight=co,mr.partition=qs,mr.pick=du,mr.pickBy=lu,mr.property=Pu,mr.propertyOf=function(e){return function(t){return null==e?i:qr(e,t)}},mr.pull=Ds,mr.pullAll=Ts,mr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?ga(e,t,Ii(n,2)):e},mr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?ga(e,t,i,n):e},mr.pullAt=ks,mr.range=Wu,mr.rangeRight=Ru,mr.rearg=_o,mr.reject=function(e,t){return(yo(e)?qt:Cr)(e,oo(Ii(t,3)))},mr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,a=[],i=e.length;for(t=Ii(t,3);++r<i;){var s=e[r];t(s,r,e)&&(n.push(s),a.push(r))}return La(e,a),n},mr.rest=function(e,t){if("function"!=typeof e)throw new at(u);return Da(e,t=t===i?t:Ro(t))},mr.reverse=bs,mr.sampleSize=function(e,t,n){return t=(n?Ji(e,t,n):t===i)?1:Ro(t),(yo(e)?kr:ka)(e,t)},mr.set=function(e,t,n){return null==e?e:ba(e,t,n)},mr.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:ba(e,t,n,r)},mr.shuffle=function(e){return(yo(e)?br:Ea)(e)},mr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Ji(e,t,n)?(t=0,n=r):(t=null==t?0:Ro(t),n=n===i?r:Ro(n)),Oa(e,t,n)):[]},mr.sortBy=Zs,mr.sortedUniq=function(e){return e&&e.length?Aa(e):[]},mr.sortedUniqBy=function(e,t){return e&&e.length?Aa(e,Ii(t,2)):[]},mr.split=function(e,t,n){return n&&"number"!=typeof n&&Ji(e,t,n)&&(t=n=i),(n=n===i?N:n>>>0)?(e=Bo(e))&&("string"==typeof t||null!=t&&!Ho(t))&&!(t=Fa(t))&&kn(e)?Ga(Hn(e),0,n):e.split(t,n):[]},mr.spread=function(e,t){if("function"!=typeof e)throw new at(u);return t=null==t?0:Bn(Ro(t),0),Da(function(n){var r=n[t],a=Ga(n,0,t);return r&&en(a,r),Bt(e,this,a)})},mr.tail=function(e){var t=null==e?0:e.length;return t?Oa(e,1,t):[]},mr.take=function(e,t,n){return e&&e.length?Oa(e,0,(t=n||t===i?1:Ro(t))<0?0:t):[]},mr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Oa(e,(t=r-(t=n||t===i?1:Ro(t)))<0?0:t,r):[]},mr.takeRightWhile=function(e,t){return e&&e.length?Wa(e,Ii(t,3),!1,!0):[]},mr.takeWhile=function(e,t){return e&&e.length?Wa(e,Ii(t,3)):[]},mr.tap=function(e,t){return t(e),e},mr.throttle=function(e,t,n){var r=!0,a=!0;if("function"!=typeof e)throw new at(u);return wo(n)&&(r="leading"in n?!!n.leading:r,a="trailing"in n?!!n.trailing:a),ro(e,t,{leading:r,maxWait:t,trailing:a})},mr.thru=Ps,mr.toArray=Po,mr.toPairs=cu,mr.toPairsIn=_u,mr.toPath=function(e){return yo(e)?Xt(e,ds):Io(e)?[e]:ni(us(Bo(e)))},mr.toPlainObject=zo,mr.transform=function(e,t,n){var r=yo(e),a=r||vo(e)||Fo(e);if(t=Ii(t,4),null==n){var i=e&&e.constructor;n=a?r?new i:[]:wo(e)&&To(i)?hr(jt(e)):{}}return(a?Kt:Kr)(e,function(e,r,a){return t(n,e,r,a)}),n},mr.unary=function(e){return Xs(e,1)},mr.union=ws,mr.unionBy=Ss,mr.unionWith=Es,mr.uniq=function(e){return e&&e.length?Na(e):[]},mr.uniqBy=function(e,t){return e&&e.length?Na(e,Ii(t,2)):[]},mr.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?Na(e,i,t):[]},mr.unset=function(e,t){return null==e||Ua(e,t)},mr.unzip=Os,mr.unzipWith=js,mr.update=function(e,t,n){return null==e?e:Pa(e,t,Ba(n))},mr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Pa(e,t,Ba(n),r)},mr.values=mu,mr.valuesIn=function(e){return null==e?[]:Mn(e,iu(e))},mr.without=Hs,mr.words=Tu,mr.wrap=function(e,t){return lo(Ba(t),e)},mr.xor=xs,mr.xorBy=As,mr.xorWith=Is,mr.zip=Fs,mr.zipObject=function(e,t){return Ca(e||[],t||[],Sr)},mr.zipObjectDeep=function(e,t){return Ca(e||[],t||[],ba)},mr.zipWith=Ns,mr.entries=cu,mr.entriesIn=_u,mr.extend=Ko,mr.extendWith=Go,Au(mr,mr),mr.add=zu,mr.attempt=ku,mr.camelCase=hu,mr.capitalize=fu,mr.ceil=Bu,mr.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=Co(n))==n?n:0),t!==i&&(t=(t=Co(t))==t?t:0),Ar(Co(e),t,n)},mr.clone=function(e){return Ir(e,h)},mr.cloneDeep=function(e){return Ir(e,_|h)},mr.cloneDeepWith=function(e,t){return Ir(e,_|h,t="function"==typeof t?t:i)},mr.cloneWith=function(e,t){return Ir(e,h,t="function"==typeof t?t:i)},mr.conformsTo=function(e,t){return null==t||Fr(e,t,au(t))},mr.deburr=pu,mr.defaultTo=function(e,t){return null==e||e!=e?t:e},mr.divide=Ju,mr.endsWith=function(e,t,n){e=Bo(e),t=Fa(t);var r=e.length,a=n=n===i?r:Ar(Ro(n),0,r);return(n-=t.length)>=0&&e.slice(n,a)==t},mr.eq=mo,mr.escape=function(e){return(e=Bo(e))&&ke.test(e)?e.replace(De,Dn):e},mr.escapeRegExp=function(e){return(e=Bo(e))&&xe.test(e)?e.replace(He,"\\$&"):e},mr.every=function(e,t,n){var r=yo(e)?$t:Rr;return n&&Ji(e,t,n)&&(t=i),r(e,Ii(t,3))},mr.find=Vs,mr.findIndex=fs,mr.findKey=function(e,t){return sn(e,Ii(t,3),Kr)},mr.findLast=Cs,mr.findLastIndex=ps,mr.findLastKey=function(e,t){return sn(e,Ii(t,3),Gr)},mr.floor=Ku,mr.forEach=zs,mr.forEachRight=Bs,mr.forIn=function(e,t){return null==e?e:Br(e,Ii(t,3),iu)},mr.forInRight=function(e,t){return null==e?e:Jr(e,Ii(t,3),iu)},mr.forOwn=function(e,t){return e&&Kr(e,Ii(t,3))},mr.forOwnRight=function(e,t){return e&&Gr(e,Ii(t,3))},mr.get=Xo,mr.gt=ho,mr.gte=fo,mr.has=function(e,t){return null!=e&&Vi(e,t,ea)},mr.hasIn=eu,mr.head=Ms,mr.identity=Ou,mr.includes=function(e,t,n,r){e=go(e)?e:mu(e),n=n&&!r?Ro(n):0;var a=e.length;return n<0&&(n=Bn(a+n,0)),Ao(e)?n<=a&&e.indexOf(t,n)>-1:!!a&&un(e,t,n)>-1},mr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:Ro(n);return a<0&&(a=Bn(r+a,0)),un(e,t,a)},mr.inRange=function(e,t,n){return t=Wo(t),n===i?(n=t,t=0):n=Wo(n),function(e,t,n){return e>=Jn(t,n)&&e<Bn(t,n)}(e=Co(e),t,n)},mr.invoke=ru,mr.isArguments=po,mr.isArray=yo,mr.isArrayBuffer=Mo,mr.isArrayLike=go,mr.isArrayLikeObject=Lo,mr.isBoolean=function(e){return!0===e||!1===e||So(e)&&Qr(e)==z},mr.isBuffer=vo,mr.isDate=Yo,mr.isElement=function(e){return So(e)&&1===e.nodeType&&!jo(e)},mr.isEmpty=function(e){if(null==e)return!0;if(go(e)&&(yo(e)||"string"==typeof e||"function"==typeof e.splice||vo(e)||Fo(e)||po(e)))return!e.length;var t=Ri(e);if(t==q||t==ne)return!e.size;if(qi(e))return!da(e).length;for(var n in e)if(lt.call(e,n))return!1;return!0},mr.isEqual=function(e,t){return ia(e,t)},mr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?ia(e,t,i,n):!!r},mr.isError=Do,mr.isFinite=function(e){return"number"==typeof e&&Vn(e)},mr.isFunction=To,mr.isInteger=ko,mr.isLength=bo,mr.isMap=Eo,mr.isMatch=function(e,t){return e===t||sa(e,t,Ni(t))},mr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,sa(e,t,Ni(t),n)},mr.isNaN=function(e){return Oo(e)&&e!=+e},mr.isNative=function(e){if($i(e))throw new Qe(o);return oa(e)},mr.isNil=function(e){return null==e},mr.isNull=function(e){return null===e},mr.isNumber=Oo,mr.isObject=wo,mr.isObjectLike=So,mr.isPlainObject=jo,mr.isRegExp=Ho,mr.isSafeInteger=function(e){return ko(e)&&e>=-A&&e<=A},mr.isSet=xo,mr.isString=Ao,mr.isSymbol=Io,mr.isTypedArray=Fo,mr.isUndefined=function(e){return e===i},mr.isWeakMap=function(e){return So(e)&&Ri(e)==se},mr.isWeakSet=function(e){return So(e)&&Qr(e)==oe},mr.join=function(e,t){return null==e?"":Cn.call(e,t)},mr.kebabCase=yu,mr.last=Ys,mr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r;return n!==i&&(a=(a=Ro(n))<0?Bn(r+a,0):Jn(a,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,a):on(e,ln,a,!0)},mr.lowerCase=Mu,mr.lowerFirst=gu,mr.lt=No,mr.lte=Uo,mr.max=function(e){return e&&e.length?Vr(e,Ou,Xr):i},mr.maxBy=function(e,t){return e&&e.length?Vr(e,Ii(t,2),Xr):i},mr.mean=function(e){return cn(e,Ou)},mr.meanBy=function(e,t){return cn(e,Ii(t,2))},mr.min=function(e){return e&&e.length?Vr(e,Ou,ca):i},mr.minBy=function(e,t){return e&&e.length?Vr(e,Ii(t,2),ca):i},mr.stubArray=Vu,mr.stubFalse=Cu,mr.stubObject=function(){return{}},mr.stubString=function(){return""},mr.stubTrue=function(){return!0},mr.multiply=$u,mr.nth=function(e,t){return e&&e.length?pa(e,Ro(t)):i},mr.noConflict=function(){return xt._===this&&(xt._=ft),this},mr.noop=Iu,mr.now=Qs,mr.pad=function(e,t,n){e=Bo(e);var r=(t=Ro(t))?jn(e):0;if(!t||r>=t)return e;var a=(t-r)/2;return yi(Pn(a),n)+e+yi(Un(a),n)},mr.padEnd=function(e,t,n){e=Bo(e);var r=(t=Ro(t))?jn(e):0;return t&&r<t?e+yi(t-r,n):e},mr.padStart=function(e,t,n){e=Bo(e);var r=(t=Ro(t))?jn(e):0;return t&&r<t?yi(t-r,n)+e:e},mr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Gn(Bo(e).replace(Ie,""),t||0)},mr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Ji(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=Wo(e),t===i?(t=e,e=0):t=Wo(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var a=$n();return Jn(e+a*(t-e+Et("1e-"+((a+"").length-1))),t)}return va(e,t)},mr.reduce=function(e,t,n){var r=yo(e)?tn:hn,a=arguments.length<3;return r(e,Ii(t,4),n,a,Pr)},mr.reduceRight=function(e,t,n){var r=yo(e)?nn:hn,a=arguments.length<3;return r(e,Ii(t,4),n,a,Wr)},mr.repeat=function(e,t,n){return t=(n?Ji(e,t,n):t===i)?1:Ro(t),Ya(Bo(e),t)},mr.replace=function(){var e=arguments,t=Bo(e[0]);return e.length<3?t:t.replace(e[1],e[2])},mr.result=function(e,t,n){var r=-1,a=(t=Ja(t,e)).length;for(a||(a=1,e=i);++r<a;){var s=null==e?i:e[ds(t[r])];s===i&&(r=a,s=n),e=To(s)?s.call(e):s}return e},mr.round=qu,mr.runInContext=e,mr.sample=function(e){return(yo(e)?Tr:Ta)(e)},mr.size=function(e){if(null==e)return 0;if(go(e))return Ao(e)?jn(e):e.length;var t=Ri(e);return t==q||t==ne?e.size:da(e).length},mr.snakeCase=Lu,mr.some=function(e,t,n){var r=yo(e)?rn:ja;return n&&Ji(e,t,n)&&(t=i),r(e,Ii(t,3))},mr.sortedIndex=function(e,t){return Ha(e,t)},mr.sortedIndexBy=function(e,t,n){return xa(e,t,Ii(n,2))},mr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Ha(e,t);if(r<n&&mo(e[r],t))return r}return-1},mr.sortedLastIndex=function(e,t){return Ha(e,t,!0)},mr.sortedLastIndexBy=function(e,t,n){return xa(e,t,Ii(n,2),!0)},mr.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=Ha(e,t,!0)-1;if(mo(e[n],t))return n}return-1},mr.startCase=vu,mr.startsWith=function(e,t,n){return e=Bo(e),n=null==n?0:Ar(Ro(n),0,e.length),t=Fa(t),e.slice(n,n+t.length)==t},mr.subtract=Zu,mr.sum=function(e){return e&&e.length?fn(e,Ou):0},mr.sumBy=function(e,t){return e&&e.length?fn(e,Ii(t,2)):0},mr.template=function(e,t,n){var r=mr.templateSettings;n&&Ji(e,t,n)&&(t=i),e=Bo(e),t=Go({},t,r,ki);var a,s,o=Go({},t.imports,r.imports,ki),u=au(o),d=Mn(o,u),l=0,c=t.interpolate||qe,_="__p += '",m=nt((t.escape||qe).source+"|"+c.source+"|"+(c===Se?Ve:qe).source+"|"+(t.evaluate||qe).source+"|$","g"),h="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++kt+"]")+"\n";e.replace(m,function(t,n,r,i,o,u){return r||(r=i),_+=e.slice(l,u).replace(Ze,Tn),n&&(a=!0,_+="' +\n__e("+n+") +\n'"),o&&(s=!0,_+="';\n"+o+";\n__p += '"),r&&(_+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+t.length,t}),_+="';\n";var f=t.variable;f||(_="with (obj) {\n"+_+"\n}\n"),_=(s?_.replace(ge,""):_).replace(Le,"$1").replace(ve,"$1;"),_="function("+(f||"obj")+") {\n"+(f?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+_+"return __p\n}";var p=ku(function(){return Xe(u,h+"return "+_).apply(i,d)});if(p.source=_,Do(p))throw p;return p},mr.times=function(e,t){if((e=Ro(e))<1||e>A)return[];var n=N,r=Jn(e,N);t=Ii(t),e-=N;for(var a=pn(r,t);++n<e;)t(n);return a},mr.toFinite=Wo,mr.toInteger=Ro,mr.toLength=Vo,mr.toLower=function(e){return Bo(e).toLowerCase()},mr.toNumber=Co,mr.toSafeInteger=function(e){return e?Ar(Ro(e),-A,A):0===e?e:0},mr.toString=Bo,mr.toUpper=function(e){return Bo(e).toUpperCase()},mr.trim=function(e,t,n){if((e=Bo(e))&&(n||t===i))return e.replace(Ae,"");if(!e||!(t=Fa(t)))return e;var r=Hn(e),a=Hn(t);return Ga(r,Ln(r,a),vn(r,a)+1).join("")},mr.trimEnd=function(e,t,n){if((e=Bo(e))&&(n||t===i))return e.replace(Fe,"");if(!e||!(t=Fa(t)))return e;var r=Hn(e);return Ga(r,0,vn(r,Hn(t))+1).join("")},mr.trimStart=function(e,t,n){if((e=Bo(e))&&(n||t===i))return e.replace(Ie,"");if(!e||!(t=Fa(t)))return e;var r=Hn(e);return Ga(r,Ln(r,Hn(t))).join("")},mr.truncate=function(e,t){var n=w,r=S;if(wo(t)){var a="separator"in t?t.separator:a;n="length"in t?Ro(t.length):n,r="omission"in t?Fa(t.omission):r}var s=(e=Bo(e)).length;if(kn(e)){var o=Hn(e);s=o.length}if(n>=s)return e;var u=n-jn(r);if(u<1)return r;var d=o?Ga(o,0,u).join(""):e.slice(0,u);if(a===i)return d+r;if(o&&(u+=d.length-u),Ho(a)){if(e.slice(u).search(a)){var l,c=d;for(a.global||(a=nt(a.source,Bo(Ce.exec(a))+"g")),a.lastIndex=0;l=a.exec(c);)var _=l.index;d=d.slice(0,_===i?u:_)}}else if(e.indexOf(Fa(a),u)!=u){var m=d.lastIndexOf(a);m>-1&&(d=d.slice(0,m))}return d+r},mr.unescape=function(e){return(e=Bo(e))&&Te.test(e)?e.replace(Ye,xn):e},mr.uniqueId=function(e){var t=++ct;return Bo(e)+t},mr.upperCase=Yu,mr.upperFirst=Du,mr.each=zs,mr.eachRight=Bs,mr.first=Ms,Au(mr,(Gu={},Kr(mr,function(e,t){lt.call(mr.prototype,t)||(Gu[t]=e)}),Gu),{chain:!1}),mr.VERSION="4.17.11",Kt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){mr[e].placeholder=mr}),Kt(["drop","take"],function(e,t){yr.prototype[e]=function(n){n=n===i?1:Bn(Ro(n),0);var r=this.__filtered__&&!t?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=Jn(n,r.__takeCount__):r.__views__.push({size:Jn(n,N),type:e+(r.__dir__<0?"Right":"")}),r},yr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Kt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==j||3==n;yr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Ii(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Kt(["head","last"],function(e,t){var n="take"+(t?"Right":"");yr.prototype[e]=function(){return this[n](1).value()[0]}}),Kt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");yr.prototype[e]=function(){return this.__filtered__?new yr(this):this[n](1)}}),yr.prototype.compact=function(){return this.filter(Ou)},yr.prototype.find=function(e){return this.filter(e).head()},yr.prototype.findLast=function(e){return this.reverse().find(e)},yr.prototype.invokeMap=Da(function(e,t){return"function"==typeof e?new yr(this):this.map(function(n){return ra(n,e,t)})}),yr.prototype.reject=function(e){return this.filter(oo(Ii(e)))},yr.prototype.slice=function(e,t){e=Ro(e);var n=this;return n.__filtered__&&(e>0||t<0)?new yr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=Ro(t))<0?n.dropRight(-t):n.take(t-e)),n)},yr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},yr.prototype.toArray=function(){return this.take(N)},Kr(yr.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),a=mr[r?"take"+("last"==t?"Right":""):t],s=r||/^find/.test(t);a&&(mr.prototype[t]=function(){var t=this.__wrapped__,o=r?[1]:arguments,u=t instanceof yr,d=o[0],l=u||yo(t),c=function(e){var t=a.apply(mr,en([e],o));return r&&_?t[0]:t};l&&n&&"function"==typeof d&&1!=d.length&&(u=l=!1);var _=this.__chain__,m=!!this.__actions__.length,h=s&&!_,f=u&&!m;if(!s&&l){t=f?t:new yr(this);var p=e.apply(t,o);return p.__actions__.push({func:Ps,args:[c],thisArg:i}),new pr(p,_)}return h&&f?e.apply(this,o):(p=this.thru(c),h?r?p.value()[0]:p.value():p)})}),Kt(["pop","push","shift","sort","splice","unshift"],function(e){var t=it[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);mr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var a=this.value();return t.apply(yo(a)?a:[],e)}return this[n](function(n){return t.apply(yo(n)?n:[],e)})}}),Kr(yr.prototype,function(e,t){var n=mr[t];if(n){var r=n.name+"";(ar[r]||(ar[r]=[])).push({name:t,func:n})}}),ar[mi(i,M).name]=[{name:"wrapper",func:i}],yr.prototype.clone=function(){var e=new yr(this.__wrapped__);return e.__actions__=ni(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=ni(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=ni(this.__views__),e},yr.prototype.reverse=function(){if(this.__filtered__){var e=new yr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},yr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=yo(e),r=t<0,a=n?e.length:0,i=function(e,t,n){for(var r=-1,a=n.length;++r<a;){var i=n[r],s=i.size;switch(i.type){case"drop":e+=s;break;case"dropRight":t-=s;break;case"take":t=Jn(t,e+s);break;case"takeRight":e=Bn(e,t-s)}}return{start:e,end:t}}(0,a,this.__views__),s=i.start,o=i.end,u=o-s,d=r?o:s-1,l=this.__iteratees__,c=l.length,_=0,m=Jn(u,this.__takeCount__);if(!n||!r&&a==u&&m==u)return Ra(e,this.__actions__);var h=[];e:for(;u--&&_<m;){for(var f=-1,p=e[d+=t];++f<c;){var y=l[f],M=y.iteratee,g=y.type,L=M(p);if(g==H)p=L;else if(!L){if(g==j)continue e;break e}}h[_++]=p}return h},mr.prototype.at=Ws,mr.prototype.chain=function(){return Us(this)},mr.prototype.commit=function(){return new pr(this.value(),this.__chain__)},mr.prototype.next=function(){this.__values__===i&&(this.__values__=Po(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},mr.prototype.plant=function(e){for(var t,n=this;n instanceof fr;){var r=cs(n);r.__index__=0,r.__values__=i,t?a.__wrapped__=r:t=r;var a=r;n=n.__wrapped__}return a.__wrapped__=e,t},mr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof yr){var t=e;return this.__actions__.length&&(t=new yr(this)),(t=t.reverse()).__actions__.push({func:Ps,args:[bs],thisArg:i}),new pr(t,this.__chain__)}return this.thru(bs)},mr.prototype.toJSON=mr.prototype.valueOf=mr.prototype.value=function(){return Ra(this.__wrapped__,this.__actions__)},mr.prototype.first=mr.prototype.head,Ut&&(mr.prototype[Ut]=function(){return this}),mr}();xt._=An,(a=function(){return An}.call(t,n,t,r))===i||(r.exports=a)}).call(this)}).call(this,n(130),n(2)(e))},function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function d(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function l(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function _(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function m(e,t,n,r){return Ot(e,t,n,r,!0).utc()}function h(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function f(e){if(null==e._isValid){var t=h(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function p(e){var t=m(NaN);return null!=e?_(h(t),e):h(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var y=a.momentProperties=[];function M(e,t){var n,r,a;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=h(t)),o(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)r=y[n],o(a=t[r])||(e[r]=a);return e}var g=!1;function L(e){M(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,a.updateOffset(this),g=!1)}function v(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function Y(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function D(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=Y(t)),n}function T(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&D(e[r])!==D(t[r]))&&s++;return s+i}function k(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function b(e,t){var n=!0;return _(function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){for(var r,i=[],s=0;s<arguments.length;s++){if(r="","object"==typeof arguments[s]){for(var o in r+="\n["+s+"] ",arguments[0])r+=o+": "+arguments[0][o]+", ";r=r.slice(0,-2)}else r=arguments[s];i.push(r)}k(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var w,S={};function E(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),S[e]||(k(t),S[e]=!0)}function O(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function j(e,t){var n,r=_({},e);for(n in t)c(t,n)&&(s(e[n])&&s(t[n])?(r[n]={},_(r[n],e[n]),_(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)c(e,n)&&!c(t,n)&&s(e[n])&&(r[n]=_({},r[n]));return r}function H(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var x={};function A(e,t){var n=e.toLowerCase();x[n]=x[n+"s"]=x[t]=e}function I(e){return"string"==typeof e?x[e]||x[e.toLowerCase()]:void 0}function F(e){var t,n,r={};for(n in e)c(e,n)&&(t=I(n))&&(r[t]=e[n]);return r}var N={};function U(e,t){N[e]=t}function P(e,t,n){var r=""+Math.abs(e),a=t-r.length,i=e>=0;return(i?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var W=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,R=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,V={},C={};function z(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(C[e]=a),t&&(C[t[0]]=function(){return P(a.apply(this,arguments),t[1],t[2])}),n&&(C[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function B(e,t){return e.isValid()?(t=J(t,e.localeData()),V[t]=V[t]||function(e){var t,n,r,a=e.match(W);for(t=0,n=a.length;t<n;t++)C[a[t]]?a[t]=C[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=O(a[r])?a[r].call(t,e):a[r];return i}}(t),V[t](e)):e.localeData().invalidDate()}function J(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(R.lastIndex=0;n>=0&&R.test(e);)e=e.replace(R,r),R.lastIndex=0,n-=1;return e}var K=/\d/,G=/\d\d/,$=/\d{3}/,q=/\d{4}/,Z=/[+-]?\d{6}/,Q=/\d\d?/,X=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ne=/\d{1,4}/,re=/[+-]?\d{1,6}/,ae=/\d+/,ie=/[+-]?\d+/,se=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,ue=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,de={};function le(e,t,n){de[e]=O(t)?t:function(e,r){return e&&n?n:t}}function ce(e,t){return c(de,e)?de[e](t._strict,t._locale):new RegExp(_e(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,a){return t||n||r||a})))}function _e(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var me={};function he(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=D(e)}),n=0;n<e.length;n++)me[e[n]]=r}function fe(e,t){he(e,function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)})}function pe(e,t,n){null!=t&&c(me,e)&&me[e](t,n._a,n,e)}var ye=0,Me=1,ge=2,Le=3,ve=4,Ye=5,De=6,Te=7,ke=8;function be(e){return we(e)?366:365}function we(e){return e%4==0&&e%100!=0||e%400==0}z("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),z(0,["YY",2],0,function(){return this.year()%100}),z(0,["YYYY",4],0,"year"),z(0,["YYYYY",5],0,"year"),z(0,["YYYYYY",6,!0],0,"year"),A("year","y"),U("year",1),le("Y",ie),le("YY",Q,G),le("YYYY",ne,q),le("YYYYY",re,Z),le("YYYYYY",re,Z),he(["YYYYY","YYYYYY"],ye),he("YYYY",function(e,t){t[ye]=2===e.length?a.parseTwoDigitYear(e):D(e)}),he("YY",function(e,t){t[ye]=a.parseTwoDigitYear(e)}),he("Y",function(e,t){t[ye]=parseInt(e,10)}),a.parseTwoDigitYear=function(e){return D(e)+(D(e)>68?1900:2e3)};var Se,Ee=Oe("FullYear",!0);function Oe(e,t){return function(n){return null!=n?(He(this,e,n),a.updateOffset(this,t),this):je(this,e)}}function je(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function He(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&we(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),xe(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function xe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?we(e)?29:28:31-r%7%2}Se=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},z("M",["MM",2],"Mo",function(){return this.month()+1}),z("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),z("MMMM",0,0,function(e){return this.localeData().months(this,e)}),A("month","M"),U("month",8),le("M",Q),le("MM",Q,G),le("MMM",function(e,t){return t.monthsShortRegex(e)}),le("MMMM",function(e,t){return t.monthsRegex(e)}),he(["M","MM"],function(e,t){t[Me]=D(e)-1}),he(["MMM","MMMM"],function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[Me]=a:h(n).invalidMonth=e});var Ae=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ie="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Fe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ne(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=D(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),xe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ue(e){return null!=e?(Ne(this,e),a.updateOffset(this,!0),this):je(this,"Month")}var Pe=ue,We=ue;function Re(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=m([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=_e(r[t]),a[t]=_e(a[t]);for(t=0;t<24;t++)i[t]=_e(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function Ve(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Ce(e,t,n){var r=7+t-n,a=(7+Ve(e,0,r).getUTCDay()-t)%7;return-a+r-1}function ze(e,t,n,r,a){var i,s,o=(7+n-r)%7,u=Ce(e,r,a),d=1+7*(t-1)+o+u;return d<=0?s=be(i=e-1)+d:d>be(e)?(i=e+1,s=d-be(e)):(i=e,s=d),{year:i,dayOfYear:s}}function Be(e,t,n){var r,a,i=Ce(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?(a=e.year()-1,r=s+Je(a,t,n)):s>Je(e.year(),t,n)?(r=s-Je(e.year(),t,n),a=e.year()+1):(a=e.year(),r=s),{week:r,year:a}}function Je(e,t,n){var r=Ce(e,t,n),a=Ce(e+1,t,n);return(be(e)-r+a)/7}function Ke(e,t){return e.slice(t,7).concat(e.slice(0,t))}z("w",["ww",2],"wo","week"),z("W",["WW",2],"Wo","isoWeek"),A("week","w"),A("isoWeek","W"),U("week",5),U("isoWeek",5),le("w",Q),le("ww",Q,G),le("W",Q),le("WW",Q,G),fe(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=D(e)}),z("d",0,"do","day"),z("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),z("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),z("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),z("e",0,0,"weekday"),z("E",0,0,"isoWeekday"),A("day","d"),A("weekday","e"),A("isoWeekday","E"),U("day",11),U("weekday",11),U("isoWeekday",11),le("d",Q),le("e",Q),le("E",Q),le("dd",function(e,t){return t.weekdaysMinRegex(e)}),le("ddd",function(e,t){return t.weekdaysShortRegex(e)}),le("dddd",function(e,t){return t.weekdaysRegex(e)}),fe(["dd","ddd","dddd"],function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:h(n).invalidWeekday=e}),fe(["d","e","E"],function(e,t,n,r){t[r]=D(e)});var Ge="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),$e="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),qe="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ze=ue,Qe=ue,Xe=ue;function et(){function e(e,t){return t.length-e.length}var t,n,r,a,i,s=[],o=[],u=[],d=[];for(t=0;t<7;t++)n=m([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),s.push(r),o.push(a),u.push(i),d.push(r),d.push(a),d.push(i);for(s.sort(e),o.sort(e),u.sort(e),d.sort(e),t=0;t<7;t++)o[t]=_e(o[t]),u[t]=_e(u[t]),d[t]=_e(d[t]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function tt(){return this.hours()%12||12}function nt(e,t){z(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function rt(e,t){return t._meridiemParse}z("H",["HH",2],0,"hour"),z("h",["hh",2],0,tt),z("k",["kk",2],0,function(){return this.hours()||24}),z("hmm",0,0,function(){return""+tt.apply(this)+P(this.minutes(),2)}),z("hmmss",0,0,function(){return""+tt.apply(this)+P(this.minutes(),2)+P(this.seconds(),2)}),z("Hmm",0,0,function(){return""+this.hours()+P(this.minutes(),2)}),z("Hmmss",0,0,function(){return""+this.hours()+P(this.minutes(),2)+P(this.seconds(),2)}),nt("a",!0),nt("A",!1),A("hour","h"),U("hour",13),le("a",rt),le("A",rt),le("H",Q),le("h",Q),le("k",Q),le("HH",Q,G),le("hh",Q,G),le("kk",Q,G),le("hmm",X),le("hmmss",ee),le("Hmm",X),le("Hmmss",ee),he(["H","HH"],Le),he(["k","kk"],function(e,t,n){var r=D(e);t[Le]=24===r?0:r}),he(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),he(["h","hh"],function(e,t,n){t[Le]=D(e),h(n).bigHour=!0}),he("hmm",function(e,t,n){var r=e.length-2;t[Le]=D(e.substr(0,r)),t[ve]=D(e.substr(r)),h(n).bigHour=!0}),he("hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[Le]=D(e.substr(0,r)),t[ve]=D(e.substr(r,2)),t[Ye]=D(e.substr(a)),h(n).bigHour=!0}),he("Hmm",function(e,t,n){var r=e.length-2;t[Le]=D(e.substr(0,r)),t[ve]=D(e.substr(r))}),he("Hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[Le]=D(e.substr(0,r)),t[ve]=D(e.substr(r,2)),t[Ye]=D(e.substr(a))});var at,it=Oe("Hours",!0),st={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ie,monthsShort:Fe,week:{dow:0,doy:6},weekdays:Ge,weekdaysMin:qe,weekdaysShort:$e,meridiemParse:/[ap]\.?m?\.?/i},ot={},ut={};function dt(e){return e?e.toLowerCase().replace("_","-"):e}function lt(t){var r=null;if(!ot[t]&&void 0!==e&&e&&e.exports)try{r=at._abbr,n(131)("./"+t),ct(r)}catch(e){}return ot[t]}function ct(e,t){var n;return e&&((n=o(t)?mt(e):_t(e,t))?at=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),at._abbr}function _t(e,t){if(null!==t){var n,r=st;if(t.abbr=e,null!=ot[e])E("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])r=ot[t.parentLocale]._config;else{if(null==(n=lt(t.parentLocale)))return ut[t.parentLocale]||(ut[t.parentLocale]=[]),ut[t.parentLocale].push({name:e,config:t}),null;r=n._config}return ot[e]=new H(j(r,t)),ut[e]&&ut[e].forEach(function(e){_t(e.name,e.config)}),ct(e),ot[e]}return delete ot[e],null}function mt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return at;if(!i(e)){if(t=lt(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(a=dt(e[i]).split("-"),t=a.length,n=(n=dt(e[i+1]))?n.split("-"):null;t>0;){if(r=lt(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&T(a,n,!0)>=t-1)break;t--}i++}return at}(e)}function ht(e){var t,n=e._a;return n&&-2===h(e).overflow&&(t=n[Me]<0||n[Me]>11?Me:n[ge]<1||n[ge]>xe(n[ye],n[Me])?ge:n[Le]<0||n[Le]>24||24===n[Le]&&(0!==n[ve]||0!==n[Ye]||0!==n[De])?Le:n[ve]<0||n[ve]>59?ve:n[Ye]<0||n[Ye]>59?Ye:n[De]<0||n[De]>999?De:-1,h(e)._overflowDayOfYear&&(t<ye||t>ge)&&(t=ge),h(e)._overflowWeeks&&-1===t&&(t=Te),h(e)._overflowWeekday&&-1===t&&(t=ke),h(e).overflow=t),e}function ft(e,t,n){return null!=e?e:null!=t?t:n}function pt(e){var t,n,r,i,s,o=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ge]&&null==e._a[Me]&&function(e){var t,n,r,a,i,s,o,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,s=4,n=ft(t.GG,e._a[ye],Be(jt(),1,4).year),r=ft(t.W,1),((a=ft(t.E,1))<1||a>7)&&(u=!0);else{i=e._locale._week.dow,s=e._locale._week.doy;var d=Be(jt(),i,s);n=ft(t.gg,e._a[ye],d.year),r=ft(t.w,d.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(u=!0)):a=i}r<1||r>Je(n,i,s)?h(e)._overflowWeeks=!0:null!=u?h(e)._overflowWeekday=!0:(o=ze(n,r,a,i,s),e._a[ye]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=ft(e._a[ye],r[ye]),(e._dayOfYear>be(s)||0===e._dayOfYear)&&(h(e)._overflowDayOfYear=!0),n=Ve(s,0,e._dayOfYear),e._a[Me]=n.getUTCMonth(),e._a[ge]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Le]&&0===e._a[ve]&&0===e._a[Ye]&&0===e._a[De]&&(e._nextDay=!0,e._a[Le]=0),e._d=(e._useUTC?Ve:function(e,t,n,r,a,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,r,a,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,r,a,i,s),o}).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Le]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(h(e).weekdayMismatch=!0)}}var yt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Mt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gt=/Z|[+-]\d\d(?::?\d\d)?/,Lt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],vt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Yt=/^\/?Date\((\-?\d+)/i;function Dt(e){var t,n,r,a,i,s,o=e._i,u=yt.exec(o)||Mt.exec(o);if(u){for(h(e).iso=!0,t=0,n=Lt.length;t<n;t++)if(Lt[t][1].exec(u[1])){a=Lt[t][0],r=!1!==Lt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=vt.length;t<n;t++)if(vt[t][1].exec(u[3])){i=(u[2]||" ")+vt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!gt.exec(u[4]))return void(e._isValid=!1);s="Z"}e._f=a+(i||"")+(s||""),St(e)}else e._isValid=!1}var Tt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var bt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function wt(e){var t,n,r,a,i,s,o,u=Tt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(u){var d=(t=u[4],n=u[3],r=u[2],a=u[5],i=u[6],s=u[7],o=[kt(t),Fe.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(i,10)],s&&o.push(parseInt(s,10)),o);if(!function(e,t,n){if(e){var r=$e.indexOf(e),a=new Date(t[0],t[1],t[2]).getDay();if(r!==a)return h(n).weekdayMismatch=!0,n._isValid=!1,!1}return!0}(u[1],d,e))return;e._a=d,e._tzm=function(e,t,n){if(e)return bt[e];if(t)return 0;var r=parseInt(n,10),a=r%100,i=(r-a)/100;return 60*i+a}(u[8],u[9],u[10]),e._d=Ve.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),h(e).rfc2822=!0}else e._isValid=!1}function St(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],h(e).empty=!0;var t,n,r,i,s,o=""+e._i,u=o.length,d=0;for(r=J(e._f,e._locale).match(W)||[],t=0;t<r.length;t++)i=r[t],(n=(o.match(ce(i,e))||[])[0])&&((s=o.substr(0,o.indexOf(n))).length>0&&h(e).unusedInput.push(s),o=o.slice(o.indexOf(n)+n.length),d+=n.length),C[i]?(n?h(e).empty=!1:h(e).unusedTokens.push(i),pe(i,n,e)):e._strict&&!n&&h(e).unusedTokens.push(i);h(e).charsLeftOver=u-d,o.length>0&&h(e).unusedInput.push(o),e._a[Le]<=12&&!0===h(e).bigHour&&e._a[Le]>0&&(h(e).bigHour=void 0),h(e).parsedDateParts=e._a.slice(0),h(e).meridiem=e._meridiem,e._a[Le]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[Le],e._meridiem),pt(e),ht(e)}else wt(e);else Dt(e)}function Et(e){var t=e._i,n=e._f;return e._locale=e._locale||mt(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),v(t)?new L(ht(t)):(d(t)?e._d=t:i(n)?function(e){var t,n,r,a,i;if(0===e._f.length)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,t=M({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],St(t),f(t)&&(i+=h(t).charsLeftOver,i+=10*h(t).unusedTokens.length,h(t).score=i,(null==r||i<r)&&(r=i,n=t));_(e,n||t)}(e):n?St(e):function(e){var t=e._i;o(t)?e._d=new Date(a.now()):d(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=Yt.exec(e._i);null===t?(Dt(e),!1===e._isValid&&(delete e._isValid,wt(e),!1===e._isValid&&(delete e._isValid,a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=l(t.slice(0),function(e){return parseInt(e,10)}),pt(e)):s(t)?function(e){if(!e._d){var t=F(e._i);e._a=l([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),pt(e)}}(e):u(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),f(e)||(e._d=null),e))}function Ot(e,t,n,r,a){var o,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(s(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=a,u._l=n,u._i=e,u._f=t,u._strict=r,(o=new L(ht(Et(u))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function jt(e,t,n,r){return Ot(e,t,n,r,!1)}a.createFromInputFallback=b("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),a.ISO_8601=function(){},a.RFC_2822=function(){};var Ht=b("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=jt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),xt=b("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=jt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()});function At(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return jt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var It=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ft(e){var t=F(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,o=t.hour||0,u=t.minute||0,d=t.second||0,l=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Se.call(It,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<It.length;++r)if(e[It[r]]){if(n)return!1;parseFloat(e[It[r]])!==D(e[It[r]])&&(n=!0)}return!0}(t),this._milliseconds=+l+1e3*d+6e4*u+1e3*o*60*60,this._days=+s+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=mt(),this._bubble()}function Nt(e){return e instanceof Ft}function Ut(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Pt(e,t){z(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+P(~~(e/60),2)+t+P(~~e%60,2)})}Pt("Z",":"),Pt("ZZ",""),le("Z",oe),le("ZZ",oe),he(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Rt(oe,e)});var Wt=/([\+\-]|\d\d)/gi;function Rt(e,t){var n=(t||"").match(e);if(null===n)return null;var r=n[n.length-1]||[],a=(r+"").match(Wt)||["-",0,0],i=60*a[1]+D(a[2]);return 0===i?0:"+"===a[0]?i:-i}function Vt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(v(e)||d(e)?e.valueOf():jt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):jt(e).local()}function Ct(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function zt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Bt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Jt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Kt(e,t){var n,r,a,i,s,o,d=e,l=null;return Nt(e)?d={ms:e._milliseconds,d:e._days,M:e._months}:u(e)?(d={},t?d[t]=e:d.milliseconds=e):(l=Bt.exec(e))?(n="-"===l[1]?-1:1,d={y:0,d:D(l[ge])*n,h:D(l[Le])*n,m:D(l[ve])*n,s:D(l[Ye])*n,ms:D(Ut(1e3*l[De]))*n}):(l=Jt.exec(e))?(n="-"===l[1]?-1:1,d={y:Gt(l[2],n),M:Gt(l[3],n),w:Gt(l[4],n),d:Gt(l[5],n),h:Gt(l[6],n),m:Gt(l[7],n),s:Gt(l[8],n)}):null==d?d={}:"object"==typeof d&&("from"in d||"to"in d)&&(i=jt(d.from),s=jt(d.to),a=i.isValid()&&s.isValid()?(s=Vt(s,i),i.isBefore(s)?o=$t(i,s):((o=$t(s,i)).milliseconds=-o.milliseconds,o.months=-o.months),o):{milliseconds:0,months:0},(d={}).ms=a.milliseconds,d.M=a.months),r=new Ft(d),Nt(e)&&c(e,"_locale")&&(r._locale=e._locale),r}function Gt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function $t(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function qt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(E(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Zt(this,Kt(n="string"==typeof n?+n:n,r),e),this}}function Zt(e,t,n,r){var i=t._milliseconds,s=Ut(t._days),o=Ut(t._months);e.isValid()&&(r=null==r||r,o&&Ne(e,je(e,"Month")+o*n),s&&He(e,"Date",je(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,s||o))}Kt.fn=Ft.prototype,Kt.invalid=function(){return Kt(NaN)};var Qt=qt(1,"add"),Xt=qt(-1,"subtract");function en(e,t){var n,r,a=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(a,"months");return t-i<0?(n=e.clone().add(a-1,"months"),r=(t-i)/(i-n)):(n=e.clone().add(a+1,"months"),r=(t-i)/(n-i)),-(a+r)||0}function tn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=mt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=b("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function rn(){return this._locale}var an=1e3,sn=60*an,on=60*sn,un=3506328*on;function dn(e,t){return(e%t+t)%t}function ln(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-un:new Date(e,t,n).valueOf()}function cn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-un:Date.UTC(e,t,n)}function _n(e,t){z(0,[e,e.length],0,t)}function mn(e,t,n,r,a){var i;return null==e?Be(this,r,a).year:(i=Je(e,r,a),t>i&&(t=i),function(e,t,n,r,a){var i=ze(e,t,n,r,a),s=Ve(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}.call(this,e,t,n,r,a))}z(0,["gg",2],0,function(){return this.weekYear()%100}),z(0,["GG",2],0,function(){return this.isoWeekYear()%100}),_n("gggg","weekYear"),_n("ggggg","weekYear"),_n("GGGG","isoWeekYear"),_n("GGGGG","isoWeekYear"),A("weekYear","gg"),A("isoWeekYear","GG"),U("weekYear",1),U("isoWeekYear",1),le("G",ie),le("g",ie),le("GG",Q,G),le("gg",Q,G),le("GGGG",ne,q),le("gggg",ne,q),le("GGGGG",re,Z),le("ggggg",re,Z),fe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=D(e)}),fe(["gg","GG"],function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)}),z("Q",0,"Qo","quarter"),A("quarter","Q"),U("quarter",7),le("Q",K),he("Q",function(e,t){t[Me]=3*(D(e)-1)}),z("D",["DD",2],"Do","date"),A("date","D"),U("date",9),le("D",Q),le("DD",Q,G),le("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),he(["D","DD"],ge),he("Do",function(e,t){t[ge]=D(e.match(Q)[0])});var hn=Oe("Date",!0);z("DDD",["DDDD",3],"DDDo","dayOfYear"),A("dayOfYear","DDD"),U("dayOfYear",4),le("DDD",te),le("DDDD",$),he(["DDD","DDDD"],function(e,t,n){n._dayOfYear=D(e)}),z("m",["mm",2],0,"minute"),A("minute","m"),U("minute",14),le("m",Q),le("mm",Q,G),he(["m","mm"],ve);var fn=Oe("Minutes",!1);z("s",["ss",2],0,"second"),A("second","s"),U("second",15),le("s",Q),le("ss",Q,G),he(["s","ss"],Ye);var pn,yn=Oe("Seconds",!1);for(z("S",0,0,function(){return~~(this.millisecond()/100)}),z(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),z(0,["SSS",3],0,"millisecond"),z(0,["SSSS",4],0,function(){return 10*this.millisecond()}),z(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),z(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),z(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),z(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),z(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),A("millisecond","ms"),U("millisecond",16),le("S",te,K),le("SS",te,G),le("SSS",te,$),pn="SSSS";pn.length<=9;pn+="S")le(pn,ae);function Mn(e,t){t[De]=D(1e3*("0."+e))}for(pn="S";pn.length<=9;pn+="S")he(pn,Mn);var gn=Oe("Milliseconds",!1);z("z",0,0,"zoneAbbr"),z("zz",0,0,"zoneName");var Ln=L.prototype;function vn(e){return e}Ln.add=Qt,Ln.calendar=function(e,t){var n=e||jt(),r=Vt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",s=t&&(O(t[i])?t[i].call(this,n):t[i]);return this.format(s||this.localeData().calendar(i,this,jt(n)))},Ln.clone=function(){return new L(this)},Ln.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=Vt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=I(t)){case"year":i=en(this,r)/12;break;case"month":i=en(this,r);break;case"quarter":i=en(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:Y(i)},Ln.endOf=function(e){var t;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?cn:ln;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=on-dn(t+(this._isUTC?0:this.utcOffset()*sn),on)-1;break;case"minute":t=this._d.valueOf(),t+=sn-dn(t,sn)-1;break;case"second":t=this._d.valueOf(),t+=an-dn(t,an)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},Ln.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=B(this,e);return this.localeData().postformat(t)},Ln.from=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||jt(e).isValid())?Kt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.fromNow=function(e){return this.from(jt(),e)},Ln.to=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||jt(e).isValid())?Kt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.toNow=function(e){return this.to(jt(),e)},Ln.get=function(e){return O(this[e=I(e)])?this[e]():this},Ln.invalidAt=function(){return h(this).overflow},Ln.isAfter=function(e,t){var n=v(e)?e:jt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Ln.isBefore=function(e,t){var n=v(e)?e:jt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Ln.isBetween=function(e,t,n,r){var a=v(e)?e:jt(e),i=v(t)?t:jt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n)))},Ln.isSame=function(e,t){var n,r=v(e)?e:jt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Ln.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Ln.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Ln.isValid=function(){return f(this)},Ln.lang=nn,Ln.locale=tn,Ln.localeData=rn,Ln.max=xt,Ln.min=Ht,Ln.parsingFlags=function(){return _({},h(this))},Ln.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:N[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=F(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(O(this[e=I(e)]))return this[e](t);return this},Ln.startOf=function(e){var t;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?cn:ln;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=dn(t+(this._isUTC?0:this.utcOffset()*sn),on);break;case"minute":t=this._d.valueOf(),t-=dn(t,sn);break;case"second":t=this._d.valueOf(),t-=dn(t,an)}return this._d.setTime(t),a.updateOffset(this,!0),this},Ln.subtract=Xt,Ln.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Ln.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Ln.toDate=function(){return new Date(this.valueOf())},Ln.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?B(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):O(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",B(n,"Z")):B(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Ln.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},Ln.toJSON=function(){return this.isValid()?this.toISOString():null},Ln.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Ln.unix=function(){return Math.floor(this.valueOf()/1e3)},Ln.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Ln.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Ln.year=Ee,Ln.isLeapYear=function(){return we(this.year())},Ln.weekYear=function(e){return mn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Ln.isoWeekYear=function(e){return mn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Ln.quarter=Ln.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Ln.month=Ue,Ln.daysInMonth=function(){return xe(this.year(),this.month())},Ln.week=Ln.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Ln.isoWeek=Ln.isoWeeks=function(e){var t=Be(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Ln.weeksInYear=function(){var e=this.localeData()._week;return Je(this.year(),e.dow,e.doy)},Ln.isoWeeksInYear=function(){return Je(this.year(),1,4)},Ln.date=hn,Ln.day=Ln.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Ln.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Ln.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Ln.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Ln.hour=Ln.hours=it,Ln.minute=Ln.minutes=fn,Ln.second=Ln.seconds=yn,Ln.millisecond=Ln.milliseconds=gn,Ln.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Rt(oe,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Ct(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?Zt(this,Kt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Ct(this)},Ln.utc=function(e){return this.utcOffset(0,e)},Ln.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ct(this),"m")),this},Ln.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Rt(se,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Ln.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?jt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Ln.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Ln.isLocal=function(){return!!this.isValid()&&!this._isUTC},Ln.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Ln.isUtc=zt,Ln.isUTC=zt,Ln.zoneAbbr=function(){return this._isUTC?"UTC":""},Ln.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Ln.dates=b("dates accessor is deprecated. Use date instead.",hn),Ln.months=b("months accessor is deprecated. Use month instead",Ue),Ln.years=b("years accessor is deprecated. Use year instead",Ee),Ln.zone=b("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),Ln.isDSTShifted=b("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(M(e,this),(e=Et(e))._a){var t=e._isUTC?m(e._a):jt(e._a);this._isDSTShifted=this.isValid()&&T(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var Yn=H.prototype;function Dn(e,t,n,r){var a=mt(),i=m().set(r,t);return a[n](i,e)}function Tn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Dn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Dn(e,r,n,"month");return a}function kn(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var a,i=mt(),s=e?i._week.dow:0;if(null!=n)return Dn(t,(n+s)%7,r,"day");var o=[];for(a=0;a<7;a++)o[a]=Dn(t,(a+s)%7,r,"day");return o}Yn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return O(r)?r.call(t,n):r},Yn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},Yn.invalidDate=function(){return this._invalidDate},Yn.ordinal=function(e){return this._ordinal.replace("%d",e)},Yn.preparse=vn,Yn.postformat=vn,Yn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return O(a)?a(e,t,n,r):a.replace(/%d/i,e)},Yn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return O(n)?n(t):n.replace(/%s/i,t)},Yn.set=function(e){var t,n;for(n in e)O(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Yn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ae).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Yn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ae.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Yn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return function(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=m([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Se.call(this._shortMonthsParse,s))?a:null:-1!==(a=Se.call(this._longMonthsParse,s))?a:null:"MMM"===t?-1!==(a=Se.call(this._shortMonthsParse,s))?a:-1!==(a=Se.call(this._longMonthsParse,s))?a:null:-1!==(a=Se.call(this._longMonthsParse,s))?a:-1!==(a=Se.call(this._shortMonthsParse,s))?a:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=m([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},Yn.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Re.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=We),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Yn.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Re.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=Pe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Yn.week=function(e){return Be(e,this._week.dow,this._week.doy).week},Yn.firstDayOfYear=function(){return this._week.doy},Yn.firstDayOfWeek=function(){return this._week.dow},Yn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ke(n,this._week.dow):e?n[e.day()]:n},Yn.weekdaysMin=function(e){return!0===e?Ke(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Yn.weekdaysShort=function(e){return!0===e?Ke(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Yn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return function(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=m([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Se.call(this._weekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Se.call(this._shortWeekdaysParse,s))?a:null:-1!==(a=Se.call(this._minWeekdaysParse,s))?a:null:"dddd"===t?-1!==(a=Se.call(this._weekdaysParse,s))?a:-1!==(a=Se.call(this._shortWeekdaysParse,s))?a:-1!==(a=Se.call(this._minWeekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Se.call(this._shortWeekdaysParse,s))?a:-1!==(a=Se.call(this._weekdaysParse,s))?a:-1!==(a=Se.call(this._minWeekdaysParse,s))?a:null:-1!==(a=Se.call(this._minWeekdaysParse,s))?a:-1!==(a=Se.call(this._weekdaysParse,s))?a:-1!==(a=Se.call(this._shortWeekdaysParse,s))?a:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=m([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},Yn.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=Ze),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Yn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Qe),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Yn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Xe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Yn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Yn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ct("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===D(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),a.lang=b("moment.lang is deprecated. Use moment.locale instead.",ct),a.langData=b("moment.langData is deprecated. Use moment.localeData instead.",mt);var bn=Math.abs;function wn(e,t,n,r){var a=Kt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Sn(e){return e<0?Math.floor(e):Math.ceil(e)}function En(e){return 4800*e/146097}function On(e){return 146097*e/4800}function jn(e){return function(){return this.as(e)}}var Hn=jn("ms"),xn=jn("s"),An=jn("m"),In=jn("h"),Fn=jn("d"),Nn=jn("w"),Un=jn("M"),Pn=jn("Q"),Wn=jn("y");function Rn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Vn=Rn("milliseconds"),Cn=Rn("seconds"),zn=Rn("minutes"),Bn=Rn("hours"),Jn=Rn("days"),Kn=Rn("months"),Gn=Rn("years"),$n=Math.round,qn={ss:44,s:45,m:45,h:22,d:26,M:11},Zn=Math.abs;function Qn(e){return(e>0)-(e<0)||+e}function Xn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Zn(this._milliseconds)/1e3,r=Zn(this._days),a=Zn(this._months);e=Y(n/60),t=Y(e/60),n%=60,e%=60;var i=Y(a/12),s=a%=12,o=r,u=t,d=e,l=n?n.toFixed(3).replace(/\.?0+$/,""):"",c=this.asSeconds();if(!c)return"P0D";var _=c<0?"-":"",m=Qn(this._months)!==Qn(c)?"-":"",h=Qn(this._days)!==Qn(c)?"-":"",f=Qn(this._milliseconds)!==Qn(c)?"-":"";return _+"P"+(i?m+i+"Y":"")+(s?m+s+"M":"")+(o?h+o+"D":"")+(u||d||l?"T":"")+(u?f+u+"H":"")+(d?f+d+"M":"")+(l?f+l+"S":"")}var er=Ft.prototype;return er.isValid=function(){return this._isValid},er.abs=function(){var e=this._data;return this._milliseconds=bn(this._milliseconds),this._days=bn(this._days),this._months=bn(this._months),e.milliseconds=bn(e.milliseconds),e.seconds=bn(e.seconds),e.minutes=bn(e.minutes),e.hours=bn(e.hours),e.months=bn(e.months),e.years=bn(e.years),this},er.add=function(e,t){return wn(this,e,t,1)},er.subtract=function(e,t){return wn(this,e,t,-1)},er.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=I(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+En(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(On(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},er.asMilliseconds=Hn,er.asSeconds=xn,er.asMinutes=An,er.asHours=In,er.asDays=Fn,er.asWeeks=Nn,er.asMonths=Un,er.asQuarters=Pn,er.asYears=Wn,er.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*D(this._months/12):NaN},er._bubble=function(){var e,t,n,r,a,i=this._milliseconds,s=this._days,o=this._months,u=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*Sn(On(o)+s),s=0,o=0),u.milliseconds=i%1e3,e=Y(i/1e3),u.seconds=e%60,t=Y(e/60),u.minutes=t%60,n=Y(t/60),u.hours=n%24,s+=Y(n/24),a=Y(En(s)),o+=a,s-=Sn(On(a)),r=Y(o/12),o%=12,u.days=s,u.months=o,u.years=r,this},er.clone=function(){return Kt(this)},er.get=function(e){return e=I(e),this.isValid()?this[e+"s"]():NaN},er.milliseconds=Vn,er.seconds=Cn,er.minutes=zn,er.hours=Bn,er.days=Jn,er.weeks=function(){return Y(this.days()/7)},er.months=Kn,er.years=Gn,er.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Kt(e).abs(),a=$n(r.as("s")),i=$n(r.as("m")),s=$n(r.as("h")),o=$n(r.as("d")),u=$n(r.as("M")),d=$n(r.as("y")),l=a<=qn.ss&&["s",a]||a<qn.s&&["ss",a]||i<=1&&["m"]||i<qn.m&&["mm",i]||s<=1&&["h"]||s<qn.h&&["hh",s]||o<=1&&["d"]||o<qn.d&&["dd",o]||u<=1&&["M"]||u<qn.M&&["MM",u]||d<=1&&["y"]||["yy",d];return l[2]=t,l[3]=+e>0,l[4]=n,function(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}.apply(null,l)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},er.toISOString=Xn,er.toString=Xn,er.toJSON=Xn,er.locale=tn,er.localeData=rn,er.toIsoString=b("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Xn),er.lang=nn,z("X",0,0,"unix"),z("x",0,0,"valueOf"),le("x",ie),le("X",/[+-]?\d+(\.\d{1,3})?/),he("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),he("x",function(e,t,n){n._d=new Date(D(e))}),a.version="2.24.0",t=jt,a.fn=Ln,a.min=function(){return At("isBefore",[].slice.call(arguments,0))},a.max=function(){return At("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=m,a.unix=function(e){return jt(1e3*e)},a.months=function(e,t){return Tn(e,t,"months")},a.isDate=d,a.locale=ct,a.invalid=p,a.duration=Kt,a.isMoment=v,a.weekdays=function(e,t,n){return kn(e,t,n,"weekdays")},a.parseZone=function(){return jt.apply(null,arguments).parseZone()},a.localeData=mt,a.isDuration=Nt,a.monthsShort=function(e,t){return Tn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return kn(e,t,n,"weekdaysMin")},a.defineLocale=_t,a.updateLocale=function(e,t){if(null!=t){var n,r,a=st;null!=(r=lt(e))&&(a=r._config),t=j(a,t),(n=new H(t)).parentLocale=ot[e],ot[e]=n,ct(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},a.locales=function(){return w(ot)},a.weekdaysShort=function(e,t,n){return kn(e,t,n,"weekdaysShort")},a.normalizeUnits=I,a.relativeTimeRounding=function(e){return void 0===e?$n:"function"==typeof e&&($n=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==qn[e]&&(void 0===t?qn[e]:(qn[e]=t,"s"===e&&(qn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=Ln,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(2)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=r(t),u=a[e][r(t)];return 2===o&&(u=u[n?0:1]),u.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,s){var o=n(t),u=r[e][n(t)];return 2===o&&(u=u[a?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10,r=e%100-n,a=e>=100?100:null;return e+(t[n]||t[r]||t[a])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a,i={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a=i[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="";return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][t]),e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var s="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":return i?"sekunnin":"sekuntia";case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return s=function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10==2?"na":"mh";return e+t},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10==2?"na":"mh";return e+t},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voranim",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10,r=e/10;return n(0===t?r:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(r(e)?a(i)[1]:a(i)[0]):s?o+a(i)[1]:o+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function a(e,t,n){var a=e+" ";switch(n){case"ss":return a+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a,i={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a=i[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10,a=e%100-r,i=e>=100?100:null;return e+(t[r]||t[a]||t[i])}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r?a[n][0]:t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a,i={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a=i[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};if(!0===e)return n.nominative.slice(1,7).concat(n.nominative.slice(0,1));if(!e)return n.nominative;var r=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[r][e.day()]},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(1))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r={"./af":3,"./af.js":3,"./ar":4,"./ar-dz":5,"./ar-dz.js":5,"./ar-kw":6,"./ar-kw.js":6,"./ar-ly":7,"./ar-ly.js":7,"./ar-ma":8,"./ar-ma.js":8,"./ar-sa":9,"./ar-sa.js":9,"./ar-tn":10,"./ar-tn.js":10,"./ar.js":4,"./az":11,"./az.js":11,"./be":12,"./be.js":12,"./bg":13,"./bg.js":13,"./bm":14,"./bm.js":14,"./bn":15,"./bn.js":15,"./bo":16,"./bo.js":16,"./br":17,"./br.js":17,"./bs":18,"./bs.js":18,"./ca":19,"./ca.js":19,"./cs":20,"./cs.js":20,"./cv":21,"./cv.js":21,"./cy":22,"./cy.js":22,"./da":23,"./da.js":23,"./de":24,"./de-at":25,"./de-at.js":25,"./de-ch":26,"./de-ch.js":26,"./de.js":24,"./dv":27,"./dv.js":27,"./el":28,"./el.js":28,"./en-SG":29,"./en-SG.js":29,"./en-au":30,"./en-au.js":30,"./en-ca":31,"./en-ca.js":31,"./en-gb":32,"./en-gb.js":32,"./en-ie":33,"./en-ie.js":33,"./en-il":34,"./en-il.js":34,"./en-nz":35,"./en-nz.js":35,"./eo":36,"./eo.js":36,"./es":37,"./es-do":38,"./es-do.js":38,"./es-us":39,"./es-us.js":39,"./es.js":37,"./et":40,"./et.js":40,"./eu":41,"./eu.js":41,"./fa":42,"./fa.js":42,"./fi":43,"./fi.js":43,"./fo":44,"./fo.js":44,"./fr":45,"./fr-ca":46,"./fr-ca.js":46,"./fr-ch":47,"./fr-ch.js":47,"./fr.js":45,"./fy":48,"./fy.js":48,"./ga":49,"./ga.js":49,"./gd":50,"./gd.js":50,"./gl":51,"./gl.js":51,"./gom-latn":52,"./gom-latn.js":52,"./gu":53,"./gu.js":53,"./he":54,"./he.js":54,"./hi":55,"./hi.js":55,"./hr":56,"./hr.js":56,"./hu":57,"./hu.js":57,"./hy-am":58,"./hy-am.js":58,"./id":59,"./id.js":59,"./is":60,"./is.js":60,"./it":61,"./it-ch":62,"./it-ch.js":62,"./it.js":61,"./ja":63,"./ja.js":63,"./jv":64,"./jv.js":64,"./ka":65,"./ka.js":65,"./kk":66,"./kk.js":66,"./km":67,"./km.js":67,"./kn":68,"./kn.js":68,"./ko":69,"./ko.js":69,"./ku":70,"./ku.js":70,"./ky":71,"./ky.js":71,"./lb":72,"./lb.js":72,"./lo":73,"./lo.js":73,"./lt":74,"./lt.js":74,"./lv":75,"./lv.js":75,"./me":76,"./me.js":76,"./mi":77,"./mi.js":77,"./mk":78,"./mk.js":78,"./ml":79,"./ml.js":79,"./mn":80,"./mn.js":80,"./mr":81,"./mr.js":81,"./ms":82,"./ms-my":83,"./ms-my.js":83,"./ms.js":82,"./mt":84,"./mt.js":84,"./my":85,"./my.js":85,"./nb":86,"./nb.js":86,"./ne":87,"./ne.js":87,"./nl":88,"./nl-be":89,"./nl-be.js":89,"./nl.js":88,"./nn":90,"./nn.js":90,"./pa-in":91,"./pa-in.js":91,"./pl":92,"./pl.js":92,"./pt":93,"./pt-br":94,"./pt-br.js":94,"./pt.js":93,"./ro":95,"./ro.js":95,"./ru":96,"./ru.js":96,"./sd":97,"./sd.js":97,"./se":98,"./se.js":98,"./si":99,"./si.js":99,"./sk":100,"./sk.js":100,"./sl":101,"./sl.js":101,"./sq":102,"./sq.js":102,"./sr":103,"./sr-cyrl":104,"./sr-cyrl.js":104,"./sr.js":103,"./ss":105,"./ss.js":105,"./sv":106,"./sv.js":106,"./sw":107,"./sw.js":107,"./ta":108,"./ta.js":108,"./te":109,"./te.js":109,"./tet":110,"./tet.js":110,"./tg":111,"./tg.js":111,"./th":112,"./th.js":112,"./tl-ph":113,"./tl-ph.js":113,"./tlh":114,"./tlh.js":114,"./tr":115,"./tr.js":115,"./tzl":116,"./tzl.js":116,"./tzm":117,"./tzm-latn":118,"./tzm-latn.js":118,"./tzm.js":117,"./ug-cn":119,"./ug-cn.js":119,"./uk":120,"./uk.js":120,"./ur":121,"./ur.js":121,"./uz":122,"./uz-latn":123,"./uz-latn.js":123,"./uz.js":122,"./vi":124,"./vi.js":124,"./x-pseudo":125,"./x-pseudo.js":125,"./yo":126,"./yo.js":126,"./zh-cn":127,"./zh-cn.js":127,"./zh-hk":128,"./zh-hk.js":128,"./zh-tw":129,"./zh-tw.js":129};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=131},function(e,t,n){"use strict";n.r(t);var r,a,i,s=n(0),o=n.n(s);class u{static mergeOn(e){return t=>t.reduce((t,n)=>{let r=t[e];return n[e].forEach(e=>u.addNewChild(e,r)),n[e]=r,n})}static addNewChild(e,t){u.collectionHasEntity(t,e)||t.push(e)}static collectionHasEntity(e,t){return o.a.some(e,e=>e.uuid===t.uuid)}static removeFromCollection(e,t){o.a.remove(e,e=>e.uuid===t.uuid)}equals(e){return!o.a.isNil(e)&&e.uuid===this.uuid}validateFieldForEmpty(e,t){return e instanceof Date?o.a.isNil(e)?c.failure(t,"emptyValidationMessage"):c.successful(t):o.a.isEmpty(e)?c.failure(t,"emptyValidationMessage"):c.successful(t)}validateFieldForNull(e,t){return o.a.isNil(e)?c.failure(t,"emptyValidationMessage"):c.successful(t)}print(){return this.toString()}}i={EXTERNAL_RULE:"EXTERNAL_RULE"},(a="fieldKeys")in(r=u)?Object.defineProperty(r,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[a]=i;var d=u;class l{constructor(e,t,n,r){this.success=e,this.formIdentifier=t,this.messageKey=n,this.extra=r}static successful(e){return new l(!0,e)}static failureForEmpty(e){return new l(!1,e,"emptyValidationMessage")}static failureForNumeric(e){return new l(!1,e,"numericValueValidation")}static failure(e,t,n){return new l(!1,e,t,n)}static clone(e){return new l(e.success,e.formIdentifier,e.messageKey,e.extra)}static findByFormIdentifier(e,t){return o.a.find(e,e=>e.formIdentifier===t)}static hasValidationError(e){return e.some(e=>!e.success)}static hasNonRuleValidationError(e){return e.some(e=>!e.success&&e.formIdentifier!==d.fieldKeys.EXTERNAL_RULE)}}var c=l,m=n(1),h=n.n(m);class f{constructor(e){this.answer=e}hasValue(e){return this.answer===e}getValue(){return this.answer}get toResource(){return this.answer}getConceptUUID(){return this.answer}cloneForEdit(){const e=new f;return e.answer=this.answer,e}hasAnyAbnormalAnswer(e){return o.a.some(e,o.a.matches(this.answer))}get isSingleCoded(){return!0}get isMultipleCoded(){return!1}}var p=f;function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class M{static inDay(e){return new M(e,M.Day)}static inWeek(e){return new M(e,M.Week)}static inMonth(e){return new M(e,M.Month)}static inYear(e){return new M(e,M.Year)}static durationBetween(e,t){const n=h()(t).diff(e,"months",!0);return n>=1?new M(Math.round(2*n)/2,M.Month):new M(h()(t).diff(e,"days"),M.Day)}constructor(e,t){this._durationValue=e,this.durationUnit=t}get isInYears(){return this.durationUnit===M.Year}get durationValueAsString(){return o.a.toString(this._durationValue)}get durationValue(){return this._durationValue}toString(e){const t=this._durationValue<=1?this.durationUnit.substring(0,this.durationUnit.length-1):this.durationUnit;return e?`${this.durationValueAsString} ${e.t(t.toLowerCase())}`:`${this.durationValueAsString} ${this.durationUnit}`}getValue(){return{value:this.durationValue,unit:this.durationUnit}}toUnicodeString(e){return this.toString(e).replace(".5","½")}get isEmpty(){return o.a.isNil(this._durationValue)||o.a.isEmpty(this._durationValue)}get inYears(){return this.durationUnit===M.Month?this.durationValue/12:this.durationValue}changeUnit(e){return new M(this.durationValue,e)}changeValue(e){return new M(e.replace(/[^0-9]/g,""),this.durationUnit)}static fromDataEntryDate(e,t,n){const r=h()(n).diff(t,e);return new M(r,e)}cloneForEdit(){return new M(this.durationValue,this.durationUnit)}dateInPastBasedOnToday(e){return h()(e).subtract(this.durationValue,this.durationUnit).toDate()}get toResource(){return{_durationValue:this.durationValue,durationUnit:this.durationUnit}}static fromObs(e){return new M(e._durationValue,e.durationUnit)}}y(M,"Hour","hours"),y(M,"Minute","minutes"),y(M,"Day","days"),y(M,"Week","weeks"),y(M,"Month","months"),y(M,"Year","years");var g=M;var L=class{static getUUIDFor(e,t){return o.a.get(e,["_links",t,"href"])}};class v{constructor(e){this.answer=o.a.isNil(e)?[]:e}push(e){return this.answer.push(e),this}isAnswerAlreadyPresent(e){return o.a.some(this.answer,t=>t===e)}hasValue(e){return this.isAnswerAlreadyPresent(e)}removeAnswer(e){o.a.remove(this.answer,t=>t===e)}toggleAnswer(e){this.isAnswerAlreadyPresent(e)?this.removeAnswer(e):this.push(e)}hasAnyAbnormalAnswer(e){return o.a.some(this.answer,t=>o.a.some(e,o.a.matches(t)))}getValue(){return this.answer}get toResource(){return this.getValue()}cloneForEdit(){const e=new v;return e.answer=this.answer,e}get isSingleCoded(){return!1}get isMultipleCoded(){return!0}valueAsString(e,t){return o.a.join(this.getValue().map(n=>t.t(e.getConceptByUUID(n).name)),", ")}get numberOfAnswers(){return this.answer.length}}var Y=v;class D{constructor(e,t){this.value=e,this.datatype=t,this.answer=this._valueFromString()}asDisplayDate(){const e=A.hoursAndMinutesOfDateAreZero(this.answer)||this.datatype!==E.dataType.DateTime?"DD-MMM-YYYY":"DD-MMM-YYYY HH:mm";return h()(this.answer).format(e)}asDisplayTime(){return A.toDisplayTime(this.answer)}getValue(){return this.answer}get toResource(){return this.answer}cloneForEdit(){return new D(this.value,this.datatype)}_valueFromString(){if(this.datatype===E.dataType.Numeric&&!o.a.endsWith(this.value,"."))return o.a.toNumber(this.value);if(this.datatype===E.dataType.DateTime)return new Date(Date.parse(this.value));if(this.datatype===E.dataType.Date){const e=new Date(Date.parse(this.value));return h()(e).startOf("day").toDate()}return this.value}}var T=D;class k{constructor(e){this.durations=e}changeValue(e,t){return new k(this.durations.map(n=>n.durationUnit===e.durationUnit?n.changeValue(t):n))}findByUnit(e){return o.a.find(this.durations,t=>t.durationUnit===e)}changeValueByUnit(e,t){return new k(this.durations.map(n=>n.durationUnit===e?n.changeValue(t):n))}get isEmpty(){return this.durations.every(e=>e.isEmpty)}toString(e){return this.durations.map(t=>t.toString(e)).join(" ")}cloneForEdit(){return new k(this.durations.map(e=>e.cloneForEdit()))}getValue(){return this}static fromOpts(e){return new k(e.map(e=>new g(null,e)))}get toResource(){return{durations:this.durations.map(e=>e.toResource)}}static fromObs(e){return o.a.isNil(e.durations)?new k(e.map(g.fromObs)):new k(e.durations.map(g.fromObs))}}var b=k;function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class S{get name(){return this.concept.name}static fromResource(e,t){const n=new S;return n.concept=t.findByKey("uuid",L.getUUIDFor(e,"conceptAnswerUUID"),E.schema.name),n.uuid=e.uuid,n.answerOrder=e.order,n.abnormal=e.abnormal,n.unique=e.unique,n.voided=e.voided||!1,n}}w(S,"schema",{name:"ConceptAnswer",primaryKey:"uuid",properties:{uuid:"string",concept:"Concept",answerOrder:"double",abnormal:"bool",unique:"bool",voided:{type:"bool",default:!1}}}),w(S,"parentAssociations",()=>new Map([[E,"conceptUUID"]]));class E{static fromResource(e){const t=new E;return t.name=e.name,t.uuid=e.uuid,t.datatype=e.dataType,t.lowAbsolute=e.lowAbsolute,t.hiAbsolute=e.highAbsolute,t.lowNormal=e.lowNormal,t.hiNormal=e.highNormal,t.unit=e.unit,t.voided=e.voided||!1,t}static associateChild(e,t,n,r){let a=r.findByKey("uuid",L.getUUIDFor(n,"conceptUUID"),E.schema.name),i=(a=A.pick(a,["uuid"],["answers"])).answers;if(t!==S)throw`${t.name} not support by ${E.name}`;return d.addNewChild(e,i),a.answers=i,a}static create(e,t,n=A.randomUUID()){const r=new E;return r.name=e,r.datatype=t,r.uuid=n,r}cloneForReference(){const e=E.create(this.name,this.datatype);return e.uuid=this.uuid,e.unit=this.unit,e.lowAbsolute=this.lowAbsolute,e.lowNormal=this.lowNormal,e.hiNormal=this.hiNormal,e.hiAbsolute=this.hiAbsolute,e.answers=this.answers||[],e}_valuePresent(e){return!o.a.isNil(e)&&!isNaN(e)}violatesRange(e){return this.isAboveHiAbsolute(e)||this.isBelowLowAbsolute(e)}isAbnormal(e){let t=this.getValueWrapperFor(e);switch(this.datatype){case E.dataType.Numeric:return this.isBelowLowNormal(t.answer)||this.isAboveHiNormal(t.answer);case E.dataType.Coded:return t.hasAnyAbnormalAnswer(this.abnormalAnswers());default:return!1}}abnormalAnswers(){return o.a.filter(this.answers,e=>e.abnormal).map(e=>e.concept.uuid)}isBelowLowNormal(e){return this._areValidNumbers(e,this.lowNormal)&&e<this.lowNormal}isAboveHiNormal(e){return this._areValidNumbers(e,this.hiNormal)&&e>this.hiNormal}isBelowLowAbsolute(e){return this._areValidNumbers(e,this.lowAbsolute)&&e<this.lowAbsolute}isAboveHiAbsolute(e){return this._areValidNumbers(e,this.hiAbsolute)&&e>this.hiAbsolute}addAnswer(e){const t=new S;return t.uuid=A.randomUUID(),t.concept=e,this.answers.push(t),t}getPossibleAnswerConcept(e){return o.a.find(this.answers,t=>t.concept.name===e)}getValueWrapperFor(e){return this.isCodedConcept()?o.a.isArray(e)?new Y(e):new p(e):this.isDurationConcept()?b.fromObs(e):new T(e,this.datatype)}isCodedConcept(){return this.datatype===E.dataType.Coded}isDurationConcept(){return this.datatype===E.dataType.Duration}getAnswers(){return o.a.sortBy(this.answers,e=>-1!==o.a.indexOf([E.StandardConcepts.OtherConceptUUID,E.StandardConcepts.NoneConceptUUID],e.concept.uuid)?99999:e.answerOrder).filter(e=>!e.voided)}get translatedFieldValue(){return this.name}_areValidNumbers(...e){return o.a.every(e,e=>null!==e&&o.a.isFinite(e))}}w(E,"StandardConcepts",{OtherConceptUUID:"05ea583c-51d2-412d-ad00-06c432ffe538",NoneConceptUUID:"ebda5e05-a995-43ca-ad1a-30af3b937539"}),w(E,"schema",{name:"Concept",primaryKey:"uuid",properties:{uuid:"string",name:"string",datatype:"string",answers:{type:"list",objectType:"ConceptAnswer"},lowAbsolute:{type:"double",optional:!0},hiAbsolute:{type:"double",optional:!0},lowNormal:{type:"double",optional:!0},hiNormal:{type:"double",optional:!0},unit:{type:"string",optional:!0},voided:{type:"bool",default:!1}}}),w(E,"dataType",{Date:"Date",DateTime:"DateTime",Time:"Time",Duration:"Duration",Coded:"Coded",Numeric:"Numeric",Boolean:"Boolean",Text:"Text",Notes:"Notes",NA:"NA",Image:"Image",Video:"Video",Id:"Id",get Media(){return[this.Image,this.Video]}}),w(E,"childAssociations",()=>new Map([[S,"answers"]])),w(E,"merge",()=>d.mergeOn("answers"));class O{static create(e,t,n=!1){const r=new O;return r.concept=e,r.valueJSON=t,r.abnormal=n,r}toggleMultiSelectAnswer(e){this.getValueWrapper().toggleAnswer(e)}toggleSingleSelectAnswer(e){this.getValueWrapper().hasValue(e)?this.valueJSON={}:this.valueJSON=new p(e)}static valueAsString(e,t,n){const r=e.getValueWrapper();if(e.concept.datatype===E.dataType.Date||e.concept.datatype===E.dataType.DateTime)return r.asDisplayDate();if(e.concept.datatype===E.dataType.Time)return r.asDisplayTime();if(r.isSingleCoded)return n.t(t.getConceptByUUID(r.getConceptUUID()).name);if(r.isMultipleCoded)return o.a.join(r.getValue().map(e=>n.t(t.getConceptByUUID(e).name)),", ");if(e.concept.isDurationConcept())return o.a.toString(r.toString(n));{const t=o.a.defaultTo(e.concept.unit,"");return o.a.toString(`${r.getValue()} ${t}`)}}isAbnormal(){return!0===this.abnormal||this.concept.isAbnormal(this.getValue())}hasNoAnswer(){return o.a.isEmpty(this.getValueWrapper().answer)}cloneForEdit(){const e=new O;return e.concept=this.concept.cloneForReference(),e.valueJSON=this.getValueWrapper().cloneForEdit(),e}getValueWrapper(){if(o.a.isString(this.valueJSON)){let e=JSON.parse(this.valueJSON);return e=this.concept.isDurationConcept()?e.durations:e.answer,this.concept.getValueWrapperFor(e)}return this.valueJSON}get toResource(){return{conceptUUID:this.concept.uuid,value:this.getValueWrapper().toResource}}getValue(){return this.getValueWrapper().getValue()}setValue(e){this.valueJSON=e}getReadableValue(){let e=this.getValue();if(!o.a.isNil(e)){if(this.concept.isCodedConcept())switch(typeof e){case"string":return this.concept.answers.find(t=>t.concept.uuid===e).name;case"object":return e.map(e=>{let t=this.concept.answers.find(t=>t.concept.uuid===e);if(!t){let t=`Assertion error: Unable to find ${e} in coded concept ${this.concept.uuid}(${this.concept.name})`;throw A.logError("Observation.getReadableValue",t),Error(t)}return t.name})}return e}}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(O,"schema",{name:"Observation",properties:{concept:"Concept",valueJSON:"string"}});var j,H=O;class x{static setCurrentLogLevel(e){j=e}static look(e){return x.logDebug("General",e),e}static getCurrentLogLevel(){return j}static canLog(e){return x.getCurrentLogLevel()<=e}static formatDateTime(e){return`${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()} ${e.getHours()}:${e.getMinutes()}:${e.getSeconds()}`}static isNilOrEmpty(e){return o.a.isNil(e)||o.a.isEmpty(o.a.trim(e))}static getSafeTimeStamp(){return h()().format("MMM_Do_YYYY_h_mm_ss_a")}static getTimeStamp(){var e=new Date,t=e.getMonth()+1,n=e.getDate(),r=e.getHours(),a=e.getMinutes(),i=e.getSeconds();return r=(r<10?"0":"")+r,a=(a<10?"0":"")+a,i=(i<10?"0":"")+i,`${n=(n<10?"0":"")+n}-${t=(t<10?"0":"")+t}-${e.getFullYear()} ${r}:${a}:${i}`}static hoursAndMinutesOfDateAreZero(e){return e&&0===e.getMinutes()&&0===e.getHours()}static formatDate(e){return`${x.toTwoChars(e.getDate())}-${x.toTwoChars(e.getMonth()+1)}-${e.getFullYear()}`}static isoFormat(e){return`${e.getFullYear()}-${x.toTwoChars(e.getMonth()+1)}-${x.toTwoChars(e.getDate())}`}static toISOFormatTime(e,t){return h()({hour:e,minute:t}).format("HH:mm")}static toDisplayTime(e){const t=this.toTimeObject(e);return h()(t).format("LT")}static toTimeObject(e){const t=o.a.split(e,":");return{hour:o.a.toInteger(t[0]),minute:o.a.toInteger(t[1])}}static toTwoChars(e){return 1===`${e}`.length?`0${e}`:`${e}`}static formatValue(e){return e instanceof Date?x.formatDate(e):e instanceof g?e.toString():(isNaN(e),e)}static replaceAndroidIncompatibleChars(e){return"|\\?*<\":>+[]/'".split("").forEach(function(t){e=e.replace(t,"_")}),e}static toDisplayDate(e){return h()(e).format("DD-MMM-YYYY")}static assignDateFields(e,t,n){o.a.isNil(e)||e.forEach(e=>{n[e]=o.a.isNil(t[e])?null:new Date(t[e])})}static assignFields(e,t,n,r,a,i){return o.a.isNil(n)||n.forEach(n=>{t[n]=e[n]}),x.assignDateFields(r,e,t),o.a.isNil(a)||a.forEach(n=>{const r=[];o.a.isNil(e[n])||o.a.toPairs(e[n]).forEach(([e,t])=>{const n=new H;n.concept=i.findByKey("uuid",e,E.schema.name),n.valueJSON=JSON.stringify(n.concept.getValueWrapperFor(t)),r.push(n)}),t[n]=r}),t}static pick(e,t,n){const r=o.a.pick(e,t);return o.a.isNil(n)||n.forEach(t=>{r[t]=[...e[t]]}),r}static randomUUID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})}static areEqualShallow(e,t){if(o.a.isNil(e)!==o.a.isNil(t))return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}static dateWithoutTime(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}static dateAIsAfterB(e,t){return!o.a.isNil(e)&&!o.a.isNil(t)&&h()(x.dateWithoutTime(e)).isAfter(x.dateWithoutTime(t))}static dateIsAfterToday(e){return x.dateAIsAfterB(e,new Date)}static dateAIsBeforeB(e,t){return!o.a.isNil(e)&&!o.a.isNil(t)&&h()(x.dateWithoutTime(e)).isBefore(x.dateWithoutTime(t))}static logDebug(e,t){x.log(e,t,x.LogLevel.Debug)}static logInfo(e,t){x.log(e,t,x.LogLevel.Info)}static logWarn(e,t){x.log(e,t,x.LogLevel.Warn)}static logError(e,t){x.log(e,t,x.LogLevel.Error)}static log(e,t,n){if(n>=x.getCurrentLogLevel()){let r=`${o.a.findKey(x.LogLevel,e=>e===n)}`,a=`[${e}][${r}] ${x.getDisplayableMessage(t)}`;n>=x.getCurrentLogLevel()&&console[r.toLowerCase()](a)}}static getDisplayableMessage(e){if("object"==typeof e){let t=JSON.stringify(e);return"[object Object]"===e.toString()?t:"{}"===t?e:t}return e}static isoFormat(e){return o.a.isNil(e)?null:h()(e).format()}static isNumeric(e){return!isNaN(parseFloat(e))&&isFinite(e)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(x,"LogLevel",{Error:4,Warn:3,Info:2,Debug:1});var A=x;var I=class extends d{static fromResource(e,t){return A.assignFields(e,t,["uuid","name"])}clone(e){return e.uuid=this.uuid,e.name=this.name,e}get translatedFieldValue(){return this.name}};function F(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class N extends I{static create(e){let t=new N;return t.uuid=A.randomUUID(),t.name=e,t}static fromResource(e){const t=new N;return t.name=e.encounterTypeName,t.uuid=e.encounterTypeUUID,t.voided=!!e.encounterTypeVoided,t.operationalEncounterTypeName=e.name,t.displayName=o.a.isEmpty(t.operationalEncounterTypeName)?t.name:t.operationalEncounterTypeName,t}clone(){return A.assignFields(this,super.clone(new N),["operationalEncounterTypeName","displayName"])}}F(N,"schema",{name:"EncounterType",primaryKey:"uuid",properties:{uuid:"string",name:"string",operationalEncounterTypeName:{type:"string",optional:!0},displayName:"string",voided:{type:"bool",default:!1}}}),F(N,"parentAssociations",()=>new Map([]));var U=N;var P=class{constructor(e){this.observations=e}findObservation(e){return o.a.find(this.observations,t=>t.concept.uuid===e.uuid)}getObservation(e){return this.findObservation(e)}findObservationByValue(e){return o.a.find(this.observations,t=>t.getValue()===e)}updateObs(e,t){if(o.a.remove(this.observations,t=>t.concept.uuid===e.concept.uuid),[E.dataType.Text,E.dataType.Time,E.dataType.Numeric,E.dataType.Id,E.dataType.Video,E.dataType.Image,E.dataType.Date,E.dataType.DateTime].includes(e.getType())&&Object(s.isNil)(e.durationOptions)&&this.addOrUpdatePrimitiveObs(e.concept,t),e.isSingleSelect()&&!o.a.isEmpty(t)){const n=H.create(e.concept,new p(t));this.observations.push(n)}if(e.isMultiSelect()&&!o.a.isEmpty(t)){const n=H.create(e.concept,new Y(t));this.observations.push(n)}if(e.getType()===E.dataType.Duration&&!Object(s.isNil)(e.durationOptions)&&!o.a.isEmpty(t)&&!o.a.isEmpty(t.durations)){const n=H.create(e.concept,b.fromObs(t));this.observations.push(n)}}addOrUpdatePrimitiveObs(e,t){const n=this.getObservation(e);o.a.isEmpty(n)||o.a.remove(this.observations,e=>e.concept.uuid===n.concept.uuid),o.a.isEmpty(o.a.toString(t))||this.observations.push(H.create(e,new T(t,e.datatype)))}removeNonApplicableObs(e,t){const n=o.a.differenceBy(e,t,e=>e.uuid);return o.a.flatten(n.map(e=>o.a.remove(this.observations,t=>t.concept.uuid===e.concept.uuid)))}updatePrimitiveObs(e,t){e.forEach(e=>{let n=o.a.find(t,t=>e.uuid===t.uuid).value;o.a.isNil(n)||this.addOrUpdatePrimitiveObs(e.concept,n)})}toggleSingleSelectAnswer(e,t){return this.toggleCodedAnswer(e,t,!0)}toggleCodedAnswer(e,t,n){let r=this.getObservation(e);return o.a.isEmpty(r)?(r=H.create(e,n?new p(t):(new Y).push(t)),this.observations.push(r),r):(n?r.toggleSingleSelectAnswer(t):r.toggleMultiSelectAnswer(t),r.hasNoAnswer()?(o.a.remove(this.observations,e=>e.concept.uuid===r.concept.uuid),null):r)}updateCompositeDurationValue(e,t){let n=this.getObservation(e);return!o.a.isEmpty(n)&&(o.a.remove(this.observations,e=>e.concept.uuid===n.concept.uuid),t.isEmpty)?null:(n=H.create(e,t),this.observations.push(n),n)}toggleMultiSelectAnswer(e,t){return this.toggleCodedAnswer(e,t,!1)}static clone(e){return o.a.map(e,e=>e.cloneForEdit())}static convertObsForSave(e){e.forEach(e=>{e.valueJSON=JSON.stringify(e.valueJSON)})}getObservationReadableValue(e){let t=this.getObservation(e);return t?t.getReadableValue():null}addOrUpdateObservation(e,t){let n=this.getObservation(e),r=e.getValueWrapperFor(t);n?n.setValue(r):this.observations.push(H.create(e,r))}updateObservationBasedOnValue(e,t){const n=this.findObservationByValue(e);n&&n.setValue(n.concept.getValueWrapperFor(t))}toString(e){let t="";return this.observations.forEach(n=>{t+=`${e.t(n.concept.name)}: ${n.getReadableValue()}\n`}),t}};const W=(...e)=>o.a.filter(o.a.flatten(e),e=>E.dataType.Media.includes(e.concept.datatype));class R{static newInstance(e,t){const n=new R;return n.x=e,n.y=t,n}static fromResource(e){return R.newInstance(e.x,e.y)}get toResource(){const e={};return e.x=this.x,e.y=this.y,e}clone(){return R.newInstance(this.x,this.y)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(R,"schema",{name:"Point",properties:{x:"double",y:"double"}});var V=R;class C extends d{validate(){return o.a.isNil(this.encounterDateTime)?[new c(!1,C.fieldKeys.ENCOUNTER_DATE_TIME,"emptyValidationMessage")]:[c.successful(C.fieldKeys.ENCOUNTER_DATE_TIME)]}get toResource(){const e=o.a.pick(this,["uuid","voided"]);return e.encounterTypeUUID=this.encounterType.uuid,e.observations=o.a.map(this.observations,"toResource"),o.a.isNil(this.encounterDateTime)||(e.encounterDateTime=h()(this.encounterDateTime).format()),e.name=this.name,o.a.isNil(this.earliestVisitDateTime)||(e.earliestVisitDateTime=h()(this.earliestVisitDateTime).format()),o.a.isNil(this.maxVisitDateTime)||(e.maxVisitDateTime=h()(this.maxVisitDateTime).format()),o.a.isNil(this.cancelDateTime)||(e.cancelDateTime=h()(this.cancelDateTime).format()),e.cancelObservations=o.a.map(this.cancelObservations,"toResource"),o.a.isNil(this.encounterLocation)||(e.encounterLocation=this.encounterLocation.toResource),o.a.isNil(this.cancelLocation)||(e.cancelLocation=this.cancelLocation.toResource),e}static createEmptyInstance(){const e=new this;return e.voided=!1,e.uuid=A.randomUUID(),e.observations=[],e.cancelObservations=[],e.encounterDateTime=new Date,e.voided=!1,e}getRealEventDate(){return o.a.isNil(this.encounterDateTime)?this.earliestVisitDateTime:this.encounterDateTime}cloneForEdit(){const e=new this.constructor;return e.uuid=this.uuid,e.encounterType=o.a.isNil(this.encounterType)?null:this.encounterType.clone(),e.encounterDateTime=this.encounterDateTime,e.observations=P.clone(this.observations),e.voided=this.voided,e.name=this.name,e.earliestVisitDateTime=this.earliestVisitDateTime,e.maxVisitDateTime=this.maxVisitDateTime,e.cancelDateTime=this.cancelDateTime,e.cancelObservations=P.clone(this.cancelObservations),e.encounterLocation=o.a.isNil(this.encounterLocation)?null:this.encounterLocation.clone(),e.cancelLocation=o.a.isNil(this.cancelLocation)?null:this.cancelLocation.clone(),e}static fromResource(e,t){const n=new this;return A.assignFields(e,n,["uuid","voided"],["encounterDateTime"],["observations","cancelObservations"],t),n.encounterType=t.findByKey("uuid",L.getUUIDFor(e,"encounterTypeUUID"),U.schema.name),A.assignDateFields(["earliestVisitDateTime","maxVisitDateTime","cancelDateTime"],e,n),n.name=e.name,o.a.isNil(e.encounterLocation)||(n.encounterLocation=V.fromResource(e.encounterLocation)),o.a.isNil(e.cancelLocation)||(n.cancelLocation=V.fromResource(e.cancelLocation)),n}getEncounterDateValues(){return{[C.fieldKeys.ENCOUNTER_DATE_TIME]:this.encounterDateTime,[ProgramEncounter.fieldKeys.SCHEDULED_DATE_TIME]:this.earliestVisitDateTime,[ProgramEncounter.fieldKeys.MAX_DATE_TIME]:this.maxVisitDateTime}}findObservation(e){return o.a.find(this.observations,t=>t.concept.name===e)}findCancelEncounterObservation(e){return o.a.find(this.cancelObservations,t=>t.concept.name===e)}findCancelEncounterObservationReadableValue(e){const t=this.findCancelEncounterObservation(e);return o.a.isEmpty(t)?t:t.getReadableValue()}getObservationValue(e){const t=this.findObservation(e);return o.a.isEmpty(t)?t:t.getValue()}getObservationReadableValue(e){const t=this.findObservation(e);return o.a.isEmpty(t)?t:t.getReadableValue()}isCancellable(){return!this.hasBeenEdited()&&!this.isCancelled()}updateSchedule(e){return this.earliestVisitDateTime=e.earliestDate,this.maxVisitDateTime=e.maxDate,this.name=e.name,this}getObservations(){return o.a.isEmpty(this.observations)?this.cancelObservations:this.observations}addObservation(e){this.observations.push(e)}hasBeenEdited(){return!!this.encounterDateTime}isCancelled(){return!!this.cancelDateTime}isScheduled(){return o.a.isNil(this.encounterDateTime)&&o.a.isNil(this.cancelDateTime)}hasObservation(e){return!o.a.isNil(this.getObservationValue(e))}findMediaObservations(){return W(P.clone(this.observations),P.clone(this.cancelObservations))}replaceObservation(e,t){new P(this.observations).updateObservationBasedOnValue(e,t),new P(this.cancelObservations).updateObservationBasedOnValue(e,t)}get subjectType(){return o.a.get(this,"Encounter"===this.getName()?"individual.subjectType":"programEnrolment.individual.subjectType")}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(C,"fieldKeys",{ENCOUNTER_DATE_TIME:"ENCOUNTER_DATE_TIME",COMPLETION_DATE:"COMPLETION_DATE"});var z=C;function B(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const J="parentLocationUUID",K="locationUUID";class G extends d{static create({uuid:e,parent:t,child:n,voided:r}){return o.a.assignIn(new G,{uuid:e,parent:t,child:n,voided:r})}static fromResource(e,t){return G.create({uuid:e.uuid,parent:t.findByKey("uuid",L.getUUIDFor(e,J),$.schema.name),child:t.findByKey("uuid",L.getUUIDFor(e,K),$.schema.name),voided:!!e.voided})}}B(G,"schema",{name:"LocationMapping",primaryKey:"uuid",properties:{uuid:"string",parent:"AddressLevel",child:"AddressLevel",voided:{type:"bool",default:!1}}}),B(G,"parentAssociations",()=>new Map([[$,J]]));class $ extends d{static create({uuid:e,title:t,level:n,typeString:r,locationMappings:a=[]}){return o.a.assignIn(new $,{uuid:e,name:t,type:r,level:n,locationMappings:a})}static fromResource(e){return $.create(e)}static associateLocationMapping(e,t,n){let r=n.findByKey("uuid",L.getUUIDFor(t,K),$.schema.name);return r=A.pick(r,["uuid"],["locationMappings"]),d.addNewChild(e,r.locationMappings),r}static associateChild(e,t,n,r){if(t===G)return $.associateLocationMapping(e,n,r);throw`${t.name} not support by ${$.schema.name}.associateChild()`}getParentLocations(){return o.a.filter(this.locationMappings,e=>!e.voided).map(e=>e.parent)}cloneForReference(){return $.create(o.a.assignIn({title:this.name,typeString:this.type},this))}get translatedFieldValue(){return this.name}}B($,"schema",{name:"AddressLevel",primaryKey:"uuid",properties:{uuid:"string",name:"string",level:"double",type:{type:"string",optional:!0},locationMappings:{type:"list",objectType:"LocationMapping"},titleLineage:{type:"string",optional:!0}}}),B($,"merge",()=>d.mergeOn("locationMappings")),B($,"parentAssociations",()=>new Map([[$,K]])),B($,"childAssociations",()=>new Map([[G,"locationMappings"]]));var q=$;class Z{static fromResource(e){const t=new Z;return t.key=e.key,t.value=JSON.stringify(e.value),t}getValue(){try{return JSON.parse(this.value)}catch(e){return this.value}}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Z,"schema",{name:"KeyValue",properties:{key:"string",value:"string"}});var Q=Z;function X(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class ee{static fromResource(e){if(o.a.isNil(e))return null;const t=new ee;return t.regex=e.regex,t.descriptionKey=e.descriptionKey,t}valid(e){let t=ee.map.get(this.regex);return o.a.isNil(t)&&(t=new RegExp(this.regex),ee.map.set(this.regex,t)),t.test(e)}}X(ee,"map",new Map),X(ee,"schema",{name:"Format",properties:{regex:"string",descriptionKey:"string"}});var te=ee;class ne{constructor(e,t,n,r,a=[]){this.type=t,this.label=e,this.optsFnMap=n,this.selectedOptions=a,this.optsQueryMap=r}selectOption(e){return new ne(this.label,this.type,this.optsFnMap,this.selectedOptions.indexOf(e)>-1?[]:[e])}isSelected(e){return this.selectedOptions.some(t=>t===e)}compositeFn(e){return 0===this.optsFnMap.size?e:this.selectedOptions.map(e=>this.optsFnMap.get(e)).reduce((e,t)=>t(e),e)}orQuery(){return this.selectedOptions.map(e=>this.optsQueryMap.get(e)).join(" OR ")}andQuery(){return this.selectedOptions.map(e=>this.optsQueryMap.get(e)).join(" AND ")}get options(){return 0===this.optsFnMap.size?[...this.optsQueryMap.keys()].map(e=>[e,e]):[...this.optsFnMap.keys()].map(e=>[e,e])}isApplied(){return this.selectedOptions.length>0}toString(){return`${this.label} - ${this.selectedOptions.join(", ")}`}clone(){return new ne(this.label,this.type,this.optsFnMap,this.selectedOptions)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(ne,"types",{SingleSelect:"SingleSelect",MultiSelect:"MultiSelect"});var re=ne;function ae(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class ie{static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"formElementGroupUUID"),de.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"conceptUUID"),E.schema.name),a=A.assignFields(e,new ie,["uuid","name","displayOrder","mandatory","type","voided"],[]);return a.formElementGroup=n,a.concept=r,t.deleteObjects(e.uuid,ie.schema.name,"keyValues"),a.keyValues=o.a.map(e.keyValues,Q.fromResource),a.validFormat=te.fromResource(e.validFormat),a}getType(){return this.concept.datatype===E.dataType.Coded?this.type:this.concept.datatype}isMultiSelect(){return this.type===re.types.MultiSelect}excludedAnswers(){const e=this.recordByKey(ie.keys.ExcludedAnswers);return o.a.isNil(e)?[]:e.getValue()}set answersToSkip(e){this.answersToExclude=e}recordByKey(e){return o.a.find(this.keyValues,t=>t.key===e)}recordValueByKey(e){return o.a.invoke(o.a.find(this.keyValues,t=>t.key===e),"getValue")}isSingleSelect(){return this.type===re.types.SingleSelect||o.a.isNil(this.type)}get truthDisplayValue(){const e=this.recordByKey(ie.keys.TrueValue);return o.a.isNil(e)?"yes":e.getValue()}get falseDisplayValue(){const e=this.recordByKey(ie.keys.FalseValue);return o.a.isNil(e)?"no":e.getValue()}validate(e){const t=new c(!1,this.uuid);if(this.mandatory&&o.a.isEmpty(o.a.toString(e)))t.messageKey="emptyValidationMessage";else if(this.concept.datatype===E.dataType.Numeric&&isNaN(e))t.messageKey="numericValueValidation";else if(this.concept.isBelowLowAbsolute(e))t.messageKey="numberBelowLowAbsolute",t.extra={limit:this.concept.lowAbsolute};else if(this.concept.isAboveHiAbsolute(e))t.messageKey="numberAboveHiAbsolute",t.extra={limit:this.concept.hiAbsolute};else if(o.a.isEmpty(this.validFormat)||o.a.isEmpty(o.a.toString(e))||this.validFormat.valid(e)){if(this.isMultiSelect()&&!o.a.isEmpty(e))return this._validateMultiSelect(e);if(this.concept.datatype!==E.dataType.DateTime||!A.hoursAndMinutesOfDateAreZero(e))return new c(!0,this.uuid,null);t.messageKey="timeValueValidation"}else t.messageKey=this.validFormat.descriptionKey;return t}getAnswers(){const e=this.concept.getAnswers(),t=this.excludedAnswers().map(e=>({concept:{name:e}}));return o.a.differenceBy(e,t.concat(o.a.isEmpty(this.answersToExclude)?[]:this.answersToExclude),e=>e.concept.name)}getAnswerWithConceptName(e){return o.a.find(this.concept.getAnswers(),t=>t.concept.name===e)}getRawAnswers(){return this.concept.getAnswers()}get translatedFieldValue(){return this.name}get durationOptions(){const e=this.recordByKey("durationOptions");return o.a.isNil(e)?null:e.getValue()}get editable(){const e=this.recordByKey("editable");return!!o.a.isNil(e)||e.getValue()}get datePickerMode(){const e=this.recordByKey("datePickerMode");return o.a.isNil(e)?null:e.getValue()}matches(e){return this.name===e||this.uuid===e}toJSON(){return{uuid:this.uuid,name:this.name,displayOrder:this.displayOrder,mandatory:this.mandatory,keyValues:this.keyValues,concept:this.concept,formElementGroupUUID:this.formElementGroup.uuid}}_validateMultiSelect(e){const t=this.getUniqueAnswerConflict(this._getSelectedAnswers(e));return o.a.isNil(t)?new c(!0,this.uuid,null):new c(!1,this.uuid,"uniqueAnswerConflict",{answer:t.concept.name})}_getSelectedAnswers(e){return e.isMultipleCoded?e.getValue():e}getUniqueAnswerConflict(e){const t=this.getAnswers(),n=o.a.map(e,e=>o.a.find(t,t=>t.concept.uuid===e)),r=o.a.find(n,e=>o.a.get(e,"unique"));if(e.length>1&&!o.a.isNil(r))return r}}ae(ie,"schema",{name:"FormElement",primaryKey:"uuid",properties:{uuid:"string",name:"string",displayOrder:"double",mandatory:"bool",keyValues:{type:"list",objectType:"KeyValue"},concept:"Concept",type:{type:"string",optional:!0},formElementGroup:"FormElementGroup",validFormat:{type:"Format",optional:!0},voided:{type:"bool",default:!1}}}),ae(ie,"parentAssociations",()=>new Map([[de,"formElementGroupUUID"]])),ae(ie,"keys",{Select:"Select",TrueValue:"TrueValue",FalseValue:"FalseValue",ExcludedAnswers:"ExcludedAnswers",IdSourceUUID:"IdSourceUUID"}),ae(ie,"values",{Single:"Single",Multi:"Multi"});var se=ie;function oe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class ue{static fromResource(e,t){const n=A.assignFields(e,new ue,["uuid","name","displayOrder","display","voided"]);return n.form=t.findByKey("uuid",L.getUUIDFor(e,"formUUID"),_e.schema.name),n}static associateChild(e,t,n,r){let a=r.findByKey("uuid",L.getUUIDFor(n,"formElementGroupUUID"),ue.schema.name);if(a=A.pick(a,["uuid"],["formElements"]),t!==se)throw`${t.name} not support by ${ue.name}`;return d.addNewChild(e,a.formElements),a}addFormElement(e){this.formElements.push(e)}next(){return this.form.getNextFormElement(this.displayOrder)}previous(){return this.form.getPrevFormElement(this.displayOrder)}get isLast(){return this.form.getLastFormElementElementGroup().displayOrder>this.displayOrder}get isFirst(){return 1===this.displayOrder}getFormElementsOfType(e){return o.a.filter(this.formElements,t=>t.concept.datatype===e||t.type===e)}validate(e,t){const n=[];return t.forEach(t=>{const r=e.findObservation(t.concept),a=t.validate(o.a.isNil(r)?null:r.getValue());n.push(a)}),n}get formElementIds(){return this.getFormElements().map(e=>e.uuid)}nonVoidedFormElements(){return o.a.filter(this.formElements,e=>!e.voided)}getFormElements(){return ue._sortedFormElements(this.nonVoidedFormElements())}static _sortedFormElements(e){return o.a.sortBy(e,e=>e.displayOrder)}get translatedFieldValue(){return this.display}removeFormElement(e){return this.formElements=o.a.reject(this.getFormElements(),t=>t.matches(e)),this}filterElements(e){let t=o.a.filter(this.getFormElements(),t=>o.a.some(e,e=>e.uuid===t.uuid&&e.visibility&&(()=>(t.answersToSkip=e.answersToSkip,!0))()));return ue._sortedFormElements(t)}toJSON(){return{uuid:this.uuid,name:this.name,displayOrder:this.displayOrder,display:this.display,formElements:this.formElements,formUUID:this.form.uuid}}}oe(ue,"schema",{name:"FormElementGroup",primaryKey:"uuid",properties:{uuid:"string",name:"string",displayOrder:"double",display:{type:"string",optional:!0},formElements:{type:"list",objectType:"FormElement"},form:"Form",voided:{type:"bool",default:!1}}}),oe(ue,"merge",()=>d.mergeOn("formElements")),oe(ue,"parentAssociations",()=>new Map([[_e,"formUUID"]])),oe(ue,"childAssociations",()=>new Map([[se,"formElements"]]));var de=ue;function le(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class ce{static safeInstance(){const e=new ce;return e.formElementGroups=[],e}removeFormElement(e){return this.formElementGroups=o.a.map(this.formElementGroups,t=>t.removeFormElement(e)),this}static fromResource(e){return A.assignFields(e,new ce,["uuid","name","formType"])}static associateChild(e,t,n,r){let a=r.findByKey("uuid",L.getUUIDFor(n,"formUUID"),ce.schema.name);if(a=A.pick(a,["uuid"],["formElementGroups"]),t!==de)throw`${t.name} not support by Form`;return d.addNewChild(e,a.formElementGroups),a}addFormElementGroup(e){e.form=this,this.formElementGroups.push(e)}formElementGroupAt(e){return o.a.find(this.formElementGroups,t=>t.displayOrder===e)}getNextFormElement(e){const t=o.a.findIndex(this.getFormElementGroups(),t=>t.displayOrder===e);return this.getFormElementGroups()[t+1]}getFormElementsOfType(e){return o.a.reduce(this.formElementGroups,(t,n)=>o.a.concat(t,n.getFormElementsOfType(e)),[])}getPrevFormElement(e){const t=o.a.findIndex(this.getFormElementGroups(),t=>t.displayOrder===e);return this.getFormElementGroups()[t-1]}nonVoidedFormElementGroups(){return o.a.filter(this.formElementGroups,e=>!e.voided)}getFormElementGroups(){return o.a.sortBy(this.nonVoidedFormElementGroups(),e=>e.displayOrder)}getLastFormElementElementGroup(){return o.a.last(this.getFormElementGroups())}get numberOfPages(){return this.nonVoidedFormElementGroups().length}get firstFormElementGroup(){return o.a.first(this.getFormElementGroups())}findFormElement(e){var t;return o.a.forEach(this.nonVoidedFormElementGroups(),n=>{const r=o.a.find(n.getFormElements(),t=>t.name===e);o.a.isNil(r)||(t=r)}),t}orderObservations(e){const t=[],n=o.a.sortBy(this.formElementGroups,e=>e.displayOrder).map(e=>o.a.sortBy(e.getFormElements(),e=>e.displayOrder).map(e=>e.concept));o.a.flatten(n).map(n=>{const r=e.find(e=>e.concept.uuid===n.uuid);o.a.isNil(r)||t.push(r)});const r=e.filter(e=>o.a.isNil(t.find(t=>t.concept.uuid===e.concept.uuid)));return t.concat(r)}}le(ce,"schema",{name:"Form",primaryKey:"uuid",properties:{uuid:"string",formType:"string",name:"string",formElementGroups:{type:"list",objectType:"FormElementGroup"}}}),le(ce,"childAssociations",()=>new Map([[de,"formElementGroups"]])),le(ce,"merge",()=>d.mergeOn("formElementGroups")),le(ce,"formTypes",{IndividualProfile:"IndividualProfile",Encounter:"Encounter",ProgramEncounter:"ProgramEncounter",ProgramEnrolment:"ProgramEnrolment",ProgramExit:"ProgramExit",ProgramEncounterCancellation:"ProgramEncounterCancellation",ChecklistItem:"ChecklistItem",IndividualEncounterCancellation:"IndividualEncounterCancellation"});var _e=ce;class me{static fromResource(e,t){const n=new me;return n.key=e,n.value=t,n}get toResource(){const e={};return e[this.key]=this.value,e}getValue(){}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(me,"schema",{name:"StringKeyNumericValue",properties:{key:"string",value:"double"}});var he=me;class fe extends I{static fromResource(e){const t=new fe;return t.uuid=e.programUUID,t.name=e.programName,t.operationalProgramName=e.name,t.colour=o.a.isNil(e.colour)?fe.randomColour():e.colour,t.displayName=o.a.isEmpty(t.operationalProgramName)?t.name:t.operationalProgramName,t.programSubjectLabel=e.programSubjectLabel||e.name||t.name,t}static randomColour(){return"rgb("+Math.floor(256*Math.random())+","+Math.floor(256*Math.random())+","+Math.floor(256*Math.random())+")"}clone(){return A.assignFields(this,super.clone(new fe),["operationalProgramName","displayName"])}static addTranslation(e,t){t.addTranslation("en",e.displayName,e.displayName)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(fe,"schema",{name:"Program",primaryKey:"uuid",properties:{uuid:"string",name:"string",operationalProgramName:{type:"string",optional:!0},displayName:"string",colour:"string",programSubjectLabel:"string"}});var pe=fe;class ye extends I{static fromResource(e){const t=A.assignFields(e,new ye,["uuid","from"]);return t.min=he.fromResource(e.min.unit,e.min.value),t.max=he.fromResource(e.max.unit,e.max.value),t}clone(){return super.clone(new ye)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(ye,"schema",{name:"VisitScheduleInterval",properties:{from:"string",min:"StringKeyNumericValue",max:"StringKeyNumericValue"}});var Me=ye;class ge extends I{static fromResource(e,t){const n=A.assignFields(e,new ge,["uuid","name"]);return n.encounterType=t.findByKey("name",e.encounterType,U.schema.name),n.interval=Me.fromResource(e.interval,t),n}clone(){return super.clone(new ge)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(ge,"schema",{name:"VisitScheduleConfig",properties:{name:"string",encounterType:"EncounterType",interval:"VisitScheduleInterval"}});var Le=ge;class ve{static fromResource(e,t){const n=A.assignFields(e,new ve,["state","color","displayOrder","start","end"]),[r,a]=Object.entries(e.to)[0],[i,s]=Object.entries(e.from)[0];return n.to=he.fromResource(r,a),n.from=he.fromResource(i,s),n}static get completed(){const e=new ve;return e.color="green",e.state="Completed",e}static get expired(){const e=new ve;return e.color="grey",e.state="Expired",e}static na(e){const t=new ve;return t.to={},t.displayOrder=999,t.to.key="year",t.to.value=e,t.from={},t.from.key="year",t.from.value=e,t.color="grey",t.state="Past Expiry",t}fromDate(e){return h()(e).add(this.from.value,this.from.key).toDate()}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(ve,"schema",{name:"ChecklistItemStatus",properties:{state:"string",from:"StringKeyNumericValue",to:"StringKeyNumericValue",color:{type:"string",default:"yellow"},displayOrder:"double",start:"int",end:"int"}});var Ye=ve;class De extends I{}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(De,"schema",{name:"ProgramOutcome",primaryKey:"uuid",properties:{uuid:"string",name:"string"}});var Te=De;class ke extends I{isMale(){return"Male"===this.name}isFemale(){return"Female"===this.name}static create(e){let t=new ke;return t.uuid=A.randomUUID(),t.name=e,t}static fromResource(e){return I.fromResource(e,new ke)}clone(){return super.clone(new ke)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(ke,"schema",{name:"Gender",primaryKey:"uuid",properties:{uuid:"string",name:"string"}});var be=ke;class we extends I{static createEmptyInstance(){return new we}clone(){const e=super.clone(new we);return e.voided=this.voided,e}static fromResource(e){let t=I.fromResource(e,new we);return t.voided=e.voided,t}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(we,"schema",{name:"IndividualRelation",primaryKey:"uuid",properties:{uuid:"string",name:"string",voided:{type:"bool",default:!1}}});var Se=we;function Ee(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Oe extends I{static createEmptyInstance(){const e=new Oe;return e.individualAIsToBRelation=Se.createEmptyInstance(),e.individualBIsToARelation=Se.createEmptyInstance(),e}clone(){const e=new Oe;return e.uuid=this.uuid,e.individualAIsToBRelation=this.individualAIsToBRelation,e.individualBIsToARelation=this.individualBIsToARelation,e.voided=this.voided,e}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"individualAIsToBRelationUUID"),Se.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"individualBIsToBRelationUUID"),Se.schema.name),a=A.assignFields(e,new Oe,["uuid","name","voided"]);return a.individualAIsToBRelation=n,a.individualBIsToARelation=r,a}}Ee(Oe,"schema",{name:"IndividualRelationshipType",primaryKey:"uuid",properties:{uuid:"string",name:"string",individualAIsToBRelation:"IndividualRelation",individualBIsToARelation:"IndividualRelation",voided:{type:"bool",default:!1}}}),Ee(Oe,"parentAssociations",()=>new Map([[Se,"individualAIsToBRelationUUID"],[Se,"individualBIsToBRelationUUID"]]));var je=Oe;function He(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class xe extends d{static createEmptyInstance(){const e=new xe;return e.uuid=A.randomUUID(),e.individualA=Ve.createEmptyInstance(),e.individualB=Ve.createEmptyInstance(),e.relationship=je.createEmptyInstance(),e}get toResource(){const e=o.a.pick(this,["uuid"]);return e.individualAUUID=this.individualA.uuid,e.individualBUUID=this.individualB.uuid,e.relationshipTypeUUID=this.relationship.uuid,e.voided=this.voided,e.enterDateTime=A.isoFormat(this.enterDateTime),e.exitDateTime=A.isoFormat(this.exitDateTime),e}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"relationshipTypeUUID"),je.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"individualAUUID"),Ve.schema.name),a=t.findByKey("uuid",L.getUUIDFor(e,"individualBUUID"),Ve.schema.name),i=A.assignFields(e,new xe,["uuid","voided"],["enterDateTime","exitDateTime"],[],t);return i.relationship=n,i.individualA=r,i.individualB=a,i}static create(e,t){const n=xe.createEmptyInstance();return n.relationship=t,e.relation.uuid===t.individualBIsToARelation.uuid?(n.individualA=e.individual,n.individualB=e.relative):(n.individualB=e.individual,n.individualA=e.relative),n}cloneForEdit(){const e=new xe;return e.uuid=this.uuid,e.relationship=this.relationship.clone(),e.enterDateTime=this.enterDateTime,e.exitDateTime=this.exitDateTime,e.individualA=this.individualA,e.individualB=this.individualB,e.voided=this.voided,e}toJSON(){return{uuid:this.uuid,relationship:this.relationship,individualAUuid:this.individualA.uuid,individualBUuid:this.individualB.uuid,enterDateTime:this.enterDateTime,exitDateTime:this.exitDateTime,exitObservations:this.exitObservations,voided:this.voided}}}He(xe,"schema",{name:"IndividualRelationship",primaryKey:"uuid",properties:{uuid:"string",relationship:"IndividualRelationshipType",individualA:"Individual",individualB:"Individual",enterDateTime:{type:"date",optional:!0},exitDateTime:{type:"date",optional:!0},exitObservations:{type:"list",objectType:"Observation"},voided:{type:"bool",default:!1}}}),He(xe,"parentAssociations",()=>new Map([[Ve,"individualAUUID"]]));var Ae=xe;function Ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Fe extends z{static create(){let e=super.createEmptyInstance();return e.encounterType=U.create(),e}static fromResource(e,t){const n=super.fromResource(e,t);return n.individual=t.findByKey("uuid",L.getUUIDFor(e,"individualUUID"),Ve.schema.name),n}get toResource(){const e=super.toResource;return e.individualUUID=this.individual.uuid,e}cloneForEdit(){const e=super.cloneForEdit();return e.individual=this.individual,e}validate(){const e=super.validate();return!o.a.isNil(this.encounterDateTime)&&A.dateAIsBeforeB(this.encounterDateTime,this.individual.registrationDate)&&e.push(new c(!1,z.fieldKeys.ENCOUNTER_DATE_TIME,"encounterDateBeforeRegistrationDate")),e}getName(){return"Encounter"}static createScheduled(e,t){const n=Fe.createEmptyInstance();return n.encounterType=e,n.individual=t,n.encounterDateTime=null,n}getAllScheduledVisits(){return this.individual.getAllScheduledVisits(this)}}Ie(Fe,"schema",{name:"Encounter",primaryKey:"uuid",properties:{uuid:"string",encounterType:"EncounterType",encounterDateTime:{type:"date",optional:!0},individual:"Individual",observations:{type:"list",objectType:"Observation"},encounterLocation:{type:"Point",optional:!0},name:{type:"string",optional:!0},earliestVisitDateTime:{type:"date",optional:!0},maxVisitDateTime:{type:"date",optional:!0},cancelDateTime:{type:"date",optional:!0},cancelObservations:{type:"list",objectType:"Observation"},cancelLocation:{type:"Point",optional:!0},voided:{type:"bool",default:!1}}}),Ie(Fe,"validationKeys",{ENCOUNTER_LOCATION:"ENCOUNTER_LOCATION"}),Ie(Fe,"parentAssociations",()=>new Map([[Ve,"individualUUID"]]));var Ne=Fe;class Ue extends I{static create(e){let t=new Ue;return t.uuid=A.randomUUID(),t.name=e,t}static fromResource(e){const t=new Ue;return t.name=e.name,t.uuid=e.subjectTypeUUID,t.voided=!!e.voided,t}clone(){const e=new Ue;return e.uuid=this.uuid,e.name=this.name,e.voided=this.voided,e}isIndividual(){return"Individual"===this.name||"Patient"===this.name}registerIcon(){return this.isIndividual()?"account-plus":"plus-box"}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Ue,"schema",{name:"SubjectType",primaryKey:"uuid",properties:{uuid:"string",name:"string",voided:{type:"bool",default:!1}}});var Pe=Ue;function We(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Re extends d{static createEmptyInstance(){const e=new Re;return e.uuid=A.randomUUID(),e.subjectType=Pe.create(""),e.registrationDate=new Date,e.gender=be.create(""),e.observations=[],e.encounters=[],e.enrolments=[],e.relationships=[],e.lowestAddressLevel=q.create({uuid:"",title:"",level:0,typeString:""}),e.voided=!1,e}get toResource(){const e=o.a.pick(this,["uuid","firstName","lastName","dateOfBirthVerified","voided"]);return e.dateOfBirth=this.dateOfBirth?h()(this.dateOfBirth).format("YYYY-MM-DD"):null,e.registrationDate=h()(this.registrationDate).format("YYYY-MM-DD"),e.genderUUID=this.gender?this.gender.uuid:null,e.addressLevelUUID=this.lowestAddressLevel.uuid,e.subjectTypeUUID=this.subjectType.uuid,o.a.isNil(this.registrationLocation)||(e.registrationLocation=this.registrationLocation.toResource),e.observations=[],this.observations.forEach(t=>{e.observations.push(t.toResource)}),e}findObservationAcrossAllEnrolments(e){return this.nonVoidedEnrolments().find(t=>void 0!==t.findLatestObservationInEntireEnrolment(e))}observationExistsAcrossAllEnrolments(e){return this.nonVoidedEnrolments().find(t=>void 0!==t.findLatestObservationInEntireEnrolment(e))}static newInstance(e,t,n,r,a,i,s,o){const u=new Re;return u.uuid=e,u.firstName=t,u.lastName=n,u.subjectType=o,u.name=u.nameString,u.dateOfBirth=r,u.dateOfBirthVerified=a,u.gender=i,u.lowestAddressLevel=s,u}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"addressUUID"),q.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"genderUUID"),be.schema.name),a=t.findByKey("uuid",L.getUUIDFor(e,"subjectTypeUUID"),Pe.schema.name),i=A.assignFields(e,new Re,["uuid","firstName","lastName","dateOfBirthVerified","voided"],["dateOfBirth","registrationDate"],["observations"],t);return i.gender=r,i.lowestAddressLevel=n,i.name=`${i.firstName} ${i.lastName}`,o.a.isNil(e.registrationLocation)||(i.registrationLocation=V.fromResource(e.registrationLocation)),i.subjectType=a,i}isMale(){return this.gender.isMale()}isFemale(){return this.gender.isFemale()}static associateRelationship(e,t,n,r){var a=r.findByKey("uuid",L.getUUIDFor(n,"individualAUUID"),Re.schema.name);return a=A.pick(a,["uuid"],["enrolments","encounters","relationships"]),d.addNewChild(e,a.relationships),a}static associateChild(e,t,n,r){if(t===Ae)return Re.associateRelationship(e,t,n,r);var a=r.findByKey("uuid",L.getUUIDFor(n,"individualUUID"),Re.schema.name);if(a=A.pick(a,["uuid"],["enrolments","encounters","relationships"]),t===Ze)d.addNewChild(e,a.enrolments);else{if(t!==Ne)throw`${t.name} not support by ${Re.nameString}`;d.addNewChild(e,a.encounters)}return a}setFirstName(e){this.firstName=e,this.name=this.nameString}setLastName(e){this.lastName=e,this.name=this.nameString}getDisplayAge(e){const t=this.getAgeInYears();if(this.getAgeInMonths()<6){let t=h()().diff(this.dateOfBirth,"weeks");return 0===t?g.inDay(h()().diff(this.dateOfBirth,"days")).toString(e):g.inWeek(t).toString(e)}return t<2?g.inMonth(h()().diff(this.dateOfBirth,"months")).toString(e):g.inYear(t).toString(e)}getAgeAndDateOfBirthDisplay(e){return this.dateOfBirthVerified?`${this.getDisplayAge(e)} (${A.toDisplayDate(this.dateOfBirth)})`:this.getDisplayAge(e)}getAge(e){return e=e||h()(),this.getAgeInYears(e)>0?g.inYear(this.getAgeInYears()):this.getAgeInMonths(e)>0?g.inMonth(e.diff(this.dateOfBirth,"months")):g.inYear(0)}get nameString(){return this.isIndividual()?`${this.firstName} ${this.lastName}`:this.firstName}getAgeIn(e){return(t=h()(),n=!1)=>h()(t).diff(this.dateOfBirth,e,n)}getAgeInMonths(e,t){return this.getAgeIn("months")(e,t)}getAgeInWeeks(e,t){return this.getAgeIn("weeks")(e,t)}getAgeInYears(e,t){return this.getAgeIn("years")(e,t)}toSummaryString(){return`${this.name}, Age: ${this.getAge().toString()}, ${this.gender.name}`}setDateOfBirth(e){this.dateOfBirth=e,this.dateOfBirthVerified=!0}setAge(e,t){this.dateOfBirth=h()().subtract(e,t?"years":"months").toDate(),this.dateOfBirthVerified=!1}validateDateOfBirth(){return o.a.isNil(this.dateOfBirth)?c.failure(Re.validationKeys.DOB,"emptyValidationMessage"):this.getAgeInYears()>120?c.failure(Re.validationKeys.DOB,"ageTooHigh"):this.isRegistrationBeforeDateOfBirth?c.failure(Re.validationKeys.DOB,"registrationBeforeDateOfBirth"):A.dateIsAfterToday(this.dateOfBirth)?c.failure(Re.validationKeys.DOB,"birthDateInFuture"):c.successful(Re.validationKeys.DOB)}get isRegistrationBeforeDateOfBirth(){return!o.a.isNil(this.dateOfBirth)&&!o.a.isNil(this.registrationDate)&&A.dateAIsAfterB(this.dateOfBirth,this.registrationDate)}validateRegistrationDate(){const e=this.validateFieldForEmpty(this.registrationDate,Re.validationKeys.REGISTRATION_DATE);return e.success&&this.isRegistrationBeforeDateOfBirth?c.failure(Re.validationKeys.REGISTRATION_DATE,"registrationBeforeDateOfBirth"):e.success&&A.dateIsAfterToday(this.registrationDate)?c.failure(Re.validationKeys.REGISTRATION_DATE,"registrationDateInFuture"):e}validateFirstName(){return this.validateFieldForEmpty(this.firstName,Re.validationKeys.FIRST_NAME)}validateLastName(){return this.validateFieldForEmpty(this.lastName,Re.validationKeys.LAST_NAME)}validateRegistrationLocation(){return this.validateFieldForNull(this.registrationLocation,Re.validationKeys.REGISTRATION_LOCATION)}validate(){const e=[];return e.push(this.validateRegistrationDate()),e.push(this.validateAddress()),e.push(this.validateFirstName()),this.subjectType.isIndividual()&&(e.push(this.validateLastName()),e.push(this.validateDateOfBirth()),e.push(this.validateGender())),e}validateAddress(){return this.validateFieldForEmpty(o.a.isEmpty(this.lowestAddressLevel)?void 0:this.lowestAddressLevel.name,Re.validationKeys.LOWEST_ADDRESS_LEVEL)}validateGender(){return this.validateFieldForEmpty(o.a.isEmpty(this.gender)?void 0:this.gender.name,Re.validationKeys.GENDER)}isGender(e){return this.gender===e}eligiblePrograms(e){const t=o.a.slice(e);return o.a.remove(t,e=>{return void 0!==o.a.find(this.nonVoidedEnrolments(),t=>t.program.uuid===e.uuid&&t.isActive)}),t}addEncounter(e){o.a.some(this.encounters,t=>t.uuid===e.uuid)||(this.encounters=this.encounters||[],this.encounters.push(e))}nonVoidedEncounters(){return o.a.reject(this.encounters,"voided")}nonVoidedEnrolments(){return this.enrolments.filter(e=>!e.voided)}cloneForEdit(){const e=new Re;return e.uuid=this.uuid,e.subjectType=this.subjectType.clone(),e.name=this.name,e.firstName=this.firstName,e.lastName=this.lastName,e.dateOfBirth=this.dateOfBirth,e.registrationDate=this.registrationDate,e.dateOfBirthVerified=this.dateOfBirthVerified,e.voided=this.voided,e.gender=o.a.isNil(this.gender)?null:this.gender.clone(),e.lowestAddressLevel=o.a.isNil(this.lowestAddressLevel)?null:o.a.assignIn({},this.lowestAddressLevel),e.observations=P.clone(this.observations),e.registrationLocation=o.a.isNil(this.registrationLocation)?null:this.registrationLocation.clone(),e.relationships=this.relationships,e}cloneForReference(){const e=new Re;return e.uuid=this.uuid,e.name=this.name,e.firstName=this.firstName,e.lastName=this.lastName,e.dateOfBirth=this.dateOfBirth,e.gender=o.a.isNil(this.gender)?null:this.gender.clone(),e}get hasActiveEnrolment(){return o.a.some(this.nonVoidedEnrolments(),e=>e.isActive)}get firstActiveOrRecentEnrolment(){return o()(this.nonVoidedEnrolments()).sortBy(["isActive","enrolmentDateTime"]).last()}get hasEnrolments(){return this.nonVoidedEnrolments().length}findEnrolment(e){return o.a.find(this.nonVoidedEnrolments(),t=>t.uuid===e)}addEnrolment(e){o.a.some(this.enrolments,t=>t.uuid===e.uuid)||this.enrolments.push(e)}addRelationship(e){o.a.some(this.relationships,t=>t.uuid===e.uuid)||(this.relationships=o.a.isEmpty(this.relationships)?[]:this.relationships,this.relationships.push(e))}findObservation(e){return o.a.find(this.observations,t=>t.concept.name===e)}getObservationValue(e){const t=this.findObservation(e);return o.a.isEmpty(t)?t:t.getValue()}getRelationships(){return o.a.filter(this.relationships,e=>!e.voided)}getRelative(e,t=!1){return o.a.head(this.getRelatives(e,t))}getRelatives(e,t=!1){return o.a.filter(this.getRelationships(),n=>t?n.relationship.individualAIsToBRelation.name===e:n.relationship.individualBIsToARelation.name===e).map(e=>e.individualB)}getPreviousEnrolment(e,t){const n=this.chronologicalEnrolments;let r=o.a.findIndex(n,e=>e.uuid===t);for(;r>0;)if(n[--r].program.name===e)return n[r];return null}get chronologicalEnrolments(){return o.a.sortBy(this.nonVoidedEnrolments(),e=>e.encounterDateTime)}findMediaObservations(){return W(this.observations)}replaceObservation(e,t){new P(this.observations).updateObservationBasedOnValue(e,t)}isIndividual(){return o.a.isNil(this.subjectType)||this.subjectType.isIndividual()}userProfileSubtext1(e){return this.isIndividual()?e.t(this.gender.name):""}userProfileSubtext2(e){return this.isIndividual()?this.getDisplayAge(e):""}icon(){return this.isIndividual()?"person-pin":"account-balance"}detail1(e){return this.isIndividual()?{label:"Age",value:this.getDisplayAge(e)}:{}}detail2(e){return this.isIndividual()?{label:"Gender",value:e.t(this.gender.name)}:{}}address(e){return this.isIndividual()?{label:"Address",value:e.t(this.lowestAddressLevel.name)}:{}}_getEncounters(e){return o.a.chain(this.nonVoidedEncounters()).filter(t=>!e||o.a.isNil(t.cancelDateTime)).sortBy(e=>h()().diff(e.encounterDateTime))}getEncounters(e){return this._getEncounters(e).value()}scheduledEncounters(){return o.a.filter(this.getEncounters(!0),e=>!e.encounterDateTime&&o.a.isNil(e.cancelDateTime))}scheduledEncountersOfType(e){return this.scheduledEncounters().filter(t=>t.encounterType.name===e)}getAllScheduledVisits(e){return o.a.defaults(this.scheduledEncounters(!0),[]).filter(t=>t.uuid!==e.uuid).map(o.a.identity).map(({uuid:e,name:t,encounterType:n,earliestVisitDateTime:r,maxVisitDateTime:a})=>({name:t,encounterType:n.name,earliestDate:r,maxDate:a,uuid:e}))}toJSON(){return{uuid:this.uuid,firstName:this.firstName,lastName:this.lastName,enrolments:this.enrolments,dateOfBirth:this.dateOfBirth,gender:this.gender,registrationDate:this.registrationDate,lowestAddressLevel:this.lowestAddressLevel,encounters:this.encounters,observations:this.observations,relationships:this.relationships,voided:this.voided,registrationLocation:this.registrationLocation,subjectType:this.subjectType}}}We(Re,"schema",{name:"Individual",primaryKey:"uuid",properties:{uuid:"string",subjectType:"SubjectType",name:"string",firstName:"string",lastName:{type:"string",optional:!0},dateOfBirth:{type:"date",optional:!0},dateOfBirthVerified:{type:"bool",optional:!0},gender:{type:"Gender",optional:!0},registrationDate:"date",lowestAddressLevel:"AddressLevel",voided:{type:"bool",default:!1},enrolments:{type:"list",objectType:"ProgramEnrolment"},encounters:{type:"list",objectType:"Encounter"},observations:{type:"list",objectType:"Observation"},relationships:{type:"list",objectType:"IndividualRelationship"},registrationLocation:{type:"Point",optional:!0}}}),We(Re,"validationKeys",{DOB:"DOB",GENDER:"GENDER",FIRST_NAME:"FIRST_NAME",LAST_NAME:"LAST_NAME",REGISTRATION_DATE:"REGISTRATION_DATE",LOWEST_ADDRESS_LEVEL:"LOWEST_ADDRESS_LEVEL",REGISTRATION_LOCATION:"REGISTRATION_LOCATION"}),We(Re,"nonIndividualValidationKeys",{FIRST_NAME:"FIRST_NAME",REGISTRATION_DATE:"REGISTRATION_DATE",LOWEST_ADDRESS_LEVEL:"LOWEST_ADDRESS_LEVEL",REGISTRATION_LOCATION:"REGISTRATION_LOCATION"}),We(Re,"merge",e=>d.mergeOn(new Map([[Ze,"enrolments"],[Ne,"encounters"],[Ae,"relationships"]]).get(e))),We(Re,"childAssociations",()=>new Map([[Ae,"relationships"],[Ze,"enrolments"],[Ne,"encounters"]]));var Ve=Re;function Ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class ze{static create({uuid:e=A.randomUUID(),observations:t=[],checklist:n,detail:r}){return o.a.assignIn(new ze,{uuid:e,observations:t,checklist:n,detail:r})}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"checklistUUID"),Ge.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"checklistItemDetailUUID"),rt.schema.name),a=A.assignFields(e,new ze,["uuid"],["completionDate"],["observations"],t);return a.checklist=n,a.detail=r,a}get toResource(){const e=o.a.pick(this,["uuid","name"]);return e.completionDate=A.isoFormat(this.completionDate),e.checklistUUID=this.checklist.uuid,e.checklistItemDetailUUID=this.detail.uuid,e.observations=[],this.observations.forEach(t=>{e.observations.push(t.toResource)}),e}clone(){const e=new ze;return e.uuid=this.uuid,e.detail=this.detail,e.completionDate=this.completionDate,e.checklist=this.checklist,e.observations=P.clone(this.observations),e}validate(){return null}get completed(){return!o.a.isNil(this.completionDate)}expired(e){return!o.a.isNil(this.detail.expiresAfter)&&e.isSameOrAfter(this.expiryDate)}get expiryDate(){return o.a.isNil(this.detail.expiresAfter)?null:h()(this.checklist.baseDate).add(this.detail.expiresAfter,"day")}get firstState(){return this.detail.stateConfig.find(e=>1===e.displayOrder)}get _leadingItem(){return this.isDependent?this.checklist.items.find(e=>e.detail.uuid===this.detail.dependentOn.uuid):null}get conceptName(){return this.detail.concept.name}calculateApplicableState(e=h()()){if(this.completed)return{status:Ye.completed,statusDate:this.completionDate};if(this.expired(e))return{status:Ye.expired,statusDate:this.expiryDate};let t=!1,n=null;const r=this._leadingItem;if(!o.a.isNil(r)&&this.scheduleOnExpiryOfDependency){const e=r.calculateApplicableState().status;if(o.a.isNil(e))return{status:null,statusDate:null};t="Expired"===e.state}let a=this.detail.stateConfig.find((a,i)=>{if(this.isDependent){if(r.completed){let t,i;if(t=h.a.max(h()(this.checklist.baseDate).add(this.detail.minDaysFromStartDate,"day").add(a.start,"day"),h()(r.completionDate).add(this.detail.minDaysFromDependent,"day").add(a.start,"day")),i=h.a.max(h()(this.checklist.baseDate).add(this.detail.minDaysFromStartDate,"day").add(a.end,"day"),h()(r.completionDate).add(this.detail.minDaysFromDependent,"day").add(a.end,"day")),e.isBetween(t,i,null,"[]"))return n=t.toDate(),!0}else if(t){const t=h()(this.checklist.baseDate).add(this.detail.minDaysFromStartDate,"day").add(a.start,"day").startOf("day"),r=h()(this.checklist.baseDate).add(this.detail.minDaysFromStartDate,"day").add(a.end,"day").endOf("day");if(e.isBetween(t,r,null,"[]"))return n=t.toDate(),!0}}else{const t=h()(this.checklist.baseDate).add(a.start,"day").startOf("day"),r=h()(this.checklist.baseDate).add(a.end,"day").endOf("day");if(e.isBetween(t,r,null,"[]"))return n=t.toDate(),!0}return!1});return o.a.isNil(a)?{status:null,statusDate:null}:{status:a,statusDate:n}}get isDependent(){return this.detail.isDependent}get scheduleOnExpiryOfDependency(){return this.detail.scheduleOnExpiryOfDependency}get editable(){return!this.detail.voided}setCompletionDate(e=new Date){this.completionDate=e}print(){return`ChecklistItem{uuid=${this.uuid}}`}findObservation(e){return o.a.find(this.observations,t=>t.concept.name===e)}}Ce(ze,"schema",{name:"ChecklistItem",primaryKey:"uuid",properties:{uuid:"string",detail:"ChecklistItemDetail",completionDate:{type:"date",optional:!0},observations:{type:"list",objectType:"Observation"},checklist:"Checklist"}}),Ce(ze,"parentAssociations",()=>new Map([[Ge,"checklistUUID"]]));var Be=ze;function Je(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Ke extends d{static create(){const e=new Ke;return e.uuid=A.randomUUID(),e.items=[],e}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"programEnrolmentUUID"),Ze.schema.name),r=A.assignFields(e,new Ke,["uuid"],["baseDate"]),a=t.findByKey("uuid",L.getUUIDFor(e,"checklistDetailUUID"),st.schema.name);return r.programEnrolment=n,r.detail=a,r}get toResource(){const e=o.a.pick(this,["uuid"]);return e.baseDate=A.isoFormat(this.baseDate),e.programEnrolmentUUID=this.programEnrolment.uuid,e.checklistDetailUUID=this.detail.uuid,e}static associateChild(e,t,n,r){var a=r.findByKey("uuid",L.getUUIDFor(n,"checklistUUID"),Ke.schema.name);if(a=A.pick(a,["uuid"],["items"]),t!==Be)throw`${t.name} not support by ${Ke.name}`;return d.addNewChild(e,a.items),a}clone(){const e=new Ke;return e.uuid=this.uuid,e.programEnrolment=this.programEnrolment,e.baseDate=this.baseDate,e.detail=this.detail,e.items=o.a.map(this.items,e=>e.clone()),e}setCompletionDate(e,t){this.getChecklistItem(e).completionDate=t}addItem(e){this.items.push(e)}print(){return`Checklist{\n        uuid=${this.uuid},\n        detail=${this.detail.print()},\n        baseDate=${A.isoFormat(this.baseDate)},\n        items=[${o.a.map(this.items,e=>e.print())}],\n        programEnrolment=${this.programEnrolment.print()}\n        }`}}Je(Ke,"schema",{name:"Checklist",primaryKey:"uuid",properties:{uuid:"string",detail:"ChecklistDetail",baseDate:"date",items:{type:"list",objectType:"ChecklistItem"},programEnrolment:"ProgramEnrolment"}}),Je(Ke,"parentAssociations",()=>new Map([[Ze,"programEnrolmentUUID"],[st,"checklistDetailUUID"]])),Je(Ke,"childAssociations",()=>new Map([[Be,"items"]])),Je(Ke,"merge",()=>d.mergeOn("items"));var Ge=Ke;function $e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class qe extends d{static createEmptyInstance({individual:e,program:t}={}){const n=new qe;return n.uuid=A.randomUUID(),n.enrolmentDateTime=new Date,n.observations=[],n.programExitObservations=[],n.encounters=[],n.checklists=[],n.individual=e?e.cloneForEdit():Ve.createEmptyInstance(),n.voided=!1,n.program=t,P.convertObsForSave(n.individual.observations),n}get toResource(){const e=o.a.pick(this,["uuid","voided"]);return e.programUUID=this.program.uuid,e.enrolmentDateTime=A.isoFormat(this.enrolmentDateTime),e.programExitDateTime=A.isoFormat(this.programExitDateTime),e.programOutcomeUUID=o.a.isNil(this.programOutcome)?null:this.programOutcome.uuid,e.individualUUID=this.individual.uuid,o.a.isNil(this.checklist)||(e.checklistUUID=this.checklist.uuid),e.observations=[],this.observations.forEach(t=>{e.observations.push(t.toResource)}),o.a.isNil(this.enrolmentLocation)||(e.enrolmentLocation=this.enrolmentLocation.toResource),o.a.isNil(this.exitLocation)||(e.exitLocation=this.exitLocation.toResource),e.programExitObservations=[],this.programExitObservations.forEach(t=>{e.programExitObservations.push(t.toResource)}),e}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"programUUID"),pe.schema.name),r=L.getUUIDFor(e,"programOutcomeUUID"),a=t.findByKey("uuid",L.getUUIDFor(e,"individualUUID"),Ve.schema.name),i=A.assignFields(e,new qe,["uuid","voided"],["enrolmentDateTime","programExitDateTime"],["observations","programExitObservations"],t);return i.program=n,i.individual=a,o.a.isNil(r)||(i.programOutcome=t.findByKey("uuid",r,Te.schema.name)),o.a.isNil(e.enrolmentLocation)||(i.enrolmentLocation=V.fromResource(e.enrolmentLocation)),o.a.isNil(e.exitLocation)||(i.exitLocation=V.fromResource(e.exitLocation)),i}static associateChild(e,t,n,r){var a=r.findByKey("uuid",L.getUUIDFor(n,"programEnrolmentUUID"),qe.schema.name);if(a=A.pick(a,["uuid"],["encounters","checklists"]),t===et)d.addNewChild(e,a.encounters);else{if(t!==Ge)throw`${t.name} not support by ${qe.name}`;d.addNewChild(e,a.checklists)}return a}nonVoidedEncounters(){return this.encounters.filter(e=>!e.voided)}getChecklists(){return o.a.isEmpty(this.checklists)?[]:this.checklists}cloneForEdit(){const e=new qe;return e.uuid=this.uuid,e.program=o.a.isNil(this.program)?null:this.program.clone(),e.enrolmentDateTime=this.enrolmentDateTime,e.programExitDateTime=this.programExitDateTime,e.programOutcome=o.a.isNil(this.programOutcome)?null:this.programOutcome.clone(),e.individual=this.individual,e.observations=P.clone(this.observations),e.programExitObservations=P.clone(this.programExitObservations),e.encounters=this.encounters,e.checklists=o.a.map(this.checklists,e=>e.clone()),e.enrolmentLocation=o.a.isNil(this.enrolmentLocation)?null:this.enrolmentLocation.clone(),e.exitLocation=o.a.isNil(this.exitLocation)?null:this.exitLocation.clone(),e.voided=this.voided,e}validateEnrolment(){const e=[];return e.push(this.validateFieldForEmpty(this.enrolmentDateTime,qe.validationKeys.ENROLMENT_DATE)),!o.a.isNil(this.enrolmentDateTime)&&A.dateAIsBeforeB(this.enrolmentDateTime,this.individual.registrationDate)&&e.push(new c(!1,qe.validationKeys.ENROLMENT_DATE,"enrolmentDateBeforeRegistrationDate")),!o.a.isNil(this.enrolmentDateTime)&&A.dateIsAfterToday(this.enrolmentDateTime)&&e.push(new c(!1,qe.validationKeys.ENROLMENT_DATE,"enrolmentDateInFuture")),e}validateExit(){const e=[];return e.push(this.validateFieldForEmpty(this.programExitDateTime,qe.validationKeys.EXIT_DATE)),!o.a.isNil(this.programExitDateTime)&&A.dateAIsBeforeB(this.programExitDateTime,this.enrolmentDateTime)&&e.push(new c(!1,qe.validationKeys.EXIT_DATE,"exitDateBeforeEnrolmentDate")),!o.a.isNil(this.programExitDateTime)&&A.dateIsAfterToday(this.programExitDateTime)&&e.push(new c(!1,qe.validationKeys.EXIT_DATE,"exitDateInFuture")),e}lastFulfilledEncounter(...e){return o.a.chain(this.nonVoidedEncounters()).filter(t=>o.a.isEmpty(e)?t:o.a.some(e,e=>e===o.a.get(t,"encounterType.name"))).filter(e=>e.encounterDateTime).maxBy(e=>e.encounterDateTime).value()}getObservationsForConceptName(e){return o.a.chain(this.getEncounters(!0)).map(t=>({encounterDateTime:t.encounterDateTime,obs:t.findObservation(e)})).filter(e=>e.obs).map(e=>({encounterDateTime:e.encounterDateTime,obs:e.obs.getValue()})).value()}get isActive(){return o.a.isNil(this.programExitDateTime)}addEncounter(e){o.a.some(this.encounters,t=>t.uuid===e.uuid)||this.encounters.push(e)}addEncounters(...e){o.a.each(e,e=>this.addEncounter(e))}get hasChecklist(){return 0!==this.checklists.length}_getEncounters(e){return o.a.chain(this.nonVoidedEncounters()).filter(t=>!e||o.a.isNil(t.cancelDateTime)).sortBy(e=>h()().diff(e.encounterDateTime))}getEncounters(e){return this._getEncounters(e).value()}getEncountersOfType(e,t){return this.getEncounters(t).filter(t=>t.encounterType.name===e)}allEncounterTypes(){return o.a.uniqBy(o.a.map(this.encounters,e=>e.encounterType),"uuid")}findObservationValueInEntireEnrolment(e,t){let n=o.a.reverse(this.getEncounters(!0)),r=this._findObservationWithDateFromEntireEnrolment(e,n,t);return o.a.isNil(r.observation)&&(r={observation:this.findObservation(e),date:this.enrolmentDateTime}),o.a.isNil(r.observation)?void 0:{value:r.observation.getReadableValue(),date:r.date}}findObservationInEntireEnrolment(e,t,n=!1){let r=o.a.chain(this.getEncounters()).filter(e=>!t||e.uuid!==t.uuid).concat(t).compact().sortBy(e=>e.encounterDateTime).value();return r=n?o.a.reverse(r):r,this._findObservationFromEntireEnrolment(e,r,!0)}observationExistsInEntireEnrolment(e,t){return!o.a.isEmpty(this.findObservationInEntireEnrolment(e,t))}findLatestObservationInEntireEnrolment(e,t){return this.findObservationInEntireEnrolment(e,t,!0)}findLatestObservationFromEncounters(e,t,n=!1){const r=o.a.chain(this.getEncounters()).filter(e=>e.encounterDateTime).filter(e=>!t||e.encounterDateTime<t.encounterDateTime).value(),a=o.a.chain(t).concat(r).compact().value();return this._findObservationFromEntireEnrolment(e,a,n)}findLatestObservationFromPreviousEncounters(e,t){const n=o.a.chain(this.getEncounters()).filter(e=>e.encounterDateTime).filter(e=>e.encounterDateTime<t.encounterDateTime).value();return this._findObservationFromEntireEnrolment(e,n,!1)}findLatestPreviousEncounterWithValueForConcept(e,t,n){const r=o.a.chain(this.getEncounters()).filter(e=>e.encounterDateTime).filter(t=>t.encounterDateTime<e.encounterDateTime).value();for(let e=0;e<r.length;e++)if(this._encounterContainsAnswerConceptName(r[e],t,n))return r[e];return null}_encounterHasObsForConcept(e,t){const n=e.getObservationValue(t);return!o.a.isNil(n)}findLatestPreviousEncounterWithObservationForConcept(e,t){const n=o.a.chain(this.getEncounters()).filter(e=>e.encounterDateTime).filter(t=>t.encounterDateTime<e.encounterDateTime).value();for(let e=0;e<n.length;e++)if(this._encounterHasObsForConcept(n[e],t))return n[e];return null}findLastEncounterOfType(e,t=[]){return this.findNthLastEncounterOfType(e,t,0)}findNthLastEncounterOfType(e,t=[],n=0){return o.a.chain(this.getEncounters()).filter(e=>e.encounterDateTime).filter(t=>t.encounterDateTime<e.encounterDateTime).filter(e=>t.some(t=>t===e.encounterType.name)).nth(n).value()}_encounterContainsAnswerConceptName(e,t,n){let r=e.findObservation(t);return!o.a.isNil(r)&&this._containsAnswerConceptName(n,r)}_containsAnswerConceptName(e,t){const n=t.concept.getPossibleAnswerConcept(e),r=n&&n.concept.uuid;return t.getValueWrapper().hasValue(r)}_findObservationFromEntireEnrolment(e,t,n=!0){return this._findObservationWithDateFromEntireEnrolment(e,t,n).observation}_findObservationWithDateFromEntireEnrolment(e,t,n=!0){let r,a;for(let n=0;n<t.length;n++)if(a=t[n],r=t[n].findObservation(e),!o.a.isNil(r))return{observation:r,date:a.encounterDateTime};return n?{observation:this.findObservation(e),date:this.enrolmentDateTime}:{}}getObservationReadableValueInEntireEnrolment(e,t){let n=this.findObservationInEntireEnrolment(e,t);return n?n.getReadableValue():void 0}findObservation(e){return o.a.find(this.observations,t=>t.concept.name===e)}findExitObservation(e){return o.a.find(this.programExitObservations,t=>t.concept.name===e)}addChecklist(e){this.checklists=this.getChecklists().filter(t=>t.uuid!==e.uuid).concat([e])}scheduledEncounters(){return o.a.filter(this.getEncounters(!0),e=>!e.encounterDateTime&&o.a.isNil(e.cancelDateTime))}scheduledEncountersOfType(e){return this.scheduledEncounters().filter(t=>t.encounterType.name===e)}getAllScheduledVisits(e){return o.a.defaults(this.scheduledEncounters(!0),[]).filter(t=>t.uuid!==e.uuid).map(o.a.identity).map(({uuid:e,name:t,encounterType:n,earliestVisitDateTime:r,maxVisitDateTime:a})=>({name:t,encounterType:n.name,earliestDate:r,maxDate:a,uuid:e}))}addObservation(e){this.observations.push(e)}findEncounter(e,t){return this.nonVoidedEncounters().find(function(n){return n.encounterType.name===e&&n.name===t})}numberOfEncountersOfType(e){return o.a.countBy(this.nonVoidedEncounters(),t=>t.encounterType.name===e).true}hasEncounter(e,t){return!o.a.isNil(this.findEncounter(e,t))}hasCompletedEncounterOfType(e){return o.a.some(this.nonVoidedEncounters(),t=>t.encounterType.name===e&&!o.a.isNil(t.encounterDateTime))}hasEncounterOfType(e){return!o.a.isNil(this.nonVoidedEncounters().find(t=>t.encounterType.name===e))}hasAnyOfEncounterTypes(e=[]){return e.some(e=>this.hasEncounterOfType(e))}hasEncounterWithObservationValueAfterDate(e,t,n,r){const a=o()(this.getEncounters()).filter(e=>h()(e.encounterDateTime).isAfter(t)).filter(t=>t.encounterType.name===e).find(e=>e.getObservationReadableValue(n)===r);return!o.a.isNil(a)}getObservationValue(e){const t=this.findObservation(e);return o.a.isEmpty(t)?void 0:t.getValue()}getObservationReadableValue(e){const t=this.findObservation(e);return o.a.isNil(t)?void 0:t.getReadableValue()}hasObservation(e){return!o.a.isNil(this.getObservationValue(e))}findMediaObservations(){return W(P.clone(this.observations),P.clone(this.programExitObservations))}replaceObservation(e,t){new P(this.observations).updateObservationBasedOnValue(e,t),new P(this.programExitObservations).updateObservationBasedOnValue(e,t)}toJSON(){return{uuid:this.uuid,program:this.program,enrolmentDateTime:this.enrolmentDateTime,observations:this.observations,programExitDateTime:this.programExitDateTime,programExitObservations:this.programExitObservations,programOutcome:{type:"ProgramOutcome",optional:!0},encounters:this.encounters,checklists:this.checklists,individualUUID:this.individual.uuid,voided:this.voided}}}$e(qe,"schema",{name:"ProgramEnrolment",primaryKey:"uuid",properties:{uuid:"string",program:"Program",enrolmentDateTime:"date",observations:{type:"list",objectType:"Observation"},programExitDateTime:{type:"date",optional:!0},programExitObservations:{type:"list",objectType:"Observation"},programOutcome:{type:"ProgramOutcome",optional:!0},encounters:{type:"list",objectType:"ProgramEncounter"},checklists:{type:"list",objectType:"Checklist"},individual:"Individual",enrolmentLocation:{type:"Point",optional:!0},exitLocation:{type:"Point",optional:!0},voided:{type:"bool",default:!1}}}),$e(qe,"parentAssociations",()=>new Map([[Ve,"individualUUID"]])),$e(qe,"childAssociations",()=>new Map([[et,"encounters"],[Ge,"checklists"]])),$e(qe,"merge",e=>d.mergeOn(new Map([[et,"encounters"],[Ge,"checklists"]]).get(e))),$e(qe,"validationKeys",{ENROLMENT_DATE:"ENROLMENT_DATE",EXIT_DATE:"EXIT_DATE",ENROLMENT_LOCATION:"ENROLMENT_LOCATION",EXIT_LOCATION:"EXIT_LOCATION"});var Ze=qe;function Qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Xe extends z{static fromResource(e,t){const n=z.fromResource(e,t);return n.programEnrolment=t.findByKey("uuid",L.getUUIDFor(e,"programEnrolmentUUID"),Ze.schema.name),n}get toResource(){const e=super.toResource;return e.programEnrolmentUUID=this.programEnrolment.uuid,e}cloneForEdit(){const e=super.cloneForEdit();return e.programEnrolment=this.programEnrolment,e}validate(){const e=super.validate();return o.a.isNil(this.encounterDateTime)||!A.dateAIsBeforeB(this.encounterDateTime,this.programEnrolment.enrolmentDateTime)&&!A.dateAIsAfterB(this.encounterDateTime,this.programEnrolment.programExitDateTime)||e.push(new c(!1,z.fieldKeys.ENCOUNTER_DATE_TIME,"encounterDateNotInBetweenEnrolmentAndExitDate")),!o.a.isNil(this.encounterDateTime)&&A.dateIsAfterToday(this.encounterDateTime)&&e.push(new c(!1,z.fieldKeys.ENCOUNTER_DATE_TIME,"encounterDateInFuture")),e}static createScheduled(e,t){const n=Xe.createEmptyInstance();return n.encounterType=e,n.programEnrolment=t,n.encounterDateTime=null,n}getAllScheduledVisits(){return this.programEnrolment.getAllScheduledVisits(this)}getName(){return"ProgramEncounter"}findObservationInEntireEnrolment(e){return this.programEnrolment.findObservationInEntireEnrolment(e)}findLatestObservationInEntireEnrolment(e,t){return this.programEnrolment.findLatestObservationInEntireEnrolment(e,t)}observationExistsInEntireEnrolment(e){return!o.a.isNil(this.programEnrolment.findObservationInEntireEnrolment(e))}get individual(){return this.programEnrolment.individual}toJSON(){return{uuid:this.uuid,name:this.name,encounterType:this.encounterType,earliestVisitDateTime:this.earliestVisitDateTime,maxVisitDateTime:this.maxVisitDateTime,encounterDateTime:this.encounterDateTime,programEnrolmentUUID:this.programEnrolment.uuid,observations:this.observations,voided:this.voided}}}Qe(Xe,"fieldKeys",{SCHEDULED_DATE_TIME:"SCHEDULED_DATE_TIME",MAX_DATE_TIME:"MAX_DATE_TIME"}),Qe(Xe,"validationKeys",{ENCOUNTER_LOCATION:"ENCOUNTER_LOCATION",CANCEL_LOCATION:"CANCEL_LOCATION"}),Qe(Xe,"schema",{name:"ProgramEncounter",primaryKey:"uuid",properties:{uuid:"string",name:{type:"string",optional:!0},encounterType:"EncounterType",earliestVisitDateTime:{type:"date",optional:!0},maxVisitDateTime:{type:"date",optional:!0},encounterDateTime:{type:"date",optional:!0},programEnrolment:"ProgramEnrolment",observations:{type:"list",objectType:"Observation"},cancelDateTime:{type:"date",optional:!0},cancelObservations:{type:"list",objectType:"Observation"},encounterLocation:{type:"Point",optional:!0},cancelLocation:{type:"Point",optional:!0},voided:{type:"bool",default:!1}}}),Qe(Xe,"parentAssociations",()=>new Map([[Ze,"programEnrolmentUUID"]]));var et=Xe;function tt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class nt extends d{static fromResource(e,t,n){const r=t.findByKey("uuid",L.getUUIDFor(e,"checklistDetailUUID"),st.schema.name),a=t.findByKey("uuid",L.getUUIDFor(e,"formUUID"),_e.schema.name),i=t.findByKey("uuid",L.getUUIDFor(e,"conceptUUID"),E.schema.name),s=A.assignFields(e,new nt,["uuid","voided","scheduleOnExpiryOfDependency","minDaysFromStartDate","minDaysFromDependent","expiresAfter"]);s.stateConfig=o.a.get(e,"checklistItemStatus",[]).map(e=>Ye.fromResource(e,t)),s.checklistDetail=r,s.form=a,s.concept=i;const u=L.getUUIDFor(e,"leadDetailUUID");if(!o.a.isNil(u)){const e=t.findByKey("uuid",u,nt.schema.name);if(o.a.isNil(e)){let e=n.find(e=>e.uuid===u);s.dependentOn=nt.fromResource(e,t,n)}else s.dependentOn=e}return s}get isDependent(){return!o.a.isNil(this.dependentOn)}}tt(nt,"schema",{name:"ChecklistItemDetail",primaryKey:"uuid",properties:{uuid:"string",concept:"Concept",stateConfig:{type:"list",objectType:"ChecklistItemStatus"},form:{type:"Form",optional:!0},checklistDetail:"ChecklistDetail",voided:{type:"bool",default:!1},dependentOn:{type:"ChecklistItemDetail",optional:!0},scheduleOnExpiryOfDependency:{type:"bool",default:!1},minDaysFromStartDate:{type:"int",optional:!0},minDaysFromDependent:{type:"int",optional:!0},expiresAfter:{type:"int",optional:!0}}}),tt(nt,"parentAssociations",()=>new Map([[st,"checklistDetailUUID"],[_e,"formUUID"],[E,"conceptUUID"],[nt,"leadDetailUUID"]]));var rt=nt;function at(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class it extends d{static fromResource(e,t){return A.assignFields(e,new it,["uuid","name","voided"])}static associateChild(e,t,n,r){let a=r.findByKey("uuid",L.getUUIDFor(n,"checklistDetailUUID"),it.schema.name);if(a=A.pick(a,["uuid"],["items"]),t!==rt)throw`${t.name} not support by ${it.name}`;return d.addNewChild(e,a.items),a}print(){return`ChecklistDetail{\n            uuid=${this.uuid},\n            name=${this.name},\n            items=${this.items}\n        }`}}at(it,"schema",{name:"ChecklistDetail",primaryKey:"uuid",properties:{uuid:"string",name:"string",items:{type:"list",objectType:"ChecklistItemDetail"},voided:{type:"bool",default:!1}}}),at(it,"childAssociations",()=>new Map([[rt,"items"]])),at(it,"merge",()=>d.mergeOn("items"));var st=it;class ot{static create(e,t){const n=new ot;return n.fileName=e.toLowerCase(),n.contents=t,n}toString(){return this.fileName}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(ot,"schema",{name:"ConfigFile",primaryKey:"fileName",properties:{fileName:"string",contents:"string"}});var ut=ot;class dt{static newInstance(e,t,n){return{name:e,code:t,value:n}}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(dt,"schema",{name:"Decision",properties:{name:"string",code:"string",value:"string"}});var lt=dt;class ct{constructor(e){this.validationResults=e?o.a.flatten([e]):[]}addOrReplace(e){o.a.remove(this.validationResults,t=>t===this.resultFor(e.formIdentifier)),this.validationResults.push(e)}hasValidationError(){return o.a.some(this.validationResults,e=>!e.success)}hasNoValidationError(){return!this.hasValidationError()}resultFor(e){return o.a.find(this.validationResults,t=>t.formIdentifier===e)}clone(){const e=o.a.map(this.validationResults,e=>c.clone(e));return new ct(e)}}var _t=ct;function mt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class ht{clone(){const e=new ht;return e.uuid=this.uuid,e.serverURL=this.serverURL,e.locale=this.locale,e.logLevel=this.logLevel,e.poolId=this.poolId,e.clientId=this.clientId,e.pageSize=this.pageSize,e.devSkipValidation=this.devSkipValidation,e.captureLocation=this.captureLocation,e}validate(){let e=new _t([c.successful("serverURL"),c.successful("locale"),c.successful("logLevel")]);return o.a.isEmpty(this.serverURL)&&e.addOrReplace(c.failureForEmpty("serverURL")),o.a.isEmpty(this.locale)&&e.addOrReplace(c.failureForEmpty("locale")),A.isNumeric(this.logLevel)||e.addOrReplace(c.failureForNumeric("logLevel")),e}}mt(ht,"UUID","2aa81079-38c3-4d9f-8380-f50544b32b3d"),mt(ht,"schema",{name:"Settings",primaryKey:"uuid",properties:{uuid:"string",serverURL:"string",locale:{type:"LocaleMapping"},logLevel:"int",pageSize:"int",poolId:"string",clientId:"string",devSkipValidation:{type:"bool",default:!1},captureLocation:{type:"bool",default:!0}}});var ft=ht;class pt{}function yt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(pt,"schema",{name:"LocaleMapping",primaryKey:"uuid",properties:{uuid:"string",locale:"string",displayText:"string"}});class Mt extends d{static createEmptyInstance(){const e=new Mt;return e.uuid=A.randomUUID(),e.registrationDate=new Date,e.lowestAddressLevel=q.create({uuid:"",title:"",level:0,typeString:""}),e.headOfFamily=Ve.createEmptyInstance(),e.members=[],e.observations=[],e}get toResource(){const e=o.a.pick(this,["uuid","firstName","lastName","dateOfBirthVerified"]);return e.dateOfBirth=h()(this.dateOfBirth).format("YYYY-MM-DD"),e.registrationDate=h()(this.registrationDate).format("YYYY-MM-DD"),e.genderUUID=this.gender.uuid,e.addressLevelUUID=this.lowestAddressLevel.uuid,e.observations=[],this.observations.forEach(t=>{e.observations.push(t.toResource)}),e}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"addressUUID"),q.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"genderUUID"),be.schema.name),a=A.assignFields(e,new Ve,["uuid","firstName","lastName","dateOfBirthVerified"],["dateOfBirth","registrationDate"],["observations"],t);return a.gender=r,a.lowestAddressLevel=n,a.name=`${a.firstName} ${a.lastName}`,a}static associateChild(e,t,n,r){var a=r.findByKey("uuid",L.getUUIDFor(n,"individualUUID"),Ve.schema.name);if(a=A.pick(a,["uuid"],["enrolments","encounters"]),t===Ze)d.addNewChild(e,a.enrolments);else{if(t!==Ne)throw`${t.name} not support by ${Ve.nameString}`;d.addNewChild(e,a.encounters)}return a}setHeadOfFamily(e){this.headOfFamily=e}validateHeadOfFamily(){return this.validateFieldForEmpty(this.headOfFamily.name,Mt.validationKeys.HEAD_OF_FAMILY)}validateRegistrationDate(){return this.validateFieldForEmpty(this.registrationDate,Mt.validationKeys.REGISTRATION_DATE)}validateAddress(){return this.validateFieldForEmpty(o.a.isEmpty(this.lowestAddressLevel)?void 0:this.lowestAddressLevel.name,Mt.validationKeys.LOWEST_ADDRESS_LEVEL)}validateTypeOfFamily(){return this.validateFieldForEmpty(this.typeOfFamily,Mt.validationKeys.TYPE_OF_FAMILY)}validateHouseNumber(){return this.validateFieldForEmpty(this.householdNumber,Mt.validationKeys.HOUSEHOLD_NUMBER)}validate(){const e=[];return e.push(this.validateRegistrationDate()),e.push(this.validateAddress()),e.push(this.validateHeadOfFamily()),e.push(this.validateTypeOfFamily()),e.push(this.validateHouseNumber()),e}cloneForEdit(){const e=new Mt;return e.uuid=this.uuid,e.registrationDate=this.registrationDate,e.headOfFamily=this.headOfFamily.cloneForReference(),e.typeOfFamily=this.typeOfFamily,e.householdNumber=this.householdNumber,e.members=this.members,e.lowestAddressLevel=o.a.isNil(this.lowestAddressLevel)?null:this.lowestAddressLevel.cloneForReference(),e.observations=P.clone(this.observations),e}findObservation(e){return o.a.find(this.observations,t=>t.concept.name===e)}getObservationValue(e){const t=this.findObservation(e);return o.a.isEmpty(t)?t:t.getValue()}}yt(Mt,"schema",{name:"Family",primaryKey:"uuid",properties:{uuid:"string",registrationDate:"date",lowestAddressLevel:"AddressLevel",headOfFamily:"Individual",typeOfFamily:"string",householdNumber:"string",members:{type:"list",objectType:"Individual"},observations:{type:"list",objectType:"Observation"}}}),yt(Mt,"validationKeys",{HEAD_OF_FAMILY:"HEAD_OF_FAMILY",TYPE_OF_FAMILY:"TYPE_OF_FAMILY",HOUSEHOLD_NUMBER:"HOUSEHOLD_NUMBER",REGISTRATION_DATE:"REGISTRATION_DATE",LOWEST_ADDRESS_LEVEL:"LOWEST_ADDRESS_LEVEL"}),yt(Mt,"childAssociations",()=>new Map([[Ze,"enrolments"],[Ne,"encounters"]])),yt(Mt,"merge",e=>d.mergeOn(new Map([[Ze,"enrolments"],[Ne,"encounters"]]).get(e)));var gt=Mt;class Lt{}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Lt,"schema",{name:"UserDefinedIndividualProperty",properties:{name:"string",value:"string",unit:{type:"string",optional:!0}}});var vt=Lt;function Yt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Dt{static create(e,t,n){var r=new Dt;return r.uuid=n,r.entityName=e,r.loadedSince=t,r}}Yt(Dt,"REALLY_OLD_DATE",new Date("1900-01-01")),Yt(Dt,"schema",{name:"EntitySyncStatus",primaryKey:"uuid",properties:{uuid:"string",entityName:"string",loadedSince:"date"}});var Tt=Dt;class kt{static create(e,t,n=new Date){var r=new kt;return r.entityUUID=e.uuid,r.entity=t,r.savedAt=n,r}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(kt,"schema",{name:"EntityQueue",properties:{savedAt:"date",entityUUID:"string",entity:"string"}});var bt=kt;function wt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class St{static create(e,t,n,r){let a=new St;return a.uuid=e,a.form=t,a.entityUUID=n,a.observationsTypeEntityUUID=r,a}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"formUUID"),_e.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"subjectTypeUUID"),Pe.schema.name),a=A.assignFields(e,new St,["uuid","voided"]);return a.entityUUID=L.getUUIDFor(e,"entityUUID"),a.observationsTypeEntityUUID=L.getUUIDFor(e,"observationsTypeEntityUUID"),a.form=n,a.subjectType=r,a}}wt(St,"schema",{name:"FormMapping",primaryKey:"uuid",properties:{uuid:"string",form:"Form",subjectType:"SubjectType",entityUUID:{type:"string",optional:!0},observationsTypeEntityUUID:{type:"string",optional:!0},voided:{type:"bool",default:!1}}}),wt(St,"parentAssociations",()=>new Map([[_e,"formUUID"],[Pe,"subjectTypeUUID"]]));var Et=St;function Ot(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class jt{static fromResource(e){let t=new jt;return t.username=e.username,t.uuid=jt.UUID,t.organisationName=e.organisationName,t.settings=o.a.isNil(e.settings)?jt.DEFAULT_SETTINGS:JSON.stringify(e.settings),t}setSettings(e){this.settings=JSON.stringify(e)}getSettings(){return JSON.parse(this.settings)}get toResource(){const e=o.a.pick(this,["uuid"]);return e.settings=this.getSettings(),e}clone(){let e=new jt;return e.username=this.username,e.uuid=this.uuid,e.organisationName=this.organisationName,e.settings=this.settings,e}static createEmptyInstance(){const e=new jt;return e.settings=jt.DEFAULT_SETTINGS,e}}Ot(jt,"UUID","ce9ad8ee-193e-49ee-8626-49802c8b4bd7"),Ot(jt,"DEFAULT_SETTINGS",'{"trackLocation": false, "locale": "en"}'),Ot(jt,"schema",{name:"UserInfo",primaryKey:"uuid",properties:{uuid:"string",username:"string",organisationName:"string",settings:"string"}});var Ht=jt;function xt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class At extends I{static fromResource(e,t){const n=A.assignFields(e,new At,["uuid"]);n.visitSchedule=o.a.get(e,"visitSchedule",[]).map(e=>Le.fromResource(e,t)),n.program=t.findByUUID(L.getUUIDFor(e,"programUUID"),pe.schema.name);const r=L.getUUIDFor(e,"conceptUUIDs").split(",");return n.atRiskConcepts=r.map(e=>t.findByUUID(e,E.schema.name)),n}clone(){return super.clone(new At)}}xt(At,"schema",{name:"ProgramConfig",primaryKey:"uuid",properties:{uuid:"string",program:"Program",atRiskConcepts:{type:"list",objectType:"Concept"},visitSchedule:{type:"list",objectType:"VisitScheduleConfig"}}}),xt(At,"parentAssociations",()=>new Map([]));var It=At;function Ft(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Nt{static createEmptyInstance(){return new Nt}static fromResource(e,t){const n=t.findByKey("uuid",L.getUUIDFor(e,"relationUUID"),Se.schema.name),r=t.findByKey("uuid",L.getUUIDFor(e,"genderUUID"),be.schema.name),a=A.assignFields(e,new Nt,["uuid","voided"]);return a.relation=n,a.gender=r,a}}Ft(Nt,"schema",{name:"IndividualRelationGenderMapping",primaryKey:"uuid",properties:{uuid:"string",relation:"IndividualRelation",gender:"Gender",voided:{type:"bool",default:!1}}}),Ft(Nt,"parentAssociations",()=>new Map([[Se,"relationUUID"],[be,"genderUUID"]]));var Ut=Nt;function Pt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Wt extends I{static fromResource(e,t){const n=A.assignFields(e,new Wt,["uuid","name","type","fnName","executionOrder","entity"]);return n.data=JSON.stringify(e.data),n.voided=!!e.voided,n}get entity(){return JSON.parse(this._entityString||"{}")}set entity(e){this._entityString=JSON.stringify(e||{})}clone(){return super.clone(new Wt)}}Pt(Wt,"schema",{name:"Rule",primaryKey:"uuid",properties:{uuid:"string",_entityString:"string",type:"string",name:"string",fnName:"string",executionOrder:"double",voided:{type:"bool",default:!1},data:{type:"string",optional:!0}}}),Pt(Wt,"types",{Decision:"Decision",VisitSchedule:"VisitSchedule",ViewFilter:"ViewFilter",Checklists:"Checklists",Validation:"Validation",EnrolmentSummary:"EnrolmentSummary"});var Rt=Wt;function Vt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Ct extends I{static fromResource(e,t){return A.assignFields(e,new Ct,["uuid","code"])}static getCode(e){return _.isEmpty(e)?Ct.noop:e.code}clone(){return super.clone(new Ct)}}Vt(Ct,"noop","{}"),Vt(Ct,"schema",{name:"RuleDependency",primaryKey:"uuid",properties:{uuid:"string",code:"string"}});var zt=Ct;class Bt extends d{static create({uuid:e,title:t,filePath:n,description:r,duration:a}){return o.a.assignIn(new Bt,{uuid:e,title:t,filePath:n,description:r,duration:a})}static fromResource(e){return Bt.create(o.a.assignIn({},e,{voided:!!e.voided}))}cloneForReference(){return Bt.create(o.a.assignIn({},this))}get translatedFieldValue(){return this.title}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Bt,"schema",{name:"Video",primaryKey:"uuid",properties:{uuid:"string",title:"string",filePath:"string",description:{type:"string",optional:!0},duration:{type:"double",optional:!0},voided:{type:"bool",default:!1}}});var Jt=Bt;class Kt extends d{static create(e={}){const{uuid:t=A.randomUUID()}=e;return o.a.assignIn(new Kt,o.a.pick(e,["uuid","video","playerOpenTime","playerCloseTime","videoStartTime","videoEndTime"]),{uuid:t})}static fromResource(){return A.logWarn("This should never be called. The server should always return empty array.\nSo, no need to create realm entities."),Kt.create({})}cloneForReference(){return Kt.create(o.a.assignIn({},this))}setPlayerOpenTime(){this.playerOpenTime=h()().toDate()}setPlayerCloseTime(){this.playerCloseTime=h()().toDate()}setOnceVideoStartTime(e){o.a.isNil(this.videoStartTime)&&(this.videoStartTime=this._roundToNearestPoint5(e))}setVideoEndTime(e){this.videoEndTime=this._roundToNearestPoint5(e)}get toResource(){const e=o.a.pick(this,["uuid","videoStartTime","videoEndTime"]);return e.playerOpenTime=A.isoFormat(this.playerOpenTime),e.playerCloseTime=A.isoFormat(this.playerCloseTime),e.videoUUID=this.video.uuid,e}_roundToNearestPoint5(e){return Math.round(2*e)/2}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Kt,"schema",{name:"VideoTelemetric",primaryKey:"uuid",properties:{uuid:"string",video:"Video",playerOpenTime:"date",playerCloseTime:"date",videoStartTime:"double",videoEndTime:"double"}});var Gt=Kt;class $t{static create(e,t,n,r,a=A.randomUUID()){var i=new $t;return i.entityUUID=e,i.uuid=a,i.entityName=t,i.fileName=n,i.type=r,i}clone(){const e=new $t;return e.uuid=this.uuid,e.entityUUID=this.entityUUID,e.entityName=this.entityName,e.fileName=this.fileName,e.type=this.type,e}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}($t,"schema",{name:"MediaQueue",primaryKey:"uuid",properties:{uuid:"string",entityUUID:"string",entityName:"string",fileName:"string",type:"string"}});var qt=$t;class Zt extends d{static fromResource(){throw new Error("This should never be called because server always returns an empty array for this resource")}static newInstance(){const e=new Zt;e.uuid=A.randomUUID(),e.syncStartTime=new Date,e.syncStatus="incomplete";const t=Gn.model(),n={push:t.map(e=>({entity:e.entityName,todo:0,done:0})),pull:t.map(e=>({entity:e.entityName,todo:0,done:0}))};return e.setEntityStatus(n),e}setEntityStatus(e){this.entityStatus=JSON.stringify(e)}getEntityStatus(){return JSON.parse(this.entityStatus)}get toResource(){const e=o.a.pick(this,["uuid","syncStatus","syncStartTime","syncEndTime","appVersion","androidVersion","deviceName"]);return e.entityStatus=this.getEntityStatus(),e}clone(){const e=new Zt;return e.uuid=this.uuid,e.syncStatus=this.syncStatus,e.syncStartTime=this.syncStartTime,e.syncEndTime=this.syncEndTime,e.entityStatus=this.entityStatus,e.createdAt=this.createdAt,e.appVersion=this.appVersion,e.androidVersion=this.androidVersion,e.deviceName=this.deviceName,e}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Zt,"schema",{name:"SyncTelemetry",primaryKey:"uuid",properties:{uuid:"string",appVersion:"string",androidVersion:"string",deviceName:"string",syncStatus:"string",syncStartTime:"date",syncEndTime:"date?",entityStatus:"string"}});var Qt=Zt;class Xt extends I{static fromResource(e){return I.fromResource(e,new Xt)}static create(e){let t=new Xt;return t.uuid=A.randomUUID(),t.name=e,t}clone(){let e=new Xt;return e.uuid=this.uuid,e.name=this.name,e}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Xt,"schema",{name:"IdentifierSource",primaryKey:"uuid",properties:{uuid:"string",name:"string"}});var en=Xt;class tn extends d{static fromResource(e,t){const n=A.assignFields(e,new tn,["uuid","identifier","assignmentOrder","voided"]);return n.identifierSource=t.findByKey("uuid",L.getUUIDFor(e,"identifierSourceUUID"),en.schema.name),n.individual=t.findByKey("uuid",L.getUUIDFor(e,"individualUUID"),Ve.schema.name),n.programEnrolment=t.findByKey("uuid",L.getUUIDFor(e,"programEnrolmentUUID"),Ze.schema.name),n}get toResource(){const e=o.a.pick(this,["uuid","identifier","assignmentOrder","voided"]);return e.individualUUID=this.individual?this.individual.uuid:null,e.programEnrolmentUUID=this.programEnrolment?this.programEnrolment.uuid:null,e}clone(){let e=new tn;return e.uuid=this.uuid,e.identifierSource=this.identifierSource.clone(),e.identifier=this.identifier,e.assignmentOrder=this.assignmentOrder,e.individual=this.individual&&this.individual.clone(),e.programEnrolment=this.programEnrolment&&this.programEnrolment.clone(),e.voided=this.voided,e}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(tn,"schema",{name:"IdentifierAssignment",primaryKey:"uuid",properties:{uuid:"string",identifierSource:"IdentifierSource",identifier:"string",assignmentOrder:"double",individual:{type:"Individual",optional:!0},voided:{type:"bool",default:!1},programEnrolment:{type:"ProgramEnrolment",optional:!0}}});class nn{static create({ruleUUID:e,individualUUID:t,errorMessage:n,stacktrace:r}){const a=new nn;return a.uuid=A.randomUUID(),a.closed=!1,a.ruleUuid=e,a.individualUuid=t,a.errorMessage=n,a.stacktrace=r,a.errorDateTime=new Date,a}get toResource(){return o.a.pick(this,["uuid","ruleUuid","individualUuid","errorMessage","stacktrace","closed","errorDateTime"])}clone(){const e=new nn;return e.uuid=this.uuid,e.ruleUuid=this.ruleUuid,e.individualUuid=this.individualUuid,e.errorMessage=this.errorMessage,e.stacktrace=this.stacktrace,e.closed=this.closed,e.errorDateTime=this.errorDateTime,e}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(nn,"schema",{name:"RuleFailureTelemetry",primaryKey:"uuid",properties:{uuid:"string",ruleUuid:"string",individualUuid:"string",errorMessage:"string",stacktrace:"string",closed:{type:"bool",default:!1},errorDateTime:"date"}});var rn=nn;class an{pinMatches(e){return e===this.pin}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(an,"schema",{name:"BeneficiaryModePin",properties:{pin:"int"}});var sn=an,on={schema:[pt,ft,S,E,U,be,vt,G,q,Q,_e,Et,de,se,Pe,Ve,Te,pe,Ze,H,et,Ne,Tt,bt,ut,Ge,Be,te,Ht,he,Me,Le,It,gt,Se,Ut,je,Ae,zt,Rt,Ye,st,rt,Gt,Jt,qt,V,Qt,en,tn,rn,sn],schemaVersion:109,migration:function(e,t){e.schemaVersion<10&&(n=e.objects("DecisionConfig")).forEach(e=>{t.create(ut.schema.name,ut.create(e.fileName,e.decisionCode),!0)});if(e.schemaVersion<17)for(var n=e.objects("AddressLevel"),r=t.objects("AddressLevel"),a=0;a<n.length;a++)r[a].name=n[a].title;if(e.schemaVersion<23)for(r=t.objects("Individual"),a=0;a<r.length;a++)r[a].registrationDate=new Date(2017,0,0);if(e.schemaVersion<30){for(n=e.objects("Settings"),r=t.objects("Settings"),a=0;a<r.length;a++)r[a].locale=null;const i=t.objects("LocaleMapping");t.delete(i)}if(e.schemaVersion<32){const e=t.objects("Settings");t.delete(e)}if(e.schemaVersion<33){const e=t.objects("Checklist");o.a.forEach(e,e=>{e.baseDate=e.programEnrolment.individual.dateOfBirth})}if(e.schemaVersion<38){const e=t.objects("Program");o.a.forEach(e,e=>{e.colour=pe.randomColour()})}if(e.schemaVersion<39){const e=t.objects("Settings");o.a.forEach(e,e=>{e.userId="",e.password=""})}if(e.schemaVersion<40){const e=t.objects("Settings");o.a.forEach(e,e=>{e.authToken=""})}if(e.schemaVersion<41){const e=t.objects("Settings");o.a.forEach(e,e=>{e.poolId="",e.clientId="",e.organisationName=""})}if(e.schemaVersion<42){const e=t.objects("Individual");o.a.forEach(e,e=>{e.firstName="",e.lastName=""})}if(e.schemaVersion<48){const e=t.objects("Concept");o.a.forEach(e,e=>{e.voided=!1});const n=t.objects("ConceptAnswer");o.a.forEach(n,e=>{e.voided=!1})}if(e.schemaVersion<49){const n=e.objects("FormElement"),r=t.objects("FormElement");for(let e=0;e<n.length;e++)r[e].displayOrder=n[e].displayOrder;const a=e.objects("FormElementGroup"),i=t.objects("FormElementGroup");for(let e=0;e<a.length;e++)i[e].displayOrder=a[e].displayOrder}if(e.schemaVersion<50){const e=t.objects("Concept");o.a.forEach(e,e=>{"N/A"===e.datatype&&(e.datatype="NA")})}if(e.schemaVersion<51){const e=t.objects("ConceptAnswer");o.a.forEach(e,e=>{e.unique=!1})}if(e.schemaVersion<54&&o.a.forEach(t.objects("FormMapping"),e=>e.voided=!1),e.schemaVersion<55&&o.a.forEach(t.objects("EncounterType"),e=>e.voided=!1),e.schemaVersion<64&&(o.a.forEach(t.objects("EncounterType"),e=>{o.a.isEmpty(e.operationalEncounterTypeName)&&(e.operationalEncounterTypeName=e.name),o.a.isEmpty(e.displayName)&&(e.displayName=o.a.isEmpty(e.operationalEncounterTypeName)?e.name:e.operationalEncounterTypeName)}),o.a.forEach(t.objects("Program"),e=>{o.a.isEmpty(e.operationalProgramName)&&(e.operationalProgramName=e.name),o.a.isEmpty(e.displayName)&&(e.displayName=o.a.isEmpty(e.operationalProgramName)?e.name:e.operationalProgramName)})),e.schemaVersion<67){const n=e.objects("ConceptAnswer"),r=t.objects("ConceptAnswer");for(let e=0;e<n.length;e++)r[e].answerOrder=n[e].answerOrder}if(e.schemaVersion<73){const e=t.objects("Checklist"),n=t.objects("ChecklistItem");t.delete(n),t.delete(e)}if(e.schemaVersion<74&&o.a.forEach(t.objects("Individual"),e=>e.voided=!1),e.schemaVersion<76){const n=e.objects("AddressLevel"),r=t.objects("AddressLevel");for(let e=0;e<n.length;e++)r[e].level=n[e].level}if(e.schemaVersion<82){const e=t.objects("ProgramEncounter").filtered("maxVisitDateTime=null and earliestVisitDateTime!=null");for(let n=0;n<e.length;n++)t.create("EntityQueue",bt.create(e[n],"ProgramEncounter",new Date)),e[n].earliestVisitDateTime=null}if(e.schemaVersion<83&&o.a.forEach([...t.objects("Settings")],e=>{0!==e.pageSize&&void 0!==e.pageSize&&null!==e.pageSize||(e.pageSize=100)}),e.schemaVersion<87&&o.a.forEach(t.objects("ChecklistItemDetail"),e=>e.scheduleOnExpiryOfDependency=!1),e.schemaVersion<90&&o.a.forEach(t.objects("Settings"),e=>e.devSkipValidation=!1),e.schemaVersion<93){const e=t.objects("Individual");if(e.length>0){const n=Pe.create("Individual");n.uuid="9f2af1f9-e150-4f8e-aad3-40bb7eb05aa3",n.voided=!1,t.create(Pe.schema.name,n,!0),o.a.forEach(e,e=>e.subjectType=n)}}if(e.schemaVersion<94&&o.a.forEach(t.objects("Settings"),e=>e.captureLocation=!0),e.schemaVersion<95&&(o.a.forEach(t.objects("ProgramEnrolment"),e=>e.voided=!1),o.a.forEach(t.objects("ProgramEncounter"),e=>e.voided=!1),o.a.forEach(t.objects("Encounter"),e=>e.voided=!1)),e.schemaVersion<96&&o.a.forEach(t.objects("UserInfo"),e=>e.settings=Ht.DEFAULT_SETTINGS),e.schemaVersion<102){const e=t.objects("Program");o.a.forEach(e,e=>{e.programSubjectLabel=e.operationalProgramName||e.name})}if(e.schemaVersion<103&&o.a.forEach(t.objects(Ht.schema.name),e=>{e.username="",t.create(bt.schema.name,bt.create(e,Ht.schema.name))}),e.schemaVersion<104){const n=e.objects("SubjectType")[0],r=t.objects("FormMapping");o.a.forEach(r,e=>{e.subjectType=n})}e.schemaVersion<105&&o.a.forEach(t.objects(Rt.schema.name),e=>{e.entity={uuid:e.program?e.program.uuid:e.form?e.form.uuid:null,type:e.program?"Program":e.form?"Form":"None"}}),e.schemaVersion<108&&o.a.forEach(t.objects(Ne.schema.name),e=>{e.cancelObservations=[]}),e.schemaVersion<109&&o.a.forEach(t.objects(rn.schema.name),e=>{e.errorDateTime=new Date,e.closed=!1})}};function un(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const dn=(e,{res:t,filter:n,translated:r,parent:a,syncWeight:i}={})=>({entityName:e.schema.name,entityClass:e,resourceName:t||o.a.camelCase(e.schema.name),type:"reference",nameTranslated:r||!1,resourceSearchFilterURL:n||"lastModified",parent:a,syncWeight:i}),ln=(e,t={})=>dn(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){un(e,t,n[t])})}return e}({},t,{translated:!0})),cn=(e,{res:t,resUrl:n,parent:r,apiVersion:a,syncWeight:i}={})=>({entityName:e.schema.name,entityClass:e,resourceName:t||o.a.camelCase(e.schema.name),resourceUrl:n,type:"tx",nameTranslated:!1,parent:r,apiVersion:a,syncWeight:i}),_n=dn(st,{syncWeight:6}),mn=dn(Rt,{syncWeight:3}),hn=dn(zt,{syncWeight:3}),fn=dn(_e,{syncWeight:4}),pn=dn(Et,{syncWeight:4}),yn=ln(U,{res:"operationalEncounterType",syncWeight:4}),Mn=ln(pe,{res:"operationalProgram",syncWeight:3}),gn=ln(Te,{syncWeight:3}),Ln=ln(be,{syncWeight:1}),vn=ln(Se,{syncWeight:3}),Yn=ln(Ut,{syncWeight:3}),Dn=ln(je,{syncWeight:3}),Tn=ln(E,{syncWeight:4}),kn=ln(It,{syncWeight:3}),bn=ln(Jt,{syncWeight:0}),wn=ln(Pe,{res:"operationalSubjectType",syncWeight:1}),Sn=dn(rt,{parent:_n,syncWeight:3}),En=ln(de,{parent:fn,syncWeight:3}),On=ln(se,{parent:En,syncWeight:5}),jn=dn(S,{parent:Tn,syncWeight:4}),Hn=dn(en,{syncWeight:0}),xn=cn(Ve,{syncWeight:5}),An=ln(q,{res:"locations",syncWeight:4}),In=dn(G,{parent:An,syncWeight:4}),Fn=cn(Ne,{parent:xn,syncWeight:7}),Nn=cn(Ze,{parent:xn,syncWeight:3}),Un=cn(et,{parent:Nn,syncWeight:5}),Pn=cn(Ge,{res:"txNewChecklistEntity",parent:Nn,syncWeight:3}),Wn=cn(Be,{res:"txNewChecklistItemEntity",parent:Pn,syncWeight:2}),Rn=cn(Ae,{parent:xn,syncWeight:2}),Vn=cn(Gt,{res:"videotelemetric",parent:bn,syncWeight:0}),Cn=cn(Qt,{resUrl:"syncTelemetry",syncWeight:1}),zn=cn(Ht,{resUrl:"me",apiVersion:"v2",syncWeight:1}),Bn=cn(tn,{syncWeight:0}),Jn=cn(rn,{resUrl:"ruleFailureTelemetry",syncWeight:0});class Kn{static model(){return[bn,Sn,_n,mn,hn,Dn,Yn,vn,kn,pn,On,En,fn,Hn,In,An,yn,Mn,gn,Ln,wn,jn,Tn,Vn,Rn,Wn,Pn,Fn,Bn,Un,Nn,xn,zn,Cn,Jn]}static entitiesLoadedFromServer(){return o.a.differenceBy(on.schema,[ft,pt],"schema.name")}static findByName(e){return o.a.find(Kn.model(),t=>t.entityName===e)}}var Gn=Kn;var $n=class{constructor(e){this.ruleFile=e}setFunctions(e){o.a.isNil(e)||(this.decisionFn=e.getDecisions,this.enrolmentSummaryFn=e.getEnrolmentSummary,this.validationFn=e.validate,this.getNextScheduledVisitsFn=e.getNextScheduledVisits,this.getChecklistFn=e.getChecklists,this.getFormElementsStatuses=e.getFormElementsStatuses)}getDecisions(e,t){const n=this._safeInvokeRule(this.decisionFn,"Decision",{enrolmentDecisions:[],encounterDecisions:[],registrationDecisions:[]},e,t);return A.canLog(A.LogLevel.Debug)&&A.logDebug("EntityRule",`Decisions made: ${JSON.stringify(n)}`),n}getEnrolmentSummary(e,t){const n=this._safeInvokeRule(this.enrolmentSummaryFn,"Summary",[],e,t);return A.canLog(A.LogLevel.Debug)&&A.logDebug("EntityRule",`Summary made: ${JSON.stringify(n)}`),n}_safeInvokeRule(e,t,n,...r){if(A.logInfo("EntityRule",`Invoking rule ${t} on entity: ${r[0].constructor.name}`),o.a.isNil(e))return n;const a=e(...r);return o.a.isNil(a)?(A.logInfo("EntityRule",`${t} rule didn't return anything for: ${r[0].constructor.name}`),n):typeof a!=typeof n?(A.logInfo("EntityRule",`${t} didn't return an array for: ${r[0].constructor.name}`),n):a}validate(e,t){const n=this._safeInvokeRule(this.validationFn,"Validation",[],e,t);return n.forEach(e=>e.formIdentifier=d.fieldKeys.EXTERNAL_RULE),n}getNextScheduledVisits(e,t){const n=this._safeInvokeRule(this.getNextScheduledVisitsFn,"NextScheduledVisits",[],e,t);return A.logInfo("EntityRule",`${n.length} scheduled visits returned`),A.canLog(A.LogLevel.Debug)&&A.logDebug("EntityRule",`NextScheduledVisits: ${JSON.stringify(n)}`),n}getChecklists(e){const t=this._safeInvokeRule(this.getChecklistFn,"GetChecklists",[],e);return A.canLog(A.LogLevel.Debug)&&A.logDebug("EntityRule",`Checklists: ${JSON.stringify(t)}`),t}};class qn{constructor(e,t,n,r=[],a=[]){this.uuid=e,this.visibility=t,this.value=n,this.answersToSkip=r,this.validationErrors=a}_bool(e,t){const n=new qn;return n.uuid=this.uuid,n.visibility=t(this.visibility,e.visibility),n.value=this.value,n.answersToSkip=this.answersToSkip,n.validationErrors=this.validationErrors,n}or(e){return this._bool(e,(e,t)=>e||t)}and(e){return this._bool(e,(e,t)=>e&&t)}}var Zn=qn;class Qn{constructor(e,t,n,r){this.individual=e,this.relative=t,this.relation=n,this.relationshipUUID=r}static createEmptyInstance(){const e=new Qn;return e.individual=Ve.createEmptyInstance(),e.relative=Ve.createEmptyInstance(),e.relation=Se.createEmptyInstance(),e}cloneForEdit(){const e=new Qn;return e.relation=this.relation.clone(),e.enterDateTime=this.enterDateTime,e.exitDateTime=this.exitDateTime,e.individual=this.individual,e.relative=this.relative.cloneForReference(),e.relationshipUUID=this.relationshipUUID,e}validateFieldForEmpty(e,t){return e instanceof Date?o.a.isNil(e)?c.failure(t,"emptyValidationMessage"):c.successful(t):o.a.isEmpty(e)?c.failure(t,"emptyValidationMessage"):c.successful(t)}validateRelative(){const e=this.validateFieldForEmpty(this.relative.name,Qn.validationKeys.RELATIVE);return e.success&&this.relative.uuid===this.individual.uuid?c.failure(Qn.validationKeys.RELATIVE,"selfRelationshipNotAllowed"):e}_validateRelationship(){return"son"!==this.relation.name||A.dateAIsBeforeB(this.individual.dateOfBirth,this.relative.dateOfBirth)?"daughter"!==this.relation.name||A.dateAIsBeforeB(this.individual.dateOfBirth,this.relative.dateOfBirth)?"father"!==this.relation.name||A.dateAIsAfterB(this.individual.dateOfBirth,this.relative.dateOfBirth)?"mother"!==this.relation.name||A.dateAIsAfterB(this.individual.dateOfBirth,this.relative.dateOfBirth)?"grandson"!==this.relation.name||A.dateAIsBeforeB(this.individual.dateOfBirth,this.relative.dateOfBirth)?"granddaughter"!==this.relation.name||A.dateAIsBeforeB(this.individual.dateOfBirth,this.relative.dateOfBirth)?"grandfather"!==this.relation.name||A.dateAIsAfterB(this.individual.dateOfBirth,this.relative.dateOfBirth)?"grandmother"!==this.relation.name||A.dateAIsAfterB(this.individual.dateOfBirth,this.relative.dateOfBirth)?void 0:c.failure(Qn.validationKeys.RELATIVE,"grandmotherIsYounger"):c.failure(Qn.validationKeys.RELATIVE,"grandfatherIsYounger"):c.failure(Qn.validationKeys.RELATIVE,"granddaughterIsOlder"):c.failure(Qn.validationKeys.RELATIVE,"grandsonIsOlder"):c.failure(Qn.validationKeys.RELATIVE,"motherIsYounger"):c.failure(Qn.validationKeys.RELATIVE,"fatherIsYounger"):c.failure(Qn.validationKeys.RELATIVE,"daughterIsOlder"):c.failure(Qn.validationKeys.RELATIVE,"sonIsOlder")}validateIndividual(){return this.validateFieldForEmpty(this.individual.name,Qn.validationKeys.INDIVIDUAL)}validateRelation(){return this.validateFieldForEmpty(this.relation.name,Qn.validationKeys.RELATION)}validate(e){const t=[];return t.push(this.validateRelative()),t.push(this.validateIndividual()),t.push(this.validateRelation()),o.a.isNil(this.relative)||o.a.isNil(this.relation)||(o.a.isNil(this.relative.name)?t.push(new c(!1,Qn.validationKeys.RELATIVE,"selectRelative")):o.a.some(e,e=>e.relative.uuid===this.relative.uuid&&e.relation.uuid===this.relation.uuid)?(t.push(new c(!1,Qn.validationKeys.RELATIVE,"relationshipAlreadyRecorded")),t.push(new c(!1,Qn.validationKeys.RELATION,"relationshipAlreadyRecorded"))):t.push(this._validateRelationship())),o.a.reject(t,o.a.isNil)}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(Qn,"validationKeys",{RELATIVE:"RELATIVE",RELATION:"RELATION",INDIVIDUAL:"INDIVIDUAL"});var Xn=Qn;class er extends re{constructor(e,t,n,r){super(e,re.types.MultiSelect,t,n,r)}selectOption(e){return this.selectedOptions.indexOf(e)>-1?new er(this.label,this.optsFnMap,this.optsQueryMap,this.selectedOptions.filter(t=>t!==e)):new er(this.label,this.optsFnMap,this.optsQueryMap,[...this.selectedOptions,e])}isApplied(){return this.selectedOptions.length>0}toString(){return`${this.label} - ${this.selectedOptions.join(", ")}`}clone(){return new er(this.label,this.optsFnMap,this.optsQueryMap,this.selectedOptions)}}var tr=class{constructor(e){this.individual=e,this.program={uuid:null}}nonVoidedEncounters(){return[]}get isActive(){return!1}get observations(){return[]}get encounters(){return[]}get uuid(){return null}};class nr extends re{constructor(e,t,n,r){super(e,re.types.SingleSelect,t,n,r)}selectOption(e){return new nr(this.label,this.optsFnMap,this.optsQueryMap,this.selectedOptions.indexOf(e)>-1?[]:[e])}isApplied(){return this.selectedOptions.length>0}toString(){return`${this.label} - ${this.selectedOptions.join(", ")}`}clone(){return new nr(this.label,this.optsFnMap,this.optsQueryMap,this.selectedOptions)}static forSubjectTypes(e,t){return new nr("Choose type",e.reduce((e,t)=>e.set(t.name,t),new Map)).selectOption(t.name)}}var rr=class{constructor(e){this.form=e}next(){return this.form.firstFormElementGroup}previous(){return null}get isLast(){return!0}get isFirst(){return!0}validate(){return[]}get formElementIds(){return[]}getFormElements(){return[]}filterElements(e){return this.getFormElements()}};const ar=(e,t)=>{if(!e)throw new Error(t)};class ir{constructor(e,t,n){ar(e,"Id is mandatory"),this.id=e,this.type=t,this.parameters=n||{}}validate(){ar(ir.type[this.type],"Work item must be one of WorkItem.type"),this.type!==ir.type.REGISTRATION&&this.ensureFieldExists("subjectUUID"),this.type===ir.type.PROGRAM_ENROLMENT&&this.ensureFieldExists("programName"),this.type===ir.type.PROGRAM_ENCOUNTER&&this.ensureFieldExists("encounterType"),this.type===ir.type.ENCOUNTER&&this.ensureFieldExists("encounterType")}fieldMissingError(e){return`Work Item id: ${this.id}, type: ${this.type}, `+`parameters: {${Object.keys(this.parameters)}}, `+`'${e}: ${this.parameters[e]}', `+`errorMessage: '${e} is mandatory'`}ensureFieldExists(e){ar(o.a.get(this.parameters,e),this.fieldMissingError(e))}}!function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(ir,"type",{REGISTRATION:"REGISTRATION",ENCOUNTER:"ENCOUNTER",PROGRAM_ENROLMENT:"PROGRAM_ENROLMENT",PROGRAM_EXIT:"PROGRAM_EXIT",PROGRAM_ENCOUNTER:"PROGRAM_ENCOUNTER",CANCELLED_ENCOUNTER:"CANCELLED_ENCOUNTER"});var sr=class{constructor(e,t=[]){this.name=e,this.workItems=t,this.initializeCurrentWorkItemIfRequiredAndPossible()}hasWorkItems(){return this.workItems.length>0}noCurrentWorkItemSet(){return!this.currentWorkItem}initializeCurrentWorkItemIfRequiredAndPossible(){this.hasWorkItems()&&this.noCurrentWorkItemSet()&&this.setCurrentWorkItem(this.workItems[0])}addWorkItems(...e){this.workItems.push(...e),this.initializeCurrentWorkItemIfRequiredAndPossible()}findWorkItem(e){return o.a.find(this.workItems,{id:e})}findWorkItemIndex(e){return o.a.findIndex(this.workItems,{id:e})}setCurrentWorkItem(e){let t=this.findWorkItem(e.id);if(!t)throw new Error("Work Item does not exist in work list");t.validate(),this.currentWorkItem=t}nextWorkItem(){let e=this.findWorkItemIndex(this.currentWorkItem.id);return o.a.get(this.workItems,e+1)}withRegistration(e){return this.addWorkItems(new ir(A.randomUUID(),ir.type.REGISTRATION,{subjectTypeName:e})),this}withEnrolment(e){return this.addWorkItems(new ir(A.randomUUID(),ir.type.PROGRAM_ENROLMENT,{programName:e})),this}withEncounter(e){return this.addWorkItems(new ir(A.randomUUID(),ir.type.PROGRAM_ENCOUNTER,e)),this}withCancelledEncounter(e){return this.addWorkItems(new ir(A.randomUUID(),ir.type.CANCELLED_ENCOUNTER,e)),this}};class or{constructor(...e){this.workLists=e,this.setFirstWorkListAsCurrent()}setCurrentWorkListByName(e){return o.a.find(this.workLists,{name:e})}setCurrentWorkList({name:e}){return o.a.find(this.workLists,{name:e})}setFirstWorkListAsCurrent(){this.workLists.length>0&&(this.currentWorkList=this.workLists[0])}peekNextWorkItem(){return this.currentWorkList.nextWorkItem()}getCurrentWorkItem(){return o.a.get(this.currentWorkList,"currentWorkItem")}addItemsToCurrentWorkList(...e){this.currentWorkList.addWorkItems(...e)}}n.d(t,"AbstractEncounter",function(){return z}),n.d(t,"AddressLevel",function(){return q}),n.d(t,"BaseEntity",function(){return d}),n.d(t,"ChecklistDetail",function(){return st}),n.d(t,"Checklist",function(){return Ge}),n.d(t,"ChecklistItemDetail",function(){return rt}),n.d(t,"ChecklistItem",function(){return Be}),n.d(t,"ChecklistItemStatus",function(){return Ye}),n.d(t,"CompositeDuration",function(){return b}),n.d(t,"Concept",function(){return E}),n.d(t,"ConceptAnswer",function(){return S}),n.d(t,"ConfigFile",function(){return ut}),n.d(t,"Decision",function(){return lt}),n.d(t,"Duration",function(){return g}),n.d(t,"Encounter",function(){return Ne}),n.d(t,"EncounterType",function(){return U}),n.d(t,"EntityMetaData",function(){return Gn}),n.d(t,"EntityQueue",function(){return bt}),n.d(t,"EntityRule",function(){return $n}),n.d(t,"EntitySyncStatus",function(){return Tt}),n.d(t,"Family",function(){return gt}),n.d(t,"Filter",function(){return re}),n.d(t,"Format",function(){return te}),n.d(t,"FormElement",function(){return se}),n.d(t,"FormElementGroup",function(){return de}),n.d(t,"FormElementStatus",function(){return Zn}),n.d(t,"Form",function(){return _e}),n.d(t,"FormMapping",function(){return Et}),n.d(t,"Gender",function(){return be}),n.d(t,"Individual",function(){return Ve}),n.d(t,"IndividualRelation",function(){return Se}),n.d(t,"IndividualRelationGenderMapping",function(){return Ut}),n.d(t,"IndividualRelationship",function(){return Ae}),n.d(t,"IndividualRelationshipType",function(){return je}),n.d(t,"IndividualRelative",function(){return Xn}),n.d(t,"KeyValue",function(){return Q}),n.d(t,"LocaleMapping",function(){return pt}),n.d(t,"MediaQueue",function(){return qt}),n.d(t,"MultipleCodedValues",function(){return Y}),n.d(t,"MultiSelectFilter",function(){return er}),n.d(t,"ModelGeneral",function(){return A}),n.d(t,"NullProgramEnrolment",function(){return tr}),n.d(t,"Observation",function(){return H}),n.d(t,"ObservationsHolder",function(){return P}),n.d(t,"PrimitiveValue",function(){return T}),n.d(t,"ProgramConfig",function(){return It}),n.d(t,"ProgramEncounter",function(){return et}),n.d(t,"ProgramEnrolment",function(){return Ze}),n.d(t,"Program",function(){return pe}),n.d(t,"ProgramOutcome",function(){return Te}),n.d(t,"ReferenceEntity",function(){return I}),n.d(t,"RuleDependency",function(){return zt}),n.d(t,"Rule",function(){return Rt}),n.d(t,"Schema",function(){return on}),n.d(t,"Settings",function(){return ft}),n.d(t,"SingleCodedValue",function(){return p}),n.d(t,"SingleSelectFilter",function(){return nr}),n.d(t,"StaticFormElementGroup",function(){return rr}),n.d(t,"StringKeyNumericValue",function(){return he}),n.d(t,"UserDefinedIndividualProperty",function(){return vt}),n.d(t,"UserInfo",function(){return Ht}),n.d(t,"ValidationResult",function(){return c}),n.d(t,"ValidationResults",function(){return _t}),n.d(t,"Video",function(){return Jt}),n.d(t,"VideoTelemetric",function(){return Gt}),n.d(t,"VisitScheduleConfig",function(){return Le}),n.d(t,"VisitScheduleInterval",function(){return Me}),n.d(t,"Point",function(){return V}),n.d(t,"SubjectType",function(){return Pe}),n.d(t,"SyncTelemetry",function(){return Qt}),n.d(t,"IdentifierSource",function(){return en}),n.d(t,"IdentifierAssignment",function(){return tn}),n.d(t,"WorkLists",function(){return or}),n.d(t,"WorkList",function(){return sr}),n.d(t,"WorkItem",function(){return ir}),n.d(t,"RuleFailureTelemetry",function(){return rn}),n.d(t,"BeneficiaryModePin",function(){return sn})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,